<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0060)http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm -->
<HTML dir=ltr lang=en class=client-nojs><HEAD><TITLE>Parsing/RPN calculator algorithm - Rosetta Code</TITLE>
<META charset=UTF-8>
<META name=GENERATOR content="MSHTML 8.00.6001.23487">
<SCRIPT type=text/javascript>
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok8v=02fcfa4f56/"},atok:"4832238d948c1a6ada207e518ed07859",petok:"be22e23a44c0e07621202b244edd9d8905449293-1394242132-1800",zone:"rosettacode.org",rocket:"a",apps:{"ga_key":{"ua":"UA-1219419-1","ga_bs":"2"}}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok8v=221574e73d/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</SCRIPT>
<LINK title=Edit rel=alternate type=application/x-wiki 
href="/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit"><LINK 
title=Edit rel=edit 
href="/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit"><LINK 
rel="shortcut icon" href="/favicon.ico"><LINK title="Rosetta Code (en)" 
rel=search type=application/opensearchdescription+xml 
href="/mw/opensearch_desc.php"><LINK rel=EditURI type=application/rsd+xml 
href="http://rosettacode.org/mw/api.php?action=rsd"><LINK rel=copyright 
href="http://www.gnu.org/licenses/fdl-1.2.html"><LINK 
title="Rosetta Code Atom feed" rel=alternate type=application/atom+xml 
href="/mw/index.php?title=Special:RecentChanges&amp;feed=atom"><LINK 
rel=stylesheet 
href="Parsing-RPN%20algorithm%20-%20Rosetta%20Code_files/load.css">
<META name=ResourceLoaderDynamicStyles content=""><LINK rel=stylesheet 
href="Parsing-RPN%20algorithm%20-%20Rosetta%20Code_files/load(1).css">
<STYLE>Alang(ar) {
	TEXT-DECORATION: none
}
Alang(ckb) {
	TEXT-DECORATION: none
}
Alang(fa) {
	TEXT-DECORATION: none
}
Alang(kk-arab) {
	TEXT-DECORATION: none
}
Alang(mzn) {
	TEXT-DECORATION: none
}
Alang(ps) {
	TEXT-DECORATION: none
}
Alang(ur) {
	TEXT-DECORATION: none
}
</STYLE>

<SCRIPT type=text/rocketscript 
data-rocketsrc="http://rosettacode.org/mw/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></SCRIPT>

<SCRIPT type=text/rocketscript>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Parsing/RPN_calculator_algorithm","wgTitle":"Parsing/RPN calculator algorithm","wgCurRevisionId":172229,"wgArticleId":10992,"wgIsArticle":true,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Programming Tasks","Solutions by Programming Task","Ada","ANTLR","AutoHotkey","BBC BASIC","C","C++","C sharp","Clojure","Ela","D","Go","Groovy","Haskell","Icon","Unicon","Icon Programming Library","J","Java","Liberty BASIC","NetRexx","Objeck","OCaml","OoRexx","Perl","Perl 6","PHP","PicoLisp","PL/I","Prolog","Python","Racket","REXX","Ruby","Run BASIC","Tcl"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Parsing/RPN_calculator_algorithm","wgRestrictionEdit":[],"wgRestrictionMove":[],"sfgRemoveText":"Remove","sfgAutocompleteOnAllChars":false,"sfgAutocompleteValues":{},"sfgShowOnSelect":{},"sfgFormErrorsHeader":"There were errors with your form input; see below","sfgBlankErrorStr":"cannot be blank","sfgBadURLErrorStr":"must have the correct URL format, starting with \"http\"","sfgBadEmailErrorStr":"must have a valid email address format","sfgBadNumberErrorStr":"must be a valid number","sfgBadDateErrorStr":"must be a valid date","sfgAnonEditWarning":"Warning: You are not logged in. Your IP address will be recorded in this page\'s edit history."});
}</SCRIPT>

<SCRIPT type=text/rocketscript>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,
"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs102":false,"searchNs103":false,"searchNs106":false,"searchNs107":false,"searchNs108":false,"searchNs109":false,"searchNs110":false,"searchNs111":false,"searchNs112":false,"searchNs113":false,"searchNs114":false,"searchNs115":false,"searchNs170":false,"searchNs171":false,"searchNs274":false,"searchNs275":false});;},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","watchToken":false});;},{},{});
/* cache key: rosettacode:resourceloader:filter:minify-js:7:2ce58c77cc7227488637c1087f1776c6 */
}</SCRIPT>

<SCRIPT type=text/rocketscript>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax"]);
}</SCRIPT>
<LINK title="Parsing/RPN calculator algorithm" rel=alternate 
type=application/rdf+xml 
href="/mw/index.php?title=Special:ExportRDF/Parsing/RPN_calculator_algorithm&amp;xmlmime=rdf"><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mw/skins/vector/csshover.min.htc")}</style><![endif]-->
<SCRIPT type=text/javascript>
/* <![CDATA[ */
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-1219419-1']);
_gaq.push(['_trackPageview']);

(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

(function(b){(function(a){"__CF"in b&&"DJS"in b.__CF?b.__CF.DJS.push(a):"addEventListener"in b?b.addEventListener("load",a,!1):b.attachEvent("onload",a)})(function(){"FB"in b&&"Event"in FB&&"subscribe"in FB.Event&&(FB.Event.subscribe("edge.create",function(a){_gaq.push(["_trackSocial","facebook","like",a])}),FB.Event.subscribe("edge.remove",function(a){_gaq.push(["_trackSocial","facebook","unlike",a])}),FB.Event.subscribe("message.send",function(a){_gaq.push(["_trackSocial","facebook","send",a])}));"twttr"in b&&"events"in twttr&&"bind"in twttr.events&&twttr.events.bind("tweet",function(a){if(a){var b;if(a.target&&a.target.nodeName=="IFRAME")a:{if(a=a.target.src){a=a.split("#")[0].match(/[^?=&]+=([^&]*)?/g);b=0;for(var c;c=a[b];++b)if(c.indexOf("url")===0){b=unescape(c.split("=")[1]);break a}}b=void 0}_gaq.push(["_trackSocial","twitter","tweet",b])}})})})(window);
/* ]]> */
</SCRIPT>
</HEAD>
<BODY 
class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Parsing_RPN_calculator_algorithm skin-vector action-view vector-animateLayout">
<DIV id=mw-page-base class=noprint></DIV>
<DIV id=mw-head-base class=noprint></DIV>
<DIV id=content class=mw-body><A id=top></A>
<DIV style="DISPLAY: none" id=mw-js-message></DIV>
<H1 id=firstHeading class=firstHeading><SPAN dir=auto>Parsing/RPN calculator 
algorithm</SPAN></H1>
<DIV id=bodyContent>
<DIV id=siteSub>From Rosetta Code</DIV>
<DIV id=contentSub></DIV>
<DIV id=jump-to-nav class=mw-jump>Jump to: <A 
href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#mw-head">navigation</A>, 
<A 
href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#p-search">search</A> 
</DIV>
<DIV dir=ltr id=mw-content-text lang=en class=mw-content-ltr>
<DIV style="WIDTH: 2in" class=infobox>
<DIV class=floatleft><A title="Category:Solutions by Programming Task" 
href="http://rosettacode.org/wiki/Category:Solutions_by_Programming_Task"><IMG 
alt=Task 
src="Parsing-RPN%20algorithm%20-%20Rosetta%20Code_files/64px-Rcode-button-task-crushed.png" 
width=64 height=64></A></DIV><B>Parsing/RPN calculator algorithm</B><BR>You are 
encouraged to <A title="Rosetta Code:Solve a Task" 
href="http://rosettacode.org/wiki/Rosetta_Code:Solve_a_Task">solve this task</A> 
according to the task description, using any language you may know.</DIV>
<P>Create a stack-based evaluator for an expression in <A class=extiw 
title="wp:Reverse Polish notation" 
href="http://en.wikipedia.org/wiki/Reverse_Polish_notation">reverse Polish 
notation</A> that also shows the changes in the stack as each individual token 
is processed <I>as a table</I>. </P>
<UL>
  <LI>Assume an input of a correct, space separated, string of tokens of an RPN 
  expression </LI>
  <LI>Test with the RPN expression generated from the <A 
  title="Parsing/Shunting-yard algorithm" 
  href="http://rosettacode.org/wiki/Parsing/Shunting-yard_algorithm">Parsing/Shunting-yard 
  algorithm</A> task <CODE>'3 4 2 * 1 5 - 2 3 ^ ^ / +'</CODE> then print and 
  display the output here. </LI></UL>
<DL>
  <DT>Note</DT>
  <DD></DD></DL>
<UL>
  <LI>'^' means exponentiation in the expression above. </LI></UL>
<DL>
  <DT>See also</DT>
  <DD></DD></DL>
<UL>
  <LI><A title="Parsing/Shunting-yard algorithm" 
  href="http://rosettacode.org/wiki/Parsing/Shunting-yard_algorithm">Parsing/Shunting-yard 
  algorithm</A> for a method of generating an RPN from an infix expression. 
</LI>
  <LI>Several solutions to <A title="24 game/Solve" 
  href="http://rosettacode.org/wiki/24_game/Solve">24 game/Solve</A> make use of 
  RPN evaluators (although tracing how they work is not a part of that task). 
  </LI>
  <LI><A title="Parsing/RPN to infix conversion" 
  href="http://rosettacode.org/wiki/Parsing/RPN_to_infix_conversion">Parsing/RPN 
  to infix conversion</A>. </LI>
  <LI><A title="Arithmetic evaluation" 
  href="http://rosettacode.org/wiki/Arithmetic_evaluation">Arithmetic 
  evaluation</A>. </LI></UL>
<TABLE id=toc class=toc>
  <TBODY>
  <TR>
    <TD>
      <DIV id=toctitle>
      <H2>Contents</H2></DIV>
      <UL>
        <LI class="toclevel-1 tocsection-1"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Ada"><SPAN 
        class=tocnumber>1</SPAN> <SPAN class=toctext>Ada</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-2"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#ANTLR"><SPAN 
        class=tocnumber>2</SPAN> <SPAN class=toctext>ANTLR</SPAN></A> 
        <UL>
          <LI class="toclevel-2 tocsection-3"><A 
          href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Java"><SPAN 
          class=tocnumber>2.1</SPAN> <SPAN 
        class=toctext>Java</SPAN></A></LI></UL></LI>
        <LI class="toclevel-1 tocsection-4"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#AutoHotkey"><SPAN 
        class=tocnumber>3</SPAN> <SPAN class=toctext>AutoHotkey</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-5"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#BBC_BASIC"><SPAN 
        class=tocnumber>4</SPAN> <SPAN class=toctext>BBC BASIC</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-6"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#C"><SPAN 
        class=tocnumber>5</SPAN> <SPAN class=toctext>C</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-7"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#C.2B.2B"><SPAN 
        class=tocnumber>6</SPAN> <SPAN class=toctext>C++</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-8"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#C.23"><SPAN 
        class=tocnumber>7</SPAN> <SPAN class=toctext>C#</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-9"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Clojure"><SPAN 
        class=tocnumber>8</SPAN> <SPAN class=toctext>Clojure</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-10"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Ela"><SPAN 
        class=tocnumber>9</SPAN> <SPAN class=toctext>Ela</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-11"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#D"><SPAN 
        class=tocnumber>10</SPAN> <SPAN class=toctext>D</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-12"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Go"><SPAN 
        class=tocnumber>11</SPAN> <SPAN class=toctext>Go</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-13"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Groovy"><SPAN 
        class=tocnumber>12</SPAN> <SPAN class=toctext>Groovy</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-14"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Haskell"><SPAN 
        class=tocnumber>13</SPAN> <SPAN class=toctext>Haskell</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-15"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Icon_and_Unicon"><SPAN 
        class=tocnumber>14</SPAN> <SPAN class=toctext>Icon and 
        Unicon</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-16"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#J"><SPAN 
        class=tocnumber>15</SPAN> <SPAN class=toctext>J</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-17"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Java_2"><SPAN 
        class=tocnumber>16</SPAN> <SPAN class=toctext>Java</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-18"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Liberty_BASIC"><SPAN 
        class=tocnumber>17</SPAN> <SPAN class=toctext>Liberty 
        BASIC</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-19"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#NetRexx"><SPAN 
        class=tocnumber>18</SPAN> <SPAN class=toctext>NetRexx</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-20"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Objeck"><SPAN 
        class=tocnumber>19</SPAN> <SPAN class=toctext>Objeck</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-21"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#OCaml"><SPAN 
        class=tocnumber>20</SPAN> <SPAN class=toctext>OCaml</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-22"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#ooRexx"><SPAN 
        class=tocnumber>21</SPAN> <SPAN class=toctext>ooRexx</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-23"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Perl"><SPAN 
        class=tocnumber>22</SPAN> <SPAN class=toctext>Perl</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-24"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Perl_6"><SPAN 
        class=tocnumber>23</SPAN> <SPAN class=toctext>Perl 6</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-25"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#PHP"><SPAN 
        class=tocnumber>24</SPAN> <SPAN class=toctext>PHP</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-26"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#PicoLisp"><SPAN 
        class=tocnumber>25</SPAN> <SPAN class=toctext>PicoLisp</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-27"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#PL.2FI"><SPAN 
        class=tocnumber>26</SPAN> <SPAN class=toctext>PL/I</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-28"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Prolog"><SPAN 
        class=tocnumber>27</SPAN> <SPAN class=toctext>Prolog</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-29"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Python"><SPAN 
        class=tocnumber>28</SPAN> <SPAN class=toctext>Python</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-30"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Racket"><SPAN 
        class=tocnumber>29</SPAN> <SPAN class=toctext>Racket</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-31"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#REXX"><SPAN 
        class=tocnumber>30</SPAN> <SPAN class=toctext>REXX</SPAN></A> 
        <UL>
          <LI class="toclevel-2 tocsection-32"><A 
          href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#version_1"><SPAN 
          class=tocnumber>30.1</SPAN> <SPAN class=toctext>version 
          1</SPAN></A></LI>
          <LI class="toclevel-2 tocsection-33"><A 
          href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#version_2"><SPAN 
          class=tocnumber>30.2</SPAN> <SPAN class=toctext>version 
          2</SPAN></A></LI>
          <LI class="toclevel-2 tocsection-34"><A 
          href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#version_3_.28error_checking.29"><SPAN 
          class=tocnumber>30.3</SPAN> <SPAN class=toctext>version 3 (error 
          checking)</SPAN></A></LI></UL></LI>
        <LI class="toclevel-1 tocsection-35"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Ruby"><SPAN 
        class=tocnumber>31</SPAN> <SPAN class=toctext>Ruby</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-36"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Run_BASIC"><SPAN 
        class=tocnumber>32</SPAN> <SPAN class=toctext>Run BASIC</SPAN></A></LI>
        <LI class="toclevel-1 tocsection-37"><A 
        href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Tcl"><SPAN 
        class=tocnumber>33</SPAN> <SPAN 
  class=toctext>Tcl</SPAN></A></LI></UL></TD></TR></TBODY></TABLE>
<H2><SPAN class=editsection>[<A title="Edit section: Ada" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=1">edit</A>]</SPAN> 
<SPAN id=Ada class=mw-headline><A title=Category:Ada 
href="http://rosettacode.org/wiki/Category:Ada">Ada</A></SPAN></H2><PRE class="ada highlighted_source"><SPAN class=kw3>with</SPAN> Ada.<SPAN class=me1>Text_IO</SPAN>, Ada.<SPAN class=me1>Containers</SPAN>.<SPAN class=me1>Vectors</SPAN>;<BR>&nbsp;<BR><SPAN class=kw3>procedure</SPAN> RPN_Calculator <SPAN class=kw1>is</SPAN><BR>&nbsp;<BR>  <SPAN class=kw3>package</SPAN> IIO <SPAN class=kw1>is</SPAN> <SPAN class=kw3>new</SPAN> Ada.<SPAN class=me1>Text_IO</SPAN>.<SPAN class=me1>Float_IO</SPAN><SPAN class=br0>(</SPAN>Float<SPAN class=br0>)</SPAN>;<BR>&nbsp;<BR>   <SPAN class=kw3>package</SPAN> Float_Vec <SPAN class=kw1>is</SPAN> <SPAN class=kw3>new</SPAN> Ada.<SPAN class=me1>Containers</SPAN>.<SPAN class=me1>Vectors</SPAN><BR>     <SPAN class=br0>(</SPAN>Index_Type =&gt; Positive, Element_Type =&gt; Float<SPAN class=br0>)</SPAN>;<BR>   Stack: Float_Vec.<SPAN class=me1>Vector</SPAN>;<BR>&nbsp;<BR>   Input: String&nbsp;:= Ada.<SPAN class=me1>Text_IO</SPAN>.<SPAN class=me1>Get_Line</SPAN>;<BR>   Cursor: Positive&nbsp;:= Input'First;<BR>   New_Cursor: Positive;<BR>&nbsp;<BR><SPAN class=kw1>begin</SPAN><BR>   <SPAN class=kw1>loop</SPAN><BR>      <SPAN class=co1>-- read spaces</SPAN><BR>      <SPAN class=kw1>while</SPAN> Cursor &lt;= Input'Last <SPAN class=kw2>and</SPAN> <SPAN class=kw1>then</SPAN> Input<SPAN class=br0>(</SPAN>Cursor<SPAN class=br0>)</SPAN>=' ' <SPAN class=kw1>loop</SPAN><BR>         Cursor&nbsp;:= Cursor + <SPAN class=nu0>1</SPAN>;<BR>      <SPAN class=kw1>end</SPAN> <SPAN class=kw1>loop</SPAN>;<BR>&nbsp;<BR>      <SPAN class=kw3>exit</SPAN> <SPAN class=kw3>when</SPAN> Cursor &gt; Input'Last;<BR>&nbsp;<BR>      New_Cursor&nbsp;:= Cursor;<BR>      <SPAN class=kw1>while</SPAN> New_Cursor &lt;= Input'Last <SPAN class=kw2>and</SPAN> <SPAN class=kw1>then</SPAN> Input<SPAN class=br0>(</SPAN>New_Cursor<SPAN class=br0>)</SPAN> /= ' ' <SPAN class=kw1>loop</SPAN><BR>         New_Cursor&nbsp;:= New_Cursor + <SPAN class=nu0>1</SPAN>;<BR>      <SPAN class=kw1>end</SPAN> <SPAN class=kw1>loop</SPAN>;<BR>&nbsp;<BR>      <SPAN class=co1>-- try to read a number and push it to the stack</SPAN><BR>      <SPAN class=kw1>declare</SPAN><BR>         Last: Positive;<BR>         Value: Float;<BR>         X, Y: Float;<BR>      <SPAN class=kw1>begin</SPAN><BR>         IIO.<SPAN class=me1>Get</SPAN><SPAN class=br0>(</SPAN>From =&gt; Input<SPAN class=br0>(</SPAN>Cursor .. <SPAN class=me1>New_Cursor</SPAN> - <SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN>,<BR>                 Item =&gt; Value,<BR>                 Last =&gt; Last<SPAN class=br0>)</SPAN>;<BR>         Stack.<SPAN class=me1>Append</SPAN><SPAN class=br0>(</SPAN>Value<SPAN class=br0>)</SPAN>;<BR>         Cursor&nbsp;:= New_Cursor;<BR>&nbsp;<BR>      <SPAN class=kw1>exception</SPAN> <SPAN class=co1>-- if reading the number fails, try to read an operator token</SPAN><BR>         <SPAN class=kw3>when</SPAN> <SPAN class=kw3>others</SPAN> =&gt;<BR>            Y&nbsp;:= Stack.<SPAN class=me1>Last_Element</SPAN>; Stack.<SPAN class=me1>Delete_Last</SPAN>; <SPAN class=co1>-- pick two elements</SPAN><BR>            X&nbsp;:= Stack.<SPAN class=me1>Last_Element</SPAN>; Stack.<SPAN class=me1>Delete_Last</SPAN>; <SPAN class=co1>-- from the stack</SPAN><BR>            <SPAN class=kw1>case</SPAN> Input<SPAN class=br0>(</SPAN>Cursor<SPAN class=br0>)</SPAN> <SPAN class=kw1>is</SPAN><BR>               <SPAN class=kw3>when</SPAN> '+' =&gt; Stack.<SPAN class=me1>Append</SPAN><SPAN class=br0>(</SPAN>X+Y<SPAN class=br0>)</SPAN>;<BR>               <SPAN class=kw3>when</SPAN> '-' =&gt; Stack.<SPAN class=me1>Append</SPAN><SPAN class=br0>(</SPAN>X-Y<SPAN class=br0>)</SPAN>;<BR>               <SPAN class=kw3>when</SPAN> '*' =&gt; Stack.<SPAN class=me1>Append</SPAN><SPAN class=br0>(</SPAN>X*Y<SPAN class=br0>)</SPAN>;<BR>               <SPAN class=kw3>when</SPAN> '/' =&gt; Stack.<SPAN class=me1>Append</SPAN><SPAN class=br0>(</SPAN>X/Y<SPAN class=br0>)</SPAN>;<BR>               <SPAN class=kw3>when</SPAN> '^' =&gt; Stack.<SPAN class=me1>Append</SPAN><SPAN class=br0>(</SPAN>X ** Integer<SPAN class=br0>(</SPAN>Float'Rounding<SPAN class=br0>(</SPAN>Y<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN>;<BR>               <SPAN class=kw3>when</SPAN> <SPAN class=kw3>others</SPAN> =&gt; <SPAN class=kw3>raise</SPAN> Program_Error <SPAN class=kw3>with</SPAN> <SPAN class=st0>"unecpected token '"</SPAN><BR>                  &amp; Input<SPAN class=br0>(</SPAN>Cursor<SPAN class=br0>)</SPAN> &amp; <SPAN class=st0>"' at column"</SPAN> &amp; Integer'Image<SPAN class=br0>(</SPAN>Cursor<SPAN class=br0>)</SPAN>;<BR>            <SPAN class=kw1>end</SPAN> <SPAN class=kw1>case</SPAN>;<BR>            Cursor&nbsp;:= New_Cursor;<BR>      <SPAN class=kw1>end</SPAN>;<BR>&nbsp;<BR>      <SPAN class=kw1>for</SPAN> I <SPAN class=kw3>in</SPAN> Stack.<SPAN class=me1>First_Index</SPAN> .. <SPAN class=me1>Stack</SPAN>.<SPAN class=me1>Last_Index</SPAN> <SPAN class=kw1>loop</SPAN><BR>         Ada.<SPAN class=me1>Text_IO</SPAN>.<SPAN class=me1>Put</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>" "</SPAN><SPAN class=br0>)</SPAN>;<BR>         IIO.<SPAN class=me1>Put</SPAN><SPAN class=br0>(</SPAN>Stack.<SPAN class=me1>Element</SPAN><SPAN class=br0>(</SPAN>I<SPAN class=br0>)</SPAN>, Aft =&gt; <SPAN class=nu0>5</SPAN>, Exp =&gt; <SPAN class=nu0>0</SPAN><SPAN class=br0>)</SPAN>;<BR>      <SPAN class=kw1>end</SPAN> <SPAN class=kw1>loop</SPAN>;<BR>      Ada.<SPAN class=me1>Text_IO</SPAN>.<SPAN class=me1>New_Line</SPAN>;<BR>   <SPAN class=kw1>end</SPAN> <SPAN class=kw1>loop</SPAN>;<BR>&nbsp;<BR>   Ada.<SPAN class=me1>Text_IO</SPAN>.<SPAN class=me1>Put</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"Result = "</SPAN><SPAN class=br0>)</SPAN>;<BR>   IIO.<SPAN class=me1>Put</SPAN><SPAN class=br0>(</SPAN>Item =&gt; Stack.<SPAN class=me1>Last_Element</SPAN>, Aft =&gt; <SPAN class=nu0>5</SPAN>, Exp =&gt; <SPAN class=nu0>0</SPAN><SPAN class=br0>)</SPAN>;<BR>&nbsp;<BR>&nbsp;<BR><SPAN class=kw1>end</SPAN> RPN_Calculator;</PRE>Output:<PRE>3 4 2 * 1 5 - 2 3 ^ ^ / +
  3.00000
  3.00000  4.00000
  3.00000  4.00000  2.00000
  3.00000  8.00000
  3.00000  8.00000  1.00000
  3.00000  8.00000  1.00000  5.00000
  3.00000  8.00000 -4.00000
  3.00000  8.00000 -4.00000  2.00000
  3.00000  8.00000 -4.00000  2.00000  3.00000
  3.00000  8.00000 -4.00000  8.00000
  3.00000  8.00000 65536.00000
  3.00000  0.00012
  3.00012
Result =  3.00012</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: ANTLR" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=2">edit</A>]</SPAN> 
<SPAN id=ANTLR class=mw-headline><A title=Category:ANTLR 
href="http://rosettacode.org/wiki/Category:ANTLR">ANTLR</A></SPAN></H2>
<DIV class=floatleft><A class=image title=rpnC 
href="http://rosettacode.org/wiki/File:Rpn.png"><IMG alt=rpnC 
src="Parsing-RPN%20algorithm%20-%20Rosetta%20Code_files/Rpn.png" width=644 
height=146></A></DIV>
<DIV class=floatleft><A class=image title=rpnC 
href="http://rosettacode.org/wiki/File:RpnCNum.png"><IMG alt=rpnC 
src="Parsing-RPN%20algorithm%20-%20Rosetta%20Code_files/RpnCNum.png" width=503 
height=45></A></DIV>
<DIV class=floatleft><A class=image title=rpnC 
href="http://rosettacode.org/wiki/File:RpnCop.png"><IMG alt=rpnC 
src="Parsing-RPN%20algorithm%20-%20Rosetta%20Code_files/RpnCop.png" width=193 
height=148></A></DIV>
<P><BR clear=both></P>
<H3><SPAN class=editsection>[<A title="Edit section: Java" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=3">edit</A>]</SPAN> 
<SPAN id=Java class=mw-headline>Java</SPAN></H3><PRE class="java highlighted_source">&nbsp;<BR>grammar rpnC <SPAN class=sy0>;</SPAN><BR><SPAN class=co1>//</SPAN><BR><SPAN class=co1>//  rpn Calculator</SPAN><BR><SPAN class=co1>//</SPAN><BR><SPAN class=co1>//  Nigel Galloway - April 7th., 2012</SPAN><BR><SPAN class=co1>//</SPAN><BR>@members <SPAN class=br0>{</SPAN><BR>Stack<SPAN class=sy0>&lt;</SPAN>Double<SPAN class=sy0>&gt;</SPAN> s <SPAN class=sy0>=</SPAN> <SPAN class=kw1>new</SPAN> Stack<SPAN class=sy0>&lt;</SPAN>Double<SPAN class=sy0>&gt;</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=br0>}</SPAN><BR>rpn	<SPAN class=sy0>:</SPAN>	<SPAN class=br0>(</SPAN>WS<SPAN class=sy0>*</SPAN> <SPAN class=br0>(</SPAN>num<SPAN class=sy0>|</SPAN>op<SPAN class=br0>)</SPAN> <SPAN class=br0>(</SPAN>WS <SPAN class=sy0>|</SPAN> WS<SPAN class=sy0>*</SPAN> NEWLINE <SPAN class=br0>{</SPAN><A href="http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><SPAN class=kw3>System</SPAN></A>.<SPAN class=me1>out</SPAN>.<SPAN class=me1>println</SPAN><SPAN class=br0>(</SPAN>s.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><SPAN class=br0>}</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>*;</SPAN><BR>num	<SPAN class=sy0>:</SPAN>	<SPAN class=st0>'-'</SPAN><SPAN class=sy0>?</SPAN> Digit<SPAN class=sy0>+</SPAN> <SPAN class=br0>(</SPAN><SPAN class=st0>'.'</SPAN> Digit<SPAN class=sy0>+</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>?</SPAN> <SPAN class=br0>{</SPAN>s.<SPAN class=me1>push</SPAN><SPAN class=br0>(</SPAN><A href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><SPAN class=kw3>Double</SPAN></A>.<SPAN class=me1>parseDouble</SPAN><SPAN class=br0>(</SPAN>$num.<SPAN class=me1>text</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><SPAN class=br0>}</SPAN><SPAN class=sy0>;</SPAN><BR>Digit	<SPAN class=sy0>:</SPAN>	<SPAN class=st0>'0'</SPAN>..<SPAN class=st0>'9'</SPAN><SPAN class=sy0>;</SPAN><BR>op	<SPAN class=sy0>:</SPAN>	<SPAN class=st0>'-'</SPAN> <SPAN class=br0>{</SPAN><SPAN class=kw4>double</SPAN> x <SPAN class=sy0>=</SPAN> s.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> s.<SPAN class=me1>push</SPAN><SPAN class=br0>(</SPAN>s.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>-</SPAN> x<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><SPAN class=br0>}</SPAN><BR>	<SPAN class=sy0>|</SPAN>	<SPAN class=st0>'/'</SPAN> <SPAN class=br0>{</SPAN><SPAN class=kw4>double</SPAN> x <SPAN class=sy0>=</SPAN> s.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> s.<SPAN class=me1>push</SPAN><SPAN class=br0>(</SPAN>s.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>/</SPAN> x<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><SPAN class=br0>}</SPAN><BR>	<SPAN class=sy0>|</SPAN>	<SPAN class=st0>'*'</SPAN> <SPAN class=br0>{</SPAN>s.<SPAN class=me1>push</SPAN><SPAN class=br0>(</SPAN>s.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>*</SPAN> s.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><SPAN class=br0>}</SPAN><BR>	<SPAN class=sy0>|</SPAN>	<SPAN class=st0>'^'</SPAN> <SPAN class=br0>{</SPAN><SPAN class=kw4>double</SPAN> x <SPAN class=sy0>=</SPAN> s.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> s.<SPAN class=me1>push</SPAN><SPAN class=br0>(</SPAN><A href="http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><SPAN class=kw3>Math</SPAN></A>.<SPAN class=me1>pow</SPAN><SPAN class=br0>(</SPAN>s.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN>, x<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><SPAN class=br0>}</SPAN><BR>	<SPAN class=sy0>|</SPAN>	<SPAN class=st0>'+'</SPAN> <SPAN class=br0>{</SPAN>s.<SPAN class=me1>push</SPAN><SPAN class=br0>(</SPAN>s.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>+</SPAN> s.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><SPAN class=br0>}</SPAN><SPAN class=sy0>;</SPAN><BR>WS	<SPAN class=sy0>:</SPAN>	<SPAN class=br0>(</SPAN><SPAN class=st0>' '</SPAN> <SPAN class=sy0>|</SPAN> <SPAN class=st0>'<SPAN class=es0>\t</SPAN>'</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN>skip<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>}</SPAN><SPAN class=sy0>;</SPAN><BR>NEWLINE	<SPAN class=sy0>:</SPAN>	<SPAN class=st0>'<SPAN class=es0>\r</SPAN>'</SPAN><SPAN class=sy0>?</SPAN> <SPAN class=st0>'<SPAN class=es0>\n</SPAN>'</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;</PRE>
<P>Produces: </P><PRE>&gt;java Test
3 4 2 * 1 5 - 2 3 ^ ^ / +
^Z
3.0001220703125
</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: AutoHotkey" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=4">edit</A>]</SPAN> 
<SPAN id=AutoHotkey class=mw-headline><A title=Category:AutoHotkey 
href="http://rosettacode.org/wiki/Category:AutoHotkey">AutoHotkey</A></SPAN></H2>
<DIV class="examplemeta workswith"><B>Works with</B>: <A title="AutoHotkey L" 
href="http://rosettacode.org/wiki/AutoHotkey_L">AutoHotkey_L</A></DIV>
<P>Output is in clipboard. </P><PRE class="ahk highlighted_source">evalRPN<SPAN class=br0>(</SPAN><SPAN class=st0>"3 4 2 * 1 5 - 2 3 ^ ^ / +"</SPAN><SPAN class=br0>)</SPAN><BR>evalRPN<SPAN class=br0>(</SPAN>s<SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>	stack <SPAN class=sy0>:=</SPAN> <SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN><BR>	out <SPAN class=sy0>:=</SPAN> <SPAN class=st0>"For RPN expression: '"</SPAN> s <SPAN class=st0>"'`r`n`r`nTOKEN`t`tACTION`t`t`tSTACK`r`n"</SPAN><BR>	<A href="http://www.autohotkey.com/docs/commands/Loop.htm"><SPAN class=kw3>Loop</SPAN></A> Parse<SPAN class=sy0>,</SPAN> s<BR>		<SPAN class=kw1>If</SPAN> <A href="http://www.autohotkey.com/docs/Variables.htm#A_LoopField"><SPAN class=kw2>A_LoopField</SPAN></A> is number<BR>			t <SPAN class=sy0>.=</SPAN> <A href="http://www.autohotkey.com/docs/Variables.htm#A_LoopField"><SPAN class=kw2>A_LoopField</SPAN></A><BR>		<SPAN class=kw1>else</SPAN><BR>		<SPAN class=br0>{</SPAN><BR>			<SPAN class=kw1>If</SPAN> t<BR>				stack<SPAN class=sy0>.</SPAN><SPAN class=kw6>Insert</SPAN><SPAN class=br0>(</SPAN>t<SPAN class=br0>)</SPAN><BR>				<SPAN class=sy0>,</SPAN> out <SPAN class=sy0>.=</SPAN> t <SPAN class=st0>"`tPush num onto top of stack`t"</SPAN> stackShow<SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN> <SPAN class=st0>"`r`n"</SPAN><BR>				<SPAN class=sy0>,</SPAN> t <SPAN class=sy0>:=</SPAN> <SPAN class=st0>""</SPAN><BR>			<SPAN class=kw1>If</SPAN> <A href="http://www.autohotkey.com/docs/Functions.htm#BuiltIn"><SPAN class=kw4>InStr</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=st0>"+-/*^"</SPAN><SPAN class=sy0>,</SPAN> l <SPAN class=sy0>:=</SPAN> <A href="http://www.autohotkey.com/docs/Variables.htm#A_LoopField"><SPAN class=kw2>A_LoopField</SPAN></A><SPAN class=br0>)</SPAN><BR>			<SPAN class=br0>{</SPAN><BR>				a <SPAN class=sy0>:=</SPAN> stack<SPAN class=sy0>.</SPAN>Remove<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>,</SPAN> b <SPAN class=sy0>:=</SPAN> stack<SPAN class=sy0>.</SPAN>Remove<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>				stack<SPAN class=sy0>.</SPAN><SPAN class=kw6>Insert</SPAN><SPAN class=br0>(</SPAN>	 l <SPAN class=sy0>=</SPAN> <SPAN class=st0>"+"</SPAN>&nbsp;? b <SPAN class=sy0>+</SPAN> a<BR>						:l <SPAN class=sy0>=</SPAN> <SPAN class=st0>"-"</SPAN>&nbsp;? b <SPAN class=sy0>-</SPAN> a<BR>						:l <SPAN class=sy0>=</SPAN> <SPAN class=st0>"*"</SPAN>&nbsp;? b <SPAN class=sy0>*</SPAN> a<BR>						:l <SPAN class=sy0>=</SPAN> <SPAN class=st0>"/"</SPAN>&nbsp;? b <SPAN class=sy0>/</SPAN> a<BR>						:l <SPAN class=sy0>=</SPAN> <SPAN class=st0>"^"</SPAN>&nbsp;? b <SPAN class=sy0>**</SPAN>a<BR>						:<SPAN class=nu0>0</SPAN>	<SPAN class=br0>)</SPAN><BR>				out <SPAN class=sy0>.=</SPAN> l <SPAN class=st0>"`tApply op "</SPAN> l <SPAN class=st0>" to top of stack`t"</SPAN> stackShow<SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN> <SPAN class=st0>"`r`n"</SPAN><BR>			<SPAN class=br0>}</SPAN><BR>		<SPAN class=br0>}</SPAN><BR>	r <SPAN class=sy0>:=</SPAN> stack<SPAN class=sy0>.</SPAN>Remove<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>	out <SPAN class=sy0>.=</SPAN> <SPAN class=st0>"`r`n The final output value is: '"</SPAN> r <SPAN class=st0>"'"</SPAN><BR>	<A href="http://www.autohotkey.com/docs/Variables.htm#Clipboard"><SPAN class=kw2>clipboard</SPAN></A> <SPAN class=sy0>:=</SPAN> out<BR>	<SPAN class=kw1>return</SPAN> r<BR><SPAN class=br0>}</SPAN><BR>StackShow<SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>	for each<SPAN class=sy0>,</SPAN> value in stack<BR>		out <SPAN class=sy0>.=</SPAN> <A href="http://www.autohotkey.com/docs/Variables.htm#A_Space"><SPAN class=kw2>A_Space</SPAN></A> value<BR>	<SPAN class=kw1>return</SPAN> <A href="http://www.autohotkey.com/docs/Functions.htm#BuiltIn"><SPAN class=kw4>subStr</SPAN></A><SPAN class=br0>(</SPAN>out<SPAN class=sy0>,</SPAN> <SPAN class=nu0>2</SPAN><SPAN class=br0>)</SPAN><BR><SPAN class=br0>}</SPAN></PRE>
<DL>
  <DT>Output</DT>
  <DD></DD></DL><PRE>For RPN expression: '3 4 2 * 1 5 - 2 3 ^ ^ / +'

TOKEN		ACTION			STACK
3	Push num onto top of stack	3
4	Push num onto top of stack	3 4
2	Push num onto top of stack	3 4 2
*	Apply op * to top of stack	3 8
1	Push num onto top of stack	3 8 1
5	Push num onto top of stack	3 8 1 5
-	Apply op - to top of stack	3 8 -4
2	Push num onto top of stack	3 8 -4 2
3	Push num onto top of stack	3 8 -4 2 3
^	Apply op ^ to top of stack	3 8 -4 8
^	Apply op ^ to top of stack	3 8 65536
/	Apply op / to top of stack	3 0.000122
+	Apply op + to top of stack	3.000122

 The final output value is: '3.000122'</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: BBC BASIC" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=5">edit</A>]</SPAN> 
<SPAN id=BBC_BASIC class=mw-headline><A title="Category:BBC BASIC" 
href="http://rosettacode.org/wiki/Category:BBC_BASIC">BBC BASIC</A></SPAN></H2><PRE class="text highlighted_source">      @% = &amp;60B<BR>      RPN$ = "3 4 2 * 1 5 - 2 3 ^ ^ / +"<BR>&nbsp;<BR>      DIM Stack(1000)<BR>      SP% = 0<BR>&nbsp;<BR>      FOR i% = 1 TO LEN(RPN$)<BR>        Token$ = MID$(RPN$,i%,1)<BR>        IF Token$ &lt;&gt; " " THEN<BR>          PRINT Token$ "&nbsp;:";<BR>          CASE Token$ OF<BR>            WHEN "+": PROCpush(FNpop + FNpop)<BR>            WHEN "-": PROCpush(-FNpop + FNpop)<BR>            WHEN "*": PROCpush(FNpop * FNpop)<BR>            WHEN "/": n = FNpop&nbsp;: PROCpush(FNpop / n)<BR>            WHEN "^": n = FNpop&nbsp;: PROCpush(FNpop ^ n)<BR>            WHEN "0","1","2","3","4","5","6","7","8","9":<BR>              PROCpush(VALMID$(RPN$,i%))<BR>              WHILE ASCMID$(RPN$,i%)&gt;=48 AND ASCMID$(RPN$,1)&lt;=57<BR>                i% += 1<BR>              ENDWHILE<BR>          ENDCASE<BR>          FOR j% = SP%-1 TO 0 STEP -1&nbsp;: PRINT Stack(j%);&nbsp;: NEXT<BR>          PRINT<BR>        ENDIF<BR>      NEXT i%<BR>      END<BR>&nbsp;<BR>      DEF PROCpush(n)<BR>      IF SP% &gt; DIM(Stack(),1) ERROR 100, "Stack full"<BR>      Stack(SP%) = n<BR>      SP% += 1<BR>      ENDPROC<BR>&nbsp;<BR>      DEF FNpop<BR>      IF SP% = 0 ERROR 100, "Stack empty"<BR>      SP% -= 1<BR>      = Stack(SP%)</PRE>
<P><B>Output:</B> </P><PRE>3&nbsp;:          3
4&nbsp;:          4          3
2&nbsp;:          2          4          3
*&nbsp;:          8          3
1&nbsp;:          1          8          3
5&nbsp;:          5          1          8          3
-&nbsp;:         -4          8          3
2&nbsp;:          2         -4          8          3
3&nbsp;:          3          2         -4          8          3
^&nbsp;:          8         -4          8          3
^&nbsp;:      65536          8          3
/&nbsp;: 0.00012207          3
+&nbsp;:    3.00012
</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: C" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=6">edit</A>]</SPAN> 
<SPAN id=C class=mw-headline><A title=Category:C 
href="http://rosettacode.org/wiki/Category:C">C</A></SPAN></H2><PRE class="c highlighted_source"><SPAN class=co2>#include &lt;stdio.h&gt;</SPAN><BR><SPAN class=co2>#include &lt;stdlib.h&gt;</SPAN><BR><SPAN class=co2>#include &lt;string.h&gt;</SPAN><BR><SPAN class=co2>#include &lt;math.h&gt;</SPAN><BR>&nbsp;<BR><SPAN class=kw4>void</SPAN> die<SPAN class=br0>(</SPAN><SPAN class=kw4>const</SPAN> <SPAN class=kw4>char</SPAN> <SPAN class=sy0>*</SPAN>msg<SPAN class=br0>)</SPAN><BR><SPAN class=br0>{</SPAN><BR>	<A href="http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html"><SPAN class=kw3>fprintf</SPAN></A><SPAN class=br0>(</SPAN>stderr<SPAN class=sy0>,</SPAN> <SPAN class=st0>"%s"</SPAN><SPAN class=sy0>,</SPAN> msg<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	<A href="http://www.opengroup.org/onlinepubs/009695399/functions/abort.html"><SPAN class=kw3>abort</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=br0>}</SPAN><BR>&nbsp;<BR><SPAN class=co2>#define MAX_D 256</SPAN><BR><SPAN class=kw4>double</SPAN> stack<SPAN class=br0>[</SPAN>MAX_D<SPAN class=br0>]</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=kw4>int</SPAN> depth<SPAN class=sy0>;</SPAN><BR>&nbsp;<BR><SPAN class=kw4>void</SPAN> push<SPAN class=br0>(</SPAN><SPAN class=kw4>double</SPAN> v<SPAN class=br0>)</SPAN><BR><SPAN class=br0>{</SPAN><BR>	<SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>depth <SPAN class=sy0>&gt;=</SPAN> MAX_D<SPAN class=br0>)</SPAN> die<SPAN class=br0>(</SPAN><SPAN class=st0>"stack overflow<SPAN class=es1>\n</SPAN>"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	stack<SPAN class=br0>[</SPAN>depth<SPAN class=sy0>++</SPAN><SPAN class=br0>]</SPAN> <SPAN class=sy0>=</SPAN> v<SPAN class=sy0>;</SPAN><BR><SPAN class=br0>}</SPAN><BR>&nbsp;<BR><SPAN class=kw4>double</SPAN> pop<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR><SPAN class=br0>{</SPAN><BR>	<SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN><SPAN class=sy0>!</SPAN>depth<SPAN class=br0>)</SPAN> die<SPAN class=br0>(</SPAN><SPAN class=st0>"stack underflow<SPAN class=es1>\n</SPAN>"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	<SPAN class=kw1>return</SPAN> stack<SPAN class=br0>[</SPAN><SPAN class=sy0>--</SPAN>depth<SPAN class=br0>]</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=br0>}</SPAN><BR>&nbsp;<BR><SPAN class=kw4>double</SPAN> rpn<SPAN class=br0>(</SPAN><SPAN class=kw4>char</SPAN> <SPAN class=sy0>*</SPAN>s<SPAN class=br0>)</SPAN><BR><SPAN class=br0>{</SPAN><BR>	<SPAN class=kw4>double</SPAN> a<SPAN class=sy0>,</SPAN> b<SPAN class=sy0>;</SPAN><BR>	<SPAN class=kw4>int</SPAN> i<SPAN class=sy0>;</SPAN><BR>	<SPAN class=kw4>char</SPAN> <SPAN class=sy0>*</SPAN>e<SPAN class=sy0>,</SPAN> <SPAN class=sy0>*</SPAN>w <SPAN class=sy0>=</SPAN> <SPAN class=st0>" <SPAN class=es1>\t</SPAN><SPAN class=es1>\n</SPAN><SPAN class=es1>\r</SPAN><SPAN class=es1>\f</SPAN>"</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>	<SPAN class=kw1>for</SPAN> <SPAN class=br0>(</SPAN>s <SPAN class=sy0>=</SPAN> <A href="http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html"><SPAN class=kw3>strtok</SPAN></A><SPAN class=br0>(</SPAN>s<SPAN class=sy0>,</SPAN> w<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> s<SPAN class=sy0>;</SPAN> s <SPAN class=sy0>=</SPAN> <A href="http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html"><SPAN class=kw3>strtok</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=nu0>0</SPAN><SPAN class=sy0>,</SPAN> w<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>		a <SPAN class=sy0>=</SPAN> <A href="http://www.opengroup.org/onlinepubs/009695399/functions/strtod.html"><SPAN class=kw3>strtod</SPAN></A><SPAN class=br0>(</SPAN>s<SPAN class=sy0>,</SPAN> <SPAN class=sy0>&amp;</SPAN>e<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>e <SPAN class=sy0>&gt;</SPAN> s<SPAN class=br0>)</SPAN>		<A href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><SPAN class=kw3>printf</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=st0>"&nbsp;:"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>,</SPAN> push<SPAN class=br0>(</SPAN>a<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=co2>#define binop(x) printf("%c:", *s), b = pop(), a = pop(), push(x)</SPAN><BR>		<SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN><SPAN class=sy0>*</SPAN>s <SPAN class=sy0>==</SPAN> <SPAN class=st0>'+'</SPAN><SPAN class=br0>)</SPAN>	binop<SPAN class=br0>(</SPAN>a <SPAN class=sy0>+</SPAN> b<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN><SPAN class=sy0>*</SPAN>s <SPAN class=sy0>==</SPAN> <SPAN class=st0>'-'</SPAN><SPAN class=br0>)</SPAN>	binop<SPAN class=br0>(</SPAN>a <SPAN class=sy0>-</SPAN> b<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN><SPAN class=sy0>*</SPAN>s <SPAN class=sy0>==</SPAN> <SPAN class=st0>'*'</SPAN><SPAN class=br0>)</SPAN>	binop<SPAN class=br0>(</SPAN>a <SPAN class=sy0>*</SPAN> b<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN><SPAN class=sy0>*</SPAN>s <SPAN class=sy0>==</SPAN> <SPAN class=st0>'/'</SPAN><SPAN class=br0>)</SPAN>	binop<SPAN class=br0>(</SPAN>a <SPAN class=sy0>/</SPAN> b<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN><SPAN class=sy0>*</SPAN>s <SPAN class=sy0>==</SPAN> <SPAN class=st0>'^'</SPAN><SPAN class=br0>)</SPAN>	binop<SPAN class=br0>(</SPAN><A href="http://www.opengroup.org/onlinepubs/009695399/functions/pow.html"><SPAN class=kw3>pow</SPAN></A><SPAN class=br0>(</SPAN>a<SPAN class=sy0>,</SPAN> b<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=co2>#undef binop</SPAN><BR>		<SPAN class=kw1>else</SPAN> <SPAN class=br0>{</SPAN><BR>			<A href="http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html"><SPAN class=kw3>fprintf</SPAN></A><SPAN class=br0>(</SPAN>stderr<SPAN class=sy0>,</SPAN> <SPAN class=st0>"'%c': "</SPAN><SPAN class=sy0>,</SPAN> <SPAN class=sy0>*</SPAN>s<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>			die<SPAN class=br0>(</SPAN><SPAN class=st0>"unknown oeprator<SPAN class=es1>\n</SPAN>"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=br0>}</SPAN><BR>		<SPAN class=kw1>for</SPAN> <SPAN class=br0>(</SPAN>i <SPAN class=sy0>=</SPAN> depth<SPAN class=sy0>;</SPAN> i<SPAN class=sy0>--</SPAN> <SPAN class=sy0>||</SPAN> <SPAN class=nu0>0</SPAN> <SPAN class=sy0>*</SPAN> <A href="http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html"><SPAN class=kw3>putchar</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=st0>'<SPAN class=es1>\n</SPAN>'</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> <SPAN class=br0>)</SPAN><BR>			<A href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><SPAN class=kw3>printf</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=st0>"&nbsp;%g"</SPAN><SPAN class=sy0>,</SPAN> stack<SPAN class=br0>[</SPAN>i<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	<SPAN class=br0>}</SPAN><BR>&nbsp;<BR>	<SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>depth <SPAN class=sy0>!=</SPAN> <SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN> die<SPAN class=br0>(</SPAN><SPAN class=st0>"stack leftover<SPAN class=es1>\n</SPAN>"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>	<SPAN class=kw1>return</SPAN> pop<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=br0>}</SPAN><BR>&nbsp;<BR><SPAN class=kw4>int</SPAN> main<SPAN class=br0>(</SPAN><SPAN class=kw4>void</SPAN><SPAN class=br0>)</SPAN><BR><SPAN class=br0>{</SPAN><BR>	<SPAN class=kw4>char</SPAN> s<SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN> <SPAN class=sy0>=</SPAN> <SPAN class=st0>" 3 4 2 * 1 5 - 2 3 ^ ^ / + "</SPAN><SPAN class=sy0>;</SPAN><BR>	<A href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><SPAN class=kw3>printf</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=st0>"%g<SPAN class=es1>\n</SPAN>"</SPAN><SPAN class=sy0>,</SPAN> rpn<SPAN class=br0>(</SPAN>s<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	<SPAN class=kw1>return</SPAN> <SPAN class=nu0>0</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=br0>}</SPAN></PRE>
<P>It's also possible to parse RPN string backwards and recursively; good luck 
printing out your token stack <I>as a table</I>: there isn't one. </P><PRE class="c highlighted_source"><SPAN class=co2>#include &lt;stdio.h&gt;</SPAN><BR><SPAN class=co2>#include &lt;stdlib.h&gt;</SPAN><BR><SPAN class=co2>#include &lt;ctype.h&gt;</SPAN><BR><SPAN class=co2>#include &lt;string.h&gt;</SPAN><BR><SPAN class=co2>#include &lt;math.h&gt;</SPAN><BR>&nbsp;<BR><SPAN class=co2>#define die(msg) fprintf(stderr, msg"\n"), abort();</SPAN><BR><SPAN class=kw4>double</SPAN> get<SPAN class=br0>(</SPAN><SPAN class=kw4>const</SPAN> <SPAN class=kw4>char</SPAN> <SPAN class=sy0>*</SPAN>s<SPAN class=sy0>,</SPAN> <SPAN class=kw4>const</SPAN> <SPAN class=kw4>char</SPAN> <SPAN class=sy0>*</SPAN>e<SPAN class=sy0>,</SPAN> <SPAN class=kw4>char</SPAN> <SPAN class=sy0>**</SPAN>new_e<SPAN class=br0>)</SPAN><BR><SPAN class=br0>{</SPAN><BR>	<SPAN class=kw4>const</SPAN> <SPAN class=kw4>char</SPAN> <SPAN class=sy0>*</SPAN>t<SPAN class=sy0>;</SPAN><BR>	<SPAN class=kw4>double</SPAN> a<SPAN class=sy0>,</SPAN> b<SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>	<SPAN class=kw1>for</SPAN> <SPAN class=br0>(</SPAN>e<SPAN class=sy0>--;</SPAN> e <SPAN class=sy0>&gt;=</SPAN> s <SPAN class=sy0>&amp;&amp;</SPAN> <A href="http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html"><SPAN class=kw3>isspace</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=sy0>*</SPAN>e<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> e<SPAN class=sy0>--</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	<SPAN class=kw1>for</SPAN> <SPAN class=br0>(</SPAN>t <SPAN class=sy0>=</SPAN> e<SPAN class=sy0>;</SPAN> t <SPAN class=sy0>&gt;</SPAN> s <SPAN class=sy0>&amp;&amp;</SPAN> <SPAN class=sy0>!</SPAN><A href="http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html"><SPAN class=kw3>isspace</SPAN></A><SPAN class=br0>(</SPAN>t<SPAN class=br0>[</SPAN><SPAN class=sy0>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> t<SPAN class=sy0>--</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>	<SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>t <SPAN class=sy0>&lt;</SPAN> s<SPAN class=br0>)</SPAN> die<SPAN class=br0>(</SPAN><SPAN class=st0>"underflow"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR><SPAN class=co2>#define get2(expr) b = get(s, t, (char **)&amp;t), a = get(s, t, (char **)&amp;t), a = expr</SPAN><BR>	a <SPAN class=sy0>=</SPAN> <A href="http://www.opengroup.org/onlinepubs/009695399/functions/strtod.html"><SPAN class=kw3>strtod</SPAN></A><SPAN class=br0>(</SPAN>t<SPAN class=sy0>,</SPAN> <SPAN class=br0>(</SPAN><SPAN class=kw4>char</SPAN> <SPAN class=sy0>**</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>&amp;</SPAN>e<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	<SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>e <SPAN class=sy0>&lt;=</SPAN> t<SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>		<SPAN class=kw1>if</SPAN>	<SPAN class=br0>(</SPAN>t<SPAN class=br0>[</SPAN><SPAN class=nu0>0</SPAN><SPAN class=br0>]</SPAN> <SPAN class=sy0>==</SPAN> <SPAN class=st0>'+'</SPAN><SPAN class=br0>)</SPAN> get2<SPAN class=br0>(</SPAN>a <SPAN class=sy0>+</SPAN> b<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>t<SPAN class=br0>[</SPAN><SPAN class=nu0>0</SPAN><SPAN class=br0>]</SPAN> <SPAN class=sy0>==</SPAN> <SPAN class=st0>'-'</SPAN><SPAN class=br0>)</SPAN> get2<SPAN class=br0>(</SPAN>a <SPAN class=sy0>-</SPAN> b<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>t<SPAN class=br0>[</SPAN><SPAN class=nu0>0</SPAN><SPAN class=br0>]</SPAN> <SPAN class=sy0>==</SPAN> <SPAN class=st0>'*'</SPAN><SPAN class=br0>)</SPAN> get2<SPAN class=br0>(</SPAN>a <SPAN class=sy0>*</SPAN> b<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>t<SPAN class=br0>[</SPAN><SPAN class=nu0>0</SPAN><SPAN class=br0>]</SPAN> <SPAN class=sy0>==</SPAN> <SPAN class=st0>'/'</SPAN><SPAN class=br0>)</SPAN> get2<SPAN class=br0>(</SPAN>a <SPAN class=sy0>/</SPAN> b<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>t<SPAN class=br0>[</SPAN><SPAN class=nu0>0</SPAN><SPAN class=br0>]</SPAN> <SPAN class=sy0>==</SPAN> <SPAN class=st0>'^'</SPAN><SPAN class=br0>)</SPAN> get2<SPAN class=br0>(</SPAN><A href="http://www.opengroup.org/onlinepubs/009695399/functions/pow.html"><SPAN class=kw3>pow</SPAN></A><SPAN class=br0>(</SPAN>a<SPAN class=sy0>,</SPAN> b<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=kw1>else</SPAN> <SPAN class=br0>{</SPAN><BR>			<A href="http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html"><SPAN class=kw3>fprintf</SPAN></A><SPAN class=br0>(</SPAN>stderr<SPAN class=sy0>,</SPAN> <SPAN class=st0>"'%c': "</SPAN><SPAN class=sy0>,</SPAN> t<SPAN class=br0>[</SPAN><SPAN class=nu0>0</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>			die<SPAN class=br0>(</SPAN><SPAN class=st0>"unknown token"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=br0>}</SPAN><BR>	<SPAN class=br0>}</SPAN><BR><SPAN class=co2>#undef get2</SPAN><BR>&nbsp;<BR>	<SPAN class=sy0>*</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw4>const</SPAN> <SPAN class=kw4>char</SPAN> <SPAN class=sy0>**</SPAN><SPAN class=br0>)</SPAN>new_e <SPAN class=sy0>=</SPAN> t<SPAN class=sy0>;</SPAN><BR>	<SPAN class=kw1>return</SPAN> a<SPAN class=sy0>;</SPAN><BR><SPAN class=br0>}</SPAN><BR>&nbsp;<BR><SPAN class=kw4>double</SPAN> rpn<SPAN class=br0>(</SPAN><SPAN class=kw4>const</SPAN> <SPAN class=kw4>char</SPAN> <SPAN class=sy0>*</SPAN>s<SPAN class=br0>)</SPAN><BR><SPAN class=br0>{</SPAN><BR>	<SPAN class=kw4>const</SPAN> <SPAN class=kw4>char</SPAN> <SPAN class=sy0>*</SPAN>e <SPAN class=sy0>=</SPAN> s <SPAN class=sy0>+</SPAN> <A href="http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html"><SPAN class=kw3>strlen</SPAN></A><SPAN class=br0>(</SPAN>s<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	<SPAN class=kw4>double</SPAN> v <SPAN class=sy0>=</SPAN> get<SPAN class=br0>(</SPAN>s<SPAN class=sy0>,</SPAN> e<SPAN class=sy0>,</SPAN> <SPAN class=br0>(</SPAN><SPAN class=kw4>char</SPAN><SPAN class=sy0>**</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>&amp;</SPAN>e<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>	<SPAN class=kw1>while</SPAN> <SPAN class=br0>(</SPAN>e <SPAN class=sy0>&gt;</SPAN> s <SPAN class=sy0>&amp;&amp;</SPAN> <A href="http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html"><SPAN class=kw3>isspace</SPAN></A><SPAN class=br0>(</SPAN>e<SPAN class=br0>[</SPAN><SPAN class=sy0>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN> e<SPAN class=sy0>--;</SPAN><BR>	<SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>e <SPAN class=sy0>==</SPAN> s<SPAN class=br0>)</SPAN> <SPAN class=kw1>return</SPAN> v<SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>	<A href="http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html"><SPAN class=kw3>fprintf</SPAN></A><SPAN class=br0>(</SPAN>stderr<SPAN class=sy0>,</SPAN> <SPAN class=st0>"<SPAN class=es1>\"</SPAN>%.*s<SPAN class=es1>\"</SPAN>: "</SPAN><SPAN class=sy0>,</SPAN> e <SPAN class=sy0>-</SPAN> s<SPAN class=sy0>,</SPAN> s<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	die<SPAN class=br0>(</SPAN><SPAN class=st0>"front garbage"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=br0>}</SPAN><BR>&nbsp;<BR><SPAN class=kw4>int</SPAN> main<SPAN class=br0>(</SPAN><SPAN class=kw4>void</SPAN><SPAN class=br0>)</SPAN><BR><SPAN class=br0>{</SPAN><BR>	<A href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><SPAN class=kw3>printf</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=st0>"%g<SPAN class=es1>\n</SPAN>"</SPAN><SPAN class=sy0>,</SPAN> rpn<SPAN class=br0>(</SPAN><SPAN class=st0>"3 4 2 * 1 5 - 2 3 ^ ^ / +"</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	<SPAN class=kw1>return</SPAN> <SPAN class=nu0>0</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=br0>}</SPAN></PRE>
<H2><SPAN class=editsection>[<A title="Edit section: C++" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=7">edit</A>]</SPAN> 
<SPAN id=C.2B.2B class=mw-headline><A title=Category:C++ 
href="http://rosettacode.org/wiki/Category:C%2B%2B">C++</A></SPAN></H2><PRE class="cpp highlighted_source"><SPAN class=co2>#include &lt;vector&gt;</SPAN><BR><SPAN class=co2>#include &lt;string&gt;</SPAN><BR><SPAN class=co2>#include &lt;sstream&gt;</SPAN><BR><SPAN class=co2>#include &lt;iostream&gt;</SPAN><BR><SPAN class=co2>#include &lt;cmath&gt;</SPAN><BR><SPAN class=co2>#include &lt;algorithm&gt;</SPAN><BR><SPAN class=co2>#include &lt;iterator&gt;</SPAN><BR><SPAN class=co2>#include &lt;cstdlib&gt;</SPAN><BR>&nbsp;<BR><SPAN class=kw4>double</SPAN> rpn<SPAN class=br0>(</SPAN><SPAN class=kw4>const</SPAN> std<SPAN class=sy4>::</SPAN><SPAN class=me2>string</SPAN> <SPAN class=sy3>&amp;</SPAN>expr<SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>  std<SPAN class=sy4>::</SPAN><SPAN class=me2>istringstream</SPAN> iss<SPAN class=br0>(</SPAN>expr<SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR>  std<SPAN class=sy4>::</SPAN><SPAN class=me2>vector</SPAN><SPAN class=sy1>&lt;</SPAN><SPAN class=kw4>double</SPAN><SPAN class=sy1>&gt;</SPAN> stack<SPAN class=sy4>;</SPAN><BR>  std<SPAN class=sy4>::</SPAN><SPAN class=kw3>cout</SPAN> <SPAN class=sy1>&lt;&lt;</SPAN> <SPAN class=st0>"Input<SPAN class=es1>\t</SPAN>Operation<SPAN class=es1>\t</SPAN>Stack after"</SPAN> <SPAN class=sy1>&lt;&lt;</SPAN> std<SPAN class=sy4>::</SPAN><SPAN class=me2>endl</SPAN><SPAN class=sy4>;</SPAN><BR>  std<SPAN class=sy4>::</SPAN><SPAN class=me2>string</SPAN> token<SPAN class=sy4>;</SPAN><BR>  <SPAN class=kw1>while</SPAN> <SPAN class=br0>(</SPAN>iss <SPAN class=sy1>&gt;&gt;</SPAN> token<SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>    std<SPAN class=sy4>::</SPAN><SPAN class=kw3>cout</SPAN> <SPAN class=sy1>&lt;&lt;</SPAN> token <SPAN class=sy1>&lt;&lt;</SPAN> <SPAN class=st0>"<SPAN class=es1>\t</SPAN>"</SPAN><SPAN class=sy4>;</SPAN><BR>    <SPAN class=kw4>double</SPAN> tokenNum<SPAN class=sy4>;</SPAN><BR>    <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>std<SPAN class=sy4>::</SPAN><SPAN class=me2>istringstream</SPAN><SPAN class=br0>(</SPAN>token<SPAN class=br0>)</SPAN> <SPAN class=sy1>&gt;&gt;</SPAN> tokenNum<SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>      std<SPAN class=sy4>::</SPAN><SPAN class=kw3>cout</SPAN> <SPAN class=sy1>&lt;&lt;</SPAN> <SPAN class=st0>"Push<SPAN class=es1>\t</SPAN><SPAN class=es1>\t</SPAN>"</SPAN><SPAN class=sy4>;</SPAN><BR>      stack.<SPAN class=me1>push_back</SPAN><SPAN class=br0>(</SPAN>tokenNum<SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR>    <SPAN class=br0>}</SPAN> <SPAN class=kw1>else</SPAN> <SPAN class=br0>{</SPAN><BR>      std<SPAN class=sy4>::</SPAN><SPAN class=kw3>cout</SPAN> <SPAN class=sy1>&lt;&lt;</SPAN> <SPAN class=st0>"Operate<SPAN class=es1>\t</SPAN><SPAN class=es1>\t</SPAN>"</SPAN><SPAN class=sy4>;</SPAN><BR>      <SPAN class=kw4>double</SPAN> secondOperand <SPAN class=sy1>=</SPAN> stack.<SPAN class=me1>back</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR>      stack.<SPAN class=me1>pop_back</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR>      <SPAN class=kw4>double</SPAN> firstOperand <SPAN class=sy1>=</SPAN> stack.<SPAN class=me1>back</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR>      stack.<SPAN class=me1>pop_back</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR>      <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>token <SPAN class=sy1>==</SPAN> <SPAN class=st0>"*"</SPAN><SPAN class=br0>)</SPAN><BR>	stack.<SPAN class=me1>push_back</SPAN><SPAN class=br0>(</SPAN>firstOperand <SPAN class=sy2>*</SPAN> secondOperand<SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR>      <SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>token <SPAN class=sy1>==</SPAN> <SPAN class=st0>"/"</SPAN><SPAN class=br0>)</SPAN><BR>	stack.<SPAN class=me1>push_back</SPAN><SPAN class=br0>(</SPAN>firstOperand <SPAN class=sy2>/</SPAN> secondOperand<SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR>      <SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>token <SPAN class=sy1>==</SPAN> <SPAN class=st0>"-"</SPAN><SPAN class=br0>)</SPAN><BR>	stack.<SPAN class=me1>push_back</SPAN><SPAN class=br0>(</SPAN>firstOperand <SPAN class=sy2>-</SPAN> secondOperand<SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR>      <SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>token <SPAN class=sy1>==</SPAN> <SPAN class=st0>"+"</SPAN><SPAN class=br0>)</SPAN><BR>	stack.<SPAN class=me1>push_back</SPAN><SPAN class=br0>(</SPAN>firstOperand <SPAN class=sy2>+</SPAN> secondOperand<SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR>      <SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>token <SPAN class=sy1>==</SPAN> <SPAN class=st0>"^"</SPAN><SPAN class=br0>)</SPAN><BR>	stack.<SPAN class=me1>push_back</SPAN><SPAN class=br0>(</SPAN>std<SPAN class=sy4>::</SPAN><SPAN class=kw3>pow</SPAN><SPAN class=br0>(</SPAN>firstOperand, secondOperand<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR>      <SPAN class=kw1>else</SPAN> <SPAN class=br0>{</SPAN> <SPAN class=co1>//just in case</SPAN><BR>	std<SPAN class=sy4>::</SPAN><SPAN class=kw3>cerr</SPAN> <SPAN class=sy1>&lt;&lt;</SPAN> <SPAN class=st0>"Error"</SPAN> <SPAN class=sy1>&lt;&lt;</SPAN> std<SPAN class=sy4>::</SPAN><SPAN class=me2>endl</SPAN><SPAN class=sy4>;</SPAN><BR>	std<SPAN class=sy4>::</SPAN><SPAN class=kw3>exit</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR>      <SPAN class=br0>}</SPAN><BR>    <SPAN class=br0>}</SPAN><BR>    std<SPAN class=sy4>::</SPAN><SPAN class=me2>copy</SPAN><SPAN class=br0>(</SPAN>stack.<SPAN class=me1>begin</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN>, stack.<SPAN class=me1>end</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN>, std<SPAN class=sy4>::</SPAN><SPAN class=me2>ostream_iterator</SPAN><SPAN class=sy1>&lt;</SPAN><SPAN class=kw4>double</SPAN><SPAN class=sy1>&gt;</SPAN><SPAN class=br0>(</SPAN>std<SPAN class=sy4>::</SPAN><SPAN class=kw3>cout</SPAN>, <SPAN class=st0>" "</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR>    std<SPAN class=sy4>::</SPAN><SPAN class=kw3>cout</SPAN> <SPAN class=sy1>&lt;&lt;</SPAN> std<SPAN class=sy4>::</SPAN><SPAN class=me2>endl</SPAN><SPAN class=sy4>;</SPAN><BR>  <SPAN class=br0>}</SPAN><BR>  <SPAN class=kw1>return</SPAN> stack.<SPAN class=me1>back</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>;</SPAN><BR><SPAN class=br0>}</SPAN><BR>&nbsp;<BR><SPAN class=kw4>int</SPAN> main<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>  std<SPAN class=sy4>::</SPAN><SPAN class=me2>string</SPAN> s <SPAN class=sy1>=</SPAN> <SPAN class=st0>" 3 4 2 * 1 5 - 2 3 ^ ^ / + "</SPAN><SPAN class=sy4>;</SPAN><BR>  std<SPAN class=sy4>::</SPAN><SPAN class=kw3>cout</SPAN> <SPAN class=sy1>&lt;&lt;</SPAN> <SPAN class=st0>"Final answer: "</SPAN> <SPAN class=sy1>&lt;&lt;</SPAN> rpn<SPAN class=br0>(</SPAN>s<SPAN class=br0>)</SPAN> <SPAN class=sy1>&lt;&lt;</SPAN> std<SPAN class=sy4>::</SPAN><SPAN class=me2>endl</SPAN><SPAN class=sy4>;</SPAN><BR>&nbsp;<BR>  <SPAN class=kw1>return</SPAN> <SPAN class=nu0>0</SPAN><SPAN class=sy4>;</SPAN><BR><SPAN class=br0>}</SPAN></PRE>
<DIV>
<DL>
  <DT>Output:</DT></DL></DIV></DT>
<DL></DL><PRE>Input	Operation	Stack after
3	Push		3 
4	Push		3 4 
2	Push		3 4 2 
*	Operate		3 8 
1	Push		3 8 1 
5	Push		3 8 1 5 
-	Operate		3 8 -4 
2	Push		3 8 -4 2 
3	Push		3 8 -4 2 3 
^	Operate		3 8 -4 8 
^	Operate		3 8 65536 
/	Operate		3 0.00012207 
+	Operate		3.00012 
Final answer: 3.00012
</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: C#" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=8">edit</A>]</SPAN> 
<SPAN id=C.23 class=mw-headline><SPAN id=C_sharp><A title="Category:C sharp" 
href="http://rosettacode.org/wiki/Category:C_sharp">C#</A></SPAN></SPAN></H2><PRE class="csharp highlighted_source"><SPAN class=kw1>using</SPAN> <SPAN class=co3>System</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=kw1>using</SPAN> <SPAN class=co3>System.Collections.Generic</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=kw1>using</SPAN> <SPAN class=co3>System.Linq</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=kw1>using</SPAN> <SPAN class=co3>System.Globalization</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=kw1>using</SPAN> <SPAN class=co3>System.Threading</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR><SPAN class=kw1>namespace</SPAN> RPNEvaluator<BR><SPAN class=br0>{</SPAN><BR>    <SPAN class=kw4>class</SPAN> RPNEvaluator<BR>    <SPAN class=br0>{</SPAN><BR>        <SPAN class=kw1>static</SPAN> <SPAN class=kw4>void</SPAN> Main<SPAN class=br0>(</SPAN><SPAN class=kw4>string</SPAN><SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN> args<SPAN class=br0>)</SPAN><BR>        <SPAN class=br0>{</SPAN><BR>            Thread<SPAN class=sy0>.</SPAN><SPAN class=me1>CurrentThread</SPAN><SPAN class=sy0>.</SPAN><SPAN class=me1>CurrentCulture</SPAN> <SPAN class=sy0>=</SPAN> CultureInfo<SPAN class=sy0>.</SPAN><SPAN class=me1>InvariantCulture</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>            <SPAN class=kw4>string</SPAN> rpn <SPAN class=sy0>=</SPAN> <SPAN class=st0>"3 4 2 * 1 5 - 2 3 ^ ^ / +"</SPAN><SPAN class=sy0>;</SPAN><BR>            Console<SPAN class=sy0>.</SPAN><SPAN class=me1>WriteLine</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"{0}<SPAN class=es0>\n</SPAN>"</SPAN>, rpn<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>            <SPAN class=kw4>decimal</SPAN> result <SPAN class=sy0>=</SPAN> CalculateRPN<SPAN class=br0>(</SPAN>rpn<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            Console<SPAN class=sy0>.</SPAN><SPAN class=me1>WriteLine</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"<SPAN class=es0>\n</SPAN>Result is {0}"</SPAN>, result<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>        <SPAN class=br0>}</SPAN><BR>&nbsp;<BR>        <SPAN class=kw1>static</SPAN> <SPAN class=kw4>decimal</SPAN> CalculateRPN<SPAN class=br0>(</SPAN><SPAN class=kw4>string</SPAN> rpn<SPAN class=br0>)</SPAN><BR>        <SPAN class=br0>{</SPAN><BR>            <SPAN class=kw4>string</SPAN><SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN> rpnTokens <SPAN class=sy0>=</SPAN> rpn<SPAN class=sy0>.</SPAN><SPAN class=me1>Split</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>' '</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            Stack<SPAN class=sy0>&lt;</SPAN><SPAN class=kw4>decimal</SPAN><SPAN class=sy0>&gt;</SPAN> stack <SPAN class=sy0>=</SPAN> <A href="http://www.google.com/search?q=new+msdn.microsoft.com"><SPAN class=kw3>new</SPAN></A> Stack<SPAN class=sy0>&lt;</SPAN><SPAN class=kw4>decimal</SPAN><SPAN class=sy0>&gt;</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=kw4>decimal</SPAN> number <SPAN class=sy0>=</SPAN> <SPAN class=kw4>decimal</SPAN><SPAN class=sy0>.</SPAN><SPAN class=me1>Zero</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>            <SPAN class=kw1>foreach</SPAN> <SPAN class=br0>(</SPAN><SPAN class=kw4>string</SPAN> token <SPAN class=kw1>in</SPAN> rpnTokens<SPAN class=br0>)</SPAN><BR>            <SPAN class=br0>{</SPAN><BR>                <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN><SPAN class=kw4>decimal</SPAN><SPAN class=sy0>.</SPAN><SPAN class=me1>TryParse</SPAN><SPAN class=br0>(</SPAN>token, <SPAN class=kw1>out</SPAN> number<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>                <SPAN class=br0>{</SPAN><BR>                    stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Push</SPAN><SPAN class=br0>(</SPAN>number<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>                <SPAN class=br0>}</SPAN><BR>                <SPAN class=kw1>else</SPAN><BR>                <SPAN class=br0>{</SPAN><BR>                    <SPAN class=kw1>switch</SPAN> <SPAN class=br0>(</SPAN>token<SPAN class=br0>)</SPAN><BR>                    <SPAN class=br0>{</SPAN><BR>                        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"^"</SPAN><SPAN class=sy0>:</SPAN><BR>                        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"pow"</SPAN><SPAN class=sy0>:</SPAN><BR>                            <SPAN class=br0>{</SPAN><BR>                                number <SPAN class=sy0>=</SPAN> stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>                                stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Push</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw4>decimal</SPAN><SPAN class=br0>)</SPAN>Math<SPAN class=sy0>.</SPAN><SPAN class=me1>Pow</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw4>double</SPAN><SPAN class=br0>)</SPAN>stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN>, <SPAN class=br0>(</SPAN><SPAN class=kw4>double</SPAN><SPAN class=br0>)</SPAN>number<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>                                <SPAN class=kw1>break</SPAN><SPAN class=sy0>;</SPAN><BR>                            <SPAN class=br0>}</SPAN><BR>                        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"ln"</SPAN><SPAN class=sy0>:</SPAN><BR>                            <SPAN class=br0>{</SPAN><BR>                                stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Push</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw4>decimal</SPAN><SPAN class=br0>)</SPAN>Math<SPAN class=sy0>.</SPAN><SPAN class=me1>Log</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw4>double</SPAN><SPAN class=br0>)</SPAN>stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN>, Math<SPAN class=sy0>.</SPAN><SPAN class=me1>E</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>                                <SPAN class=kw1>break</SPAN><SPAN class=sy0>;</SPAN><BR>                            <SPAN class=br0>}</SPAN><BR>                        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"sqrt"</SPAN><SPAN class=sy0>:</SPAN><BR>                            <SPAN class=br0>{</SPAN><BR>                                stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Push</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw4>decimal</SPAN><SPAN class=br0>)</SPAN>Math<SPAN class=sy0>.</SPAN><SPAN class=me1>Sqrt</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw4>double</SPAN><SPAN class=br0>)</SPAN>stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>                                <SPAN class=kw1>break</SPAN><SPAN class=sy0>;</SPAN><BR>                            <SPAN class=br0>}</SPAN><BR>                        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"*"</SPAN><SPAN class=sy0>:</SPAN><BR>                            <SPAN class=br0>{</SPAN><BR>                                stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Push</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>*</SPAN> stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>                                <SPAN class=kw1>break</SPAN><SPAN class=sy0>;</SPAN><BR>                            <SPAN class=br0>}</SPAN><BR>                        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"/"</SPAN><SPAN class=sy0>:</SPAN><BR>                            <SPAN class=br0>{</SPAN><BR>                                number <SPAN class=sy0>=</SPAN> stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>                                stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Push</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>/</SPAN> number<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>                                <SPAN class=kw1>break</SPAN><SPAN class=sy0>;</SPAN><BR>                            <SPAN class=br0>}</SPAN><BR>                        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"+"</SPAN><SPAN class=sy0>:</SPAN><BR>                            <SPAN class=br0>{</SPAN><BR>                                stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Push</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>+</SPAN> stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>                                <SPAN class=kw1>break</SPAN><SPAN class=sy0>;</SPAN><BR>                            <SPAN class=br0>}</SPAN><BR>                        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"-"</SPAN><SPAN class=sy0>:</SPAN><BR>                            <SPAN class=br0>{</SPAN><BR>                                number <SPAN class=sy0>=</SPAN> stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>                                stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Push</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>-</SPAN> number<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>                                <SPAN class=kw1>break</SPAN><SPAN class=sy0>;</SPAN><BR>                            <SPAN class=br0>}</SPAN><BR>                        <SPAN class=kw1>default</SPAN><SPAN class=sy0>:</SPAN><BR>                            Console<SPAN class=sy0>.</SPAN><SPAN class=me1>WriteLine</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"Error in CalculateRPN(string) Method!"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>                            <SPAN class=kw1>break</SPAN><SPAN class=sy0>;</SPAN><BR>                    <SPAN class=br0>}</SPAN><BR>                <SPAN class=br0>}</SPAN><BR>                PrintState<SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=br0>}</SPAN><BR>&nbsp;<BR>            <SPAN class=kw1>return</SPAN> stack<SPAN class=sy0>.</SPAN><SPAN class=me1>Pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>        <SPAN class=br0>}</SPAN><BR>&nbsp;<BR>        <SPAN class=kw1>static</SPAN> <SPAN class=kw4>void</SPAN> PrintState<SPAN class=br0>(</SPAN>Stack<SPAN class=sy0>&lt;</SPAN><SPAN class=kw4>decimal</SPAN><SPAN class=sy0>&gt;</SPAN> stack<SPAN class=br0>)</SPAN><BR>        <SPAN class=br0>{</SPAN><BR>            <SPAN class=kw4>decimal</SPAN><SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN> arr <SPAN class=sy0>=</SPAN> stack<SPAN class=sy0>.</SPAN><SPAN class=me1>ToArray</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>            <SPAN class=kw1>for</SPAN> <SPAN class=br0>(</SPAN><SPAN class=kw4>int</SPAN> i <SPAN class=sy0>=</SPAN> arr<SPAN class=sy0>.</SPAN><SPAN class=me1>Length</SPAN> <SPAN class=sy0>-</SPAN> <SPAN class=nu0>1</SPAN><SPAN class=sy0>;</SPAN> i <SPAN class=sy0>&gt;=</SPAN> <SPAN class=nu0>0</SPAN><SPAN class=sy0>;</SPAN> i<SPAN class=sy0>--</SPAN><SPAN class=br0>)</SPAN><BR>            <SPAN class=br0>{</SPAN><BR>                Console<SPAN class=sy0>.</SPAN><SPAN class=me1>Write</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"{0,-8:F3}"</SPAN>, arr<SPAN class=br0>[</SPAN>i<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=br0>}</SPAN><BR>&nbsp;<BR>            Console<SPAN class=sy0>.</SPAN><SPAN class=me1>WriteLine</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>        <SPAN class=br0>}</SPAN><BR>    <SPAN class=br0>}</SPAN><BR><SPAN class=br0>}</SPAN></PRE>
<P>Output: </P><PRE>3 4 2 * 1 5 - 2 3 ^ ^ / +

3.000
3.000   4.000
3.000   4.000   2.000
3.000   8.000
3.000   8.000   1.000
3.000   8.000   1.000   5.000
3.000   8.000   -4.000
3.000   8.000   -4.000  2.000
3.000   8.000   -4.000  2.000   3.000
3.000   8.000   -4.000  8.000
3.000   8.000   65536.000
3.000   0.000
3.000

Result is 3.0001220703125
</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Clojure" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=9">edit</A>]</SPAN> 
<SPAN id=Clojure class=mw-headline><A title=Category:Clojure 
href="http://rosettacode.org/wiki/Category:Clojure">Clojure</A></SPAN></H2>
<P>This would be a lot simpler and generic if we were allowed to use something 
other than ^ for exponentiation. ^ isn't a legal clojure symbol. </P><PRE class="clojure highlighted_source">&nbsp;<BR><SPAN class=br0>(</SPAN><SPAN class=kw1>ns</SPAN> rosettacode<SPAN class=sy0>.</SPAN>parsing<SPAN class=sy0>-</SPAN>rpn<SPAN class=sy0>-</SPAN>calculator<SPAN class=sy0>-</SPAN>algorithm<BR>  <SPAN class=br0>(</SPAN>:<SPAN class=me1>require</SPAN> clojure<SPAN class=sy0>.</SPAN>math<SPAN class=sy0>.</SPAN>numeric<SPAN class=sy0>-</SPAN>tower<BR>            clojure<SPAN class=sy0>.</SPAN>string<BR>            clojure<SPAN class=sy0>.</SPAN>pprint<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>&nbsp;<BR><SPAN class=br0>(</SPAN><SPAN class=kw1>def</SPAN> operators<BR>  <SPAN class=st0>"the only allowable operators for our calculator"</SPAN><BR>  <SPAN class=br0>{</SPAN><SPAN class=st0>"+"</SPAN> <SPAN class=sy0>+</SPAN><BR>   <SPAN class=st0>"-"</SPAN> <SPAN class=sy0>-</SPAN><BR>   <SPAN class=st0>"*"</SPAN> <SPAN class=sy0>*</SPAN><BR>   <SPAN class=st0>"/"</SPAN> <SPAN class=sy0>/</SPAN><BR>   <SPAN class=st0>"^"</SPAN> clojure<SPAN class=sy0>.</SPAN>math<SPAN class=sy0>.</SPAN>numeric<SPAN class=sy0>-</SPAN>tower<SPAN class=sy0>/</SPAN>expt<SPAN class=br0>}</SPAN><SPAN class=br0>)</SPAN><BR>&nbsp;<BR><SPAN class=br0>(</SPAN><SPAN class=kw1>defn</SPAN> rpn<BR>  <SPAN class=st0>"takes a string and returns a lazy-seq of all the stacks"</SPAN><BR>  <SPAN class=br0>[</SPAN>string<SPAN class=br0>]</SPAN><BR>  <SPAN class=br0>(</SPAN><SPAN class=kw1>letfn</SPAN> <SPAN class=br0>[</SPAN><SPAN class=br0>(</SPAN>rpn<SPAN class=sy0>-</SPAN>reducer <SPAN class=br0>[</SPAN>stack item<SPAN class=br0>]</SPAN> <SPAN class=co1>; this takes a stack and one item and makes a new stack</SPAN><BR>            <SPAN class=br0>(</SPAN><SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN>contains? operators item<SPAN class=br0>)</SPAN><BR>              <SPAN class=br0>(</SPAN><SPAN class=kw1>let</SPAN> <SPAN class=br0>[</SPAN>operand<SPAN class=sy0>-</SPAN><SPAN class=nu0>1</SPAN> <SPAN class=br0>(</SPAN>peek stack<SPAN class=br0>)</SPAN> <SPAN class=co1>; if we used lists instead of vectors, we could use destructuring, but stacks would look backwards</SPAN><BR>                    stack<SPAN class=sy0>-</SPAN><SPAN class=nu0>1</SPAN> <SPAN class=br0>(</SPAN>pop stack<SPAN class=br0>)</SPAN><SPAN class=br0>]</SPAN>   <SPAN class=co1>;we're assuming that all the operators are binary</SPAN><BR>                <SPAN class=br0>(</SPAN><SPAN class=kw1>conj</SPAN> <SPAN class=br0>(</SPAN>pop stack<SPAN class=sy0>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN><BR>                      <SPAN class=br0>(</SPAN><SPAN class=br0>(</SPAN>operators item<SPAN class=br0>)</SPAN> <SPAN class=br0>(</SPAN>peek stack<SPAN class=sy0>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN> operand<SPAN class=sy0>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>              <SPAN class=br0>(</SPAN><SPAN class=kw1>conj</SPAN> stack <SPAN class=br0>(</SPAN>Long<SPAN class=sy0>.</SPAN> item<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>]</SPAN> <SPAN class=co1>; if it wasn't an operator, we'll assume it's a long. Could choose bigint, or even read-line</SPAN><BR>    <SPAN class=br0>(</SPAN>reductions rpn<SPAN class=sy0>-</SPAN>reducer <SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN> <SPAN class=br0>(</SPAN>clojure<SPAN class=sy0>.</SPAN>string<SPAN class=sy0>/</SPAN>split string #<SPAN class=st0>"<SPAN class=es0>\s</SPAN>+"</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN> <SPAN class=co1>;reductions is like reduce only shows all the intermediate steps</SPAN><BR>&nbsp;<BR><SPAN class=br0>(</SPAN><SPAN class=kw1>let</SPAN> <SPAN class=br0>[</SPAN>stacks <SPAN class=br0>(</SPAN>rpn <SPAN class=st0>"3 4 2 * 1 5 - 2 3 ^ ^ / +"</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>]</SPAN> <SPAN class=co1>;bind it so we can output the answer separately.</SPAN><BR>  <SPAN class=br0>(</SPAN>println <SPAN class=st0>"stacks: "</SPAN><SPAN class=br0>)</SPAN><BR>  <SPAN class=br0>(</SPAN>clojure<SPAN class=sy0>.</SPAN>pprint<SPAN class=sy0>/</SPAN>pprint stacks<SPAN class=br0>)</SPAN><BR>  <SPAN class=br0>(</SPAN><SPAN class=kw1>print</SPAN> <SPAN class=st0>"answer:"</SPAN> <SPAN class=br0>(</SPAN><SPAN class=sy0>-&gt;&gt;</SPAN> stacks last <SPAN class=kw1>first</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>&nbsp;</PRE>
<P>output </P>
<P>stacks: ([] </P><PRE>[3]
[3 4]
[3 4 2]
[3 8]
[3 8 1]
[3 8 1 5]
[3 8 -4]
[3 8 -4 2]
[3 8 -4 2 3]
[3 8 -4 8]
[3 8 65536]
[3 1/8192]
[24577/8192])
</PRE>
<P>answer: 24577/8192 </P>
<H2><SPAN class=editsection>[<A title="Edit section: Ela" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=10">edit</A>]</SPAN> 
<SPAN id=Ela class=mw-headline><A title=Category:Ela 
href="http://rosettacode.org/wiki/Category:Ela">Ela</A></SPAN></H2><PRE class="text highlighted_source">open string console list format read<BR>&nbsp;<BR>eval str = writen "Input\tOperation\tStack after" $ <BR>               eval' (split " " str) []<BR>      where eval' [] (s::_) = printfn "Result: {0}" s<BR>            eval' (x::xs) sta | "+"? = eval' xs &lt;| op (+)<BR>                              | "-"? = eval' xs &lt;| op (-)<BR>                              | "^"? = eval' xs &lt;| op (**)<BR>                              | "/"? = eval' xs &lt;| op (/)<BR>                              | "*"? = eval' xs &lt;| op (*)<BR>                              | else = eval' xs &lt;| conv x<BR>                    where c? = x == c<BR>                          op (^) = out "Operate" st' $ st'<BR>                                    where st' = (head ss ^ s)&nbsp;:: tail ss<BR>                          conv x = out "Push" st' $ st'<BR>                                    where st' = readStr x&nbsp;:: sta<BR>                          (s,ss) | sta == [] = ((),[])<BR>                                 | else = (head sta,tail sta)<BR>                          out op st' = printfn "{0}\t{1}\t\t{2}" x op st'<BR>&nbsp;<BR>eval "3 4 2 * 1 5 - 2 3 ^ ^ / +"</PRE>
<P>Output: </P><PRE>Input	Operation	Stack after
3	Push		[3]
4	Push		[4,3]
2	Push		[2,4,3]
*	Operate		[8,3]
1	Push		[1,8,3]
5	Push		[5,1,8,3]
-	Operate		[-4,8,3]
2	Push		[2,-4,8,3]
3	Push		[3,2,-4,8,3]
^	Operate		[8,-4,8,3]
^	Operate		[65536,8,3]
/	Operate		[0.0001220703125,3]
+	Operate		[3.0001220703125]
Result: 3.0001220703125</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: D" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=11">edit</A>]</SPAN> 
<SPAN id=D class=mw-headline><A title=Category:D 
href="http://rosettacode.org/wiki/Category:D">D</A></SPAN></H2>
<DIV class="examplemeta translation"><B>Translation of</B>: <A 
title="Parsing/RPN calculator algorithm" 
href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Go">Go</A></DIV><PRE class="d highlighted_source"><SPAN class=kw2>import</SPAN> std.<SPAN class=me1>stdio</SPAN><SPAN class=sy0>,</SPAN> std.<SPAN class=kw4>string</SPAN><SPAN class=sy0>,</SPAN> std.<SPAN class=me1>conv</SPAN><SPAN class=sy0>,</SPAN> std.<SPAN class=me1>typetuple</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR><SPAN class=kw4>void</SPAN> main<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>    <SPAN class=kw4>auto</SPAN> input <SPAN class=sy0>=</SPAN> <SPAN class=st0>"3 4 2 * 1 5 - 2 3 ^ ^ / +"</SPAN><SPAN class=sy0>;</SPAN><BR>    writeln<SPAN class=br0>(</SPAN><SPAN class=st0>"For postfix expression: "</SPAN><SPAN class=sy0>,</SPAN> input<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>    writeln<SPAN class=br0>(</SPAN><SPAN class=st0>"<SPAN class=es1>\n</SPAN>Token            Action            Stack"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>    <SPAN class=kw4>real</SPAN><SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN> stack<SPAN class=sy0>;</SPAN><BR>    <SPAN class=kw1>foreach</SPAN> <SPAN class=br0>(</SPAN>tok<SPAN class=sy0>;</SPAN> input.<SPAN class=me1>split</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>        <SPAN class=kw4>auto</SPAN> action <SPAN class=sy0>=</SPAN> <SPAN class=st0>"Apply op to top of stack"</SPAN><SPAN class=sy0>;</SPAN><BR>        <SPAN class=kw1>switch</SPAN> <SPAN class=br0>(</SPAN>tok<SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>            <SPAN class=kw1>foreach</SPAN> <SPAN class=br0>(</SPAN>o<SPAN class=sy0>;</SPAN> TypeTuple<SPAN class=sy0>!</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"+"</SPAN><SPAN class=sy0>,</SPAN> <SPAN class=st0>"-"</SPAN><SPAN class=sy0>,</SPAN> <SPAN class=st0>"*"</SPAN><SPAN class=sy0>,</SPAN> <SPAN class=st0>"/"</SPAN><SPAN class=sy0>,</SPAN> <SPAN class=st0>"^"</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>                <SPAN class=kw1>case</SPAN> o<SPAN class=sy0>:</SPAN><BR>                    <SPAN class=kw2>mixin</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"stack[$ - 2]"</SPAN> <SPAN class=sy0>~</SPAN><BR>                          <SPAN class=br0>(</SPAN>o <SPAN class=sy0>==</SPAN> <SPAN class=st0>"^"</SPAN> <SPAN class=sy0>?</SPAN> <SPAN class=st0>"^^"</SPAN> <SPAN class=sy0>:</SPAN> o<SPAN class=br0>)</SPAN> <SPAN class=sy0>~</SPAN> <SPAN class=st0>"=stack[$ - 1];"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>                    stack.<SPAN class=me1>length</SPAN><SPAN class=sy0>--;</SPAN><BR>                    <SPAN class=kw1>break</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=br0>}</SPAN><BR>            <SPAN class=kw1>break</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=kw2>default</SPAN><SPAN class=sy0>:</SPAN><BR>                action <SPAN class=sy0>=</SPAN> <SPAN class=st0>"Push num onto top of stack"</SPAN><SPAN class=sy0>;</SPAN><BR>                stack <SPAN class=sy0>~=</SPAN> to<SPAN class=sy0>!</SPAN><SPAN class=kw4>real</SPAN><SPAN class=br0>(</SPAN>tok<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>        <SPAN class=br0>}</SPAN><BR>        writefln<SPAN class=br0>(</SPAN><SPAN class=st0>"%3s   &nbsp;%-26s &nbsp;%s"</SPAN><SPAN class=sy0>,</SPAN> tok<SPAN class=sy0>,</SPAN> action<SPAN class=sy0>,</SPAN> stack<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>    <SPAN class=br0>}</SPAN><BR>    writeln<SPAN class=br0>(</SPAN><SPAN class=st0>"<SPAN class=es1>\n</SPAN>The final value is "</SPAN><SPAN class=sy0>,</SPAN> stack<SPAN class=br0>[</SPAN><SPAN class=nu0>0</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=br0>}</SPAN></PRE>
<DIV>
<DL>
  <DT>Output:</DT></DL></DIV></DT>
<DL></DL><PRE>For postfix expression: 3 4 2 * 1 5 - 2 3 ^ ^ / +

Token            Action            Stack
  3    Push num onto top of stack  [3]
  4    Push num onto top of stack  [3, 4]
  2    Push num onto top of stack  [3, 4, 2]
  *    Apply op to top of stack    [3, 8]
  1    Push num onto top of stack  [3, 8, 1]
  5    Push num onto top of stack  [3, 8, 1, 5]
  -    Apply op to top of stack    [3, 8, -4]
  2    Push num onto top of stack  [3, 8, -4, 2]
  3    Push num onto top of stack  [3, 8, -4, 2, 3]
  ^    Apply op to top of stack    [3, 8, -4, 8]
  ^    Apply op to top of stack    [3, 8, 65536]
  /    Apply op to top of stack    [3, 0.00012207]
  +    Apply op to top of stack    [3.00012]

The final value is 3.00012</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Go" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=12">edit</A>]</SPAN> 
<SPAN id=Go class=mw-headline><A title=Category:Go 
href="http://rosettacode.org/wiki/Category:Go">Go</A></SPAN></H2>
<P>No error checking. </P><PRE class="go highlighted_source"><SPAN class=kw1>package</SPAN> main<BR>&nbsp;<BR><SPAN class=kw1>import</SPAN> <SPAN class=sy1>(</SPAN><BR>    <SPAN class=st0>"fmt"</SPAN><BR>    <SPAN class=st0>"math"</SPAN><BR>    <SPAN class=st0>"strconv"</SPAN><BR>    <SPAN class=st0>"strings"</SPAN><BR><SPAN class=sy1>)</SPAN><BR>&nbsp;<BR><SPAN class=kw1>var</SPAN> input <SPAN class=sy2>=</SPAN> <SPAN class=st0>"3 4 2 * 1 5 - 2 3 ^ ^ / +"</SPAN><BR>&nbsp;<BR><SPAN class=kw4>func</SPAN> main<SPAN class=sy1>()</SPAN> <SPAN class=sy1>{</SPAN><BR>    fmt<SPAN class=sy3>.</SPAN>Printf<SPAN class=sy1>(</SPAN><SPAN class=st0>"For postfix&nbsp;%q<SPAN class=es1>\n</SPAN>"</SPAN><SPAN class=sy1>,</SPAN> input<SPAN class=sy1>)</SPAN><BR>    fmt<SPAN class=sy3>.</SPAN><SPAN class=me1>Println</SPAN><SPAN class=sy1>(</SPAN><SPAN class=st0>"<SPAN class=es1>\n</SPAN>Token            Action            Stack"</SPAN><SPAN class=sy1>)</SPAN><BR>    <SPAN class=kw1>var</SPAN> stack <SPAN class=sy1>[]</SPAN><SPAN class=kw4>float64</SPAN><BR>    <SPAN class=kw1>for</SPAN> _<SPAN class=sy1>,</SPAN> tok <SPAN class=sy2>:=</SPAN> <SPAN class=kw1>range</SPAN> strings<SPAN class=sy3>.</SPAN>Fields<SPAN class=sy1>(</SPAN>input<SPAN class=sy1>)</SPAN> <SPAN class=sy1>{</SPAN><BR>        action <SPAN class=sy2>:=</SPAN> <SPAN class=st0>"Apply op to top of stack"</SPAN><BR>        <SPAN class=kw1>switch</SPAN> tok <SPAN class=sy1>{</SPAN><BR>        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"+"</SPAN><SPAN class=sy1>:</SPAN><BR>            stack<SPAN class=sy1>[</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>2</SPAN><SPAN class=sy1>]</SPAN> <SPAN class=sy2>+=</SPAN> stack<SPAN class=sy1>[</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=sy1>]</SPAN><BR>            stack <SPAN class=sy2>=</SPAN> stack<SPAN class=sy1>[:</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=sy1>]</SPAN><BR>        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"-"</SPAN><SPAN class=sy1>:</SPAN><BR>            stack<SPAN class=sy1>[</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>2</SPAN><SPAN class=sy1>]</SPAN> <SPAN class=sy2>-=</SPAN> stack<SPAN class=sy1>[</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=sy1>]</SPAN><BR>            stack <SPAN class=sy2>=</SPAN> stack<SPAN class=sy1>[:</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=sy1>]</SPAN><BR>        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"*"</SPAN><SPAN class=sy1>:</SPAN><BR>            stack<SPAN class=sy1>[</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>2</SPAN><SPAN class=sy1>]</SPAN> <SPAN class=sy2>*=</SPAN> stack<SPAN class=sy1>[</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=sy1>]</SPAN><BR>            stack <SPAN class=sy2>=</SPAN> stack<SPAN class=sy1>[:</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=sy1>]</SPAN><BR>        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"/"</SPAN><SPAN class=sy1>:</SPAN><BR>            stack<SPAN class=sy1>[</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>2</SPAN><SPAN class=sy1>]</SPAN> <SPAN class=sy2>/=</SPAN> stack<SPAN class=sy1>[</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=sy1>]</SPAN><BR>            stack <SPAN class=sy2>=</SPAN> stack<SPAN class=sy1>[:</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=sy1>]</SPAN><BR>        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"^"</SPAN><SPAN class=sy1>:</SPAN><BR>            stack<SPAN class=sy1>[</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>2</SPAN><SPAN class=sy1>]</SPAN> <SPAN class=sy2>=</SPAN><BR>                math<SPAN class=sy3>.</SPAN>Pow<SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>[</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>2</SPAN><SPAN class=sy1>],</SPAN> stack<SPAN class=sy1>[</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=sy1>])</SPAN><BR>            stack <SPAN class=sy2>=</SPAN> stack<SPAN class=sy1>[:</SPAN><SPAN class=kw3>len</SPAN><SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>)</SPAN><SPAN class=sy3>-</SPAN><SPAN class=nu0>1</SPAN><SPAN class=sy1>]</SPAN><BR>        <SPAN class=kw1>default</SPAN><SPAN class=sy1>:</SPAN><BR>            action <SPAN class=sy2>=</SPAN> <SPAN class=st0>"Push num onto top of stack"</SPAN><BR>            f<SPAN class=sy1>,</SPAN> _ <SPAN class=sy2>:=</SPAN> strconv<SPAN class=sy3>.</SPAN>ParseFloat<SPAN class=sy1>(</SPAN>tok<SPAN class=sy1>,</SPAN> <SPAN class=nu0>64</SPAN><SPAN class=sy1>)</SPAN><BR>            stack <SPAN class=sy2>=</SPAN> append<SPAN class=sy1>(</SPAN>stack<SPAN class=sy1>,</SPAN> f<SPAN class=sy1>)</SPAN><BR>        <SPAN class=sy1>}</SPAN><BR>        fmt<SPAN class=sy3>.</SPAN>Printf<SPAN class=sy1>(</SPAN><SPAN class=st0>"%3s   &nbsp;%-26s &nbsp;%v<SPAN class=es1>\n</SPAN>"</SPAN><SPAN class=sy1>,</SPAN> tok<SPAN class=sy1>,</SPAN> action<SPAN class=sy1>,</SPAN> stack<SPAN class=sy1>)</SPAN><BR>    <SPAN class=sy1>}</SPAN><BR>    fmt<SPAN class=sy3>.</SPAN><SPAN class=me1>Println</SPAN><SPAN class=sy1>(</SPAN><SPAN class=st0>"<SPAN class=es1>\n</SPAN>The final value is"</SPAN><SPAN class=sy1>,</SPAN> stack<SPAN class=sy1>[</SPAN><SPAN class=nu0>0</SPAN><SPAN class=sy1>])</SPAN><BR><SPAN class=sy1>}</SPAN></PRE>
<P>Output: </P><PRE>For postfix "3 4 2 * 1 5 - 2 3 ^ ^ / +"

Token            Action            Stack
  3    Push num onto top of stack  [3]
  4    Push num onto top of stack  [3 4]
  2    Push num onto top of stack  [3 4 2]
  *    Apply op to top of stack    [3 8]
  1    Push num onto top of stack  [3 8 1]
  5    Push num onto top of stack  [3 8 1 5]
  -    Apply op to top of stack    [3 8 -4]
  2    Push num onto top of stack  [3 8 -4 2]
  3    Push num onto top of stack  [3 8 -4 2 3]
  ^    Apply op to top of stack    [3 8 -4 8]
  ^    Apply op to top of stack    [3 8 65536]
  /    Apply op to top of stack    [3 0.0001220703125]
  +    Apply op to top of stack    [3.0001220703125]

The final value is 3.0001220703125
</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Groovy" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=13">edit</A>]</SPAN> 
<SPAN id=Groovy class=mw-headline><A title=Category:Groovy 
href="http://rosettacode.org/wiki/Category:Groovy">Groovy</A></SPAN></H2><PRE class="groovy highlighted_source"><A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><SPAN class=kw2>def</SPAN></A> evaluateRPN<SPAN class=br0>(</SPAN>expression<SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>    <A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><SPAN class=kw2>def</SPAN></A> stack <SPAN class=sy0>=</SPAN> <SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN> <A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as"><SPAN class=kw2>as</SPAN></A> <A href="http://www.google.de/search?as_q=Stack&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F"><SPAN class=kw3>Stack</SPAN></A><BR>    <A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><SPAN class=kw2>def</SPAN></A> binaryOp <SPAN class=sy0>=</SPAN> <SPAN class=br0>{</SPAN> action <SPAN class=sy0>-&gt;</SPAN> <A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return"><SPAN class=kw2>return</SPAN></A> <SPAN class=br0>{</SPAN> action.<A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20call"><SPAN class=kw9>call</SPAN></A><SPAN class=br0>(</SPAN>stack.<A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop"><SPAN class=kw5>pop</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN>, stack.<A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop"><SPAN class=kw5>pop</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>}</SPAN> <SPAN class=br0>}</SPAN><BR>    <A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><SPAN class=kw2>def</SPAN></A> actions <SPAN class=sy0>=</SPAN> <SPAN class=br0>[</SPAN><BR>        <SPAN class=st0>'+'</SPAN>: binaryOp <SPAN class=br0>{</SPAN> a, b <SPAN class=sy0>-&gt;</SPAN> b <SPAN class=sy0>+</SPAN> a <SPAN class=br0>}</SPAN>,<BR>        <SPAN class=st0>'-'</SPAN>: binaryOp <SPAN class=br0>{</SPAN> a, b <SPAN class=sy0>-&gt;</SPAN> b <SPAN class=sy0>-</SPAN> a <SPAN class=br0>}</SPAN>,<BR>        <SPAN class=st0>'*'</SPAN>: binaryOp <SPAN class=br0>{</SPAN> a, b <SPAN class=sy0>-&gt;</SPAN> b <SPAN class=sy0>*</SPAN> a <SPAN class=br0>}</SPAN>,<BR>        <SPAN class=st0>'/'</SPAN>: binaryOp <SPAN class=br0>{</SPAN> a, b <SPAN class=sy0>-&gt;</SPAN> b / a <SPAN class=br0>}</SPAN>,<BR>        <SPAN class=st0>'^'</SPAN>: binaryOp <SPAN class=br0>{</SPAN> a, b <SPAN class=sy0>-&gt;</SPAN> b <SPAN class=sy0>**</SPAN> a <SPAN class=br0>}</SPAN><BR>    <SPAN class=br0>]</SPAN><BR>    expression.<SPAN class=me1>split</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>' '</SPAN><SPAN class=br0>)</SPAN>.<A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each"><SPAN class=kw5>each</SPAN></A> <SPAN class=br0>{</SPAN> item <SPAN class=sy0>-&gt;</SPAN><BR>        <A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><SPAN class=kw2>def</SPAN></A> action <SPAN class=sy0>=</SPAN> actions<SPAN class=br0>[</SPAN>item<SPAN class=br0>]</SPAN> <SPAN class=sy0>?</SPAN>: <SPAN class=br0>{</SPAN> item <A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as"><SPAN class=kw2>as</SPAN></A> <A href="http://www.google.de/search?as_q=BigDecimal&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F"><SPAN class=kw3>BigDecimal</SPAN></A> <SPAN class=br0>}</SPAN><BR>        stack.<SPAN class=me1>push</SPAN><SPAN class=br0>(</SPAN>action.<A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20call"><SPAN class=kw9>call</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>&nbsp;<BR>        <A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><SPAN class=kw8>println</SPAN></A> <SPAN class=st0>"$item: $stack"</SPAN><BR>    <SPAN class=br0>}</SPAN><BR>    <A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert"><SPAN class=kw2>assert</SPAN></A> stack.<A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size"><SPAN class=kw5>size</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>==</SPAN> <SPAN class=nu0>1</SPAN>&nbsp;: <SPAN class=st0>"Unbalanced Expression: $expression ($stack)"</SPAN><BR>    stack.<A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop"><SPAN class=kw5>pop</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR><SPAN class=br0>}</SPAN></PRE>
<P>Test </P><PRE class="groovy highlighted_source"><A href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><SPAN class=kw8>println</SPAN></A> evaluateRPN<SPAN class=br0>(</SPAN><SPAN class=st0>'3 4 2 * 1 5 - 2 3 ^ ^ / +'</SPAN><SPAN class=br0>)</SPAN></PRE>
<P>Output: </P><PRE>3: [3]
4: [3, 4]
2: [3, 4, 2]
*: [3, 8]
1: [3, 8, 1]
5: [3, 8, 1, 5]
-: [3, 8, -4]
2: [3, 8, -4, 2]
3: [3, 8, -4, 2, 3]
^: [3, 8, -4, 8]
^: [3, 8, 65536]
/: [3, 0.0001220703125]
+: [3.0001220703125]
3.0001220703125</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Haskell" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=14">edit</A>]</SPAN> 
<SPAN id=Haskell class=mw-headline><A title=Category:Haskell 
href="http://rosettacode.org/wiki/Category:Haskell">Haskell</A></SPAN></H2><PRE class="haskell highlighted_source"><SPAN class=kw1>import</SPAN> Data<SPAN class=sy0>.</SPAN>List <SPAN class=br0>(</SPAN>elemIndex<SPAN class=br0>)</SPAN><BR>&nbsp;<BR><SPAN class=co1>-- Show results</SPAN><BR>main <SPAN class=sy0>=</SPAN> <A href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_"><SPAN class=kw3>mapM_</SPAN></A> <SPAN class=br0>(</SPAN>\<SPAN class=br0>(</SPAN>x<SPAN class=sy0>,</SPAN> y<SPAN class=br0>)</SPAN> <SPAN class=sy0>-&gt;</SPAN> <A href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn"><SPAN class=kw3>putStrLn</SPAN></A> <SPAN class=sy0>$</SPAN> x <SPAN class=sy0>++</SPAN> <SPAN class=st0>" ==&gt; "</SPAN> <SPAN class=sy0>++</SPAN> <A href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show"><SPAN class=kw3>show</SPAN></A> y<SPAN class=br0>)</SPAN> <SPAN class=sy0>$</SPAN> <A href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse"><SPAN class=kw3>reverse</SPAN></A> <SPAN class=sy0>$</SPAN> <A href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip"><SPAN class=kw3>zip</SPAN></A> b <SPAN class=br0>(</SPAN>a:c<SPAN class=br0>)</SPAN><BR>        <SPAN class=kw1>where</SPAN> <SPAN class=br0>(</SPAN>a<SPAN class=sy0>,</SPAN> b<SPAN class=sy0>,</SPAN> c<SPAN class=br0>)</SPAN> <SPAN class=sy0>=</SPAN> solve <SPAN class=st0>"3 4 2 * 1 5 - 2 3 ^ ^ / +"</SPAN><BR>&nbsp;<BR><SPAN class=co1>-- Solve and report RPN</SPAN><BR>solve <SPAN class=sy0>=</SPAN> <A href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl"><SPAN class=kw3>foldl</SPAN></A> reduce <SPAN class=br0>(</SPAN><SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN><SPAN class=sy0>,</SPAN> <SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN><SPAN class=sy0>,</SPAN> <SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>.</SPAN> <A href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words"><SPAN class=kw3>words</SPAN></A><BR>reduce <SPAN class=br0>(</SPAN>xs<SPAN class=sy0>,</SPAN> ps<SPAN class=sy0>,</SPAN> st<SPAN class=br0>)</SPAN> w <SPAN class=sy0>=</SPAN><BR>    <SPAN class=kw1>if</SPAN> i <SPAN class=sy0>==</SPAN> Nothing<BR>        <SPAN class=kw1>then</SPAN> <SPAN class=br0>(</SPAN><A href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read"><SPAN class=kw3>read</SPAN></A> w:xs<SPAN class=sy0>,</SPAN> <SPAN class=br0>(</SPAN><SPAN class=st0>"Pushing "</SPAN> <SPAN class=sy0>++</SPAN> w<SPAN class=br0>)</SPAN>:ps<SPAN class=sy0>,</SPAN> xs:st<SPAN class=br0>)</SPAN><BR>        <SPAN class=kw1>else</SPAN> <SPAN class=br0>(</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>[</SPAN><SPAN class=br0>(</SPAN><SPAN class=sy0>*</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>,</SPAN><SPAN class=br0>(</SPAN><SPAN class=sy0>+</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>,</SPAN><SPAN class=br0>(</SPAN><SPAN class=sy0>-</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>,</SPAN><SPAN class=br0>(</SPAN><SPAN class=sy0>/</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>,</SPAN><SPAN class=br0>(</SPAN><SPAN class=sy0>**</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>]</SPAN><SPAN class=sy0>!!</SPAN>o<SPAN class=br0>)</SPAN> a b:zs<SPAN class=sy0>,</SPAN> <SPAN class=br0>(</SPAN><SPAN class=st0>"Performing "</SPAN> <SPAN class=sy0>++</SPAN> w<SPAN class=br0>)</SPAN>:ps<SPAN class=sy0>,</SPAN> xs:st<SPAN class=br0>)</SPAN><BR>    <SPAN class=kw1>where</SPAN>   i <SPAN class=sy0>=</SPAN> elemIndex <SPAN class=br0>(</SPAN><A href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head"><SPAN class=kw3>head</SPAN></A> w<SPAN class=br0>)</SPAN> <SPAN class=st0>"*+-/^"</SPAN><BR>            Just o <SPAN class=sy0>=</SPAN> i<BR>            <SPAN class=br0>(</SPAN>b:a:zs<SPAN class=br0>)</SPAN> <SPAN class=sy0>=</SPAN> xs<BR>&nbsp;</PRE>
<P><B>Output:</B> </P><PRE>*Main&gt; main
Pushing 3 ==&gt; [3.0]
Pushing 4 ==&gt; [4.0,3.0]
Pushing 2 ==&gt; [2.0,4.0,3.0]
Performing * ==&gt; [8.0,3.0]
Pushing 1 ==&gt; [1.0,8.0,3.0]
Pushing 5 ==&gt; [5.0,1.0,8.0,3.0]
Performing - ==&gt; [-4.0,8.0,3.0]
Pushing 2 ==&gt; [2.0,-4.0,8.0,3.0]
Pushing 3 ==&gt; [3.0,2.0,-4.0,8.0,3.0]
Performing ^ ==&gt; [8.0,-4.0,8.0,3.0]
Performing ^ ==&gt; [65536.0,8.0,3.0]
Performing / ==&gt; [1.220703125e-4,3.0]
Performing + ==&gt; [3.0001220703125]
*Main&gt;
</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Icon and Unicon" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=15">edit</A>]</SPAN> 
<SPAN id=Icon_and_Unicon class=mw-headline><A title=Category:Icon 
href="http://rosettacode.org/wiki/Category:Icon">Icon</A> and <A 
title=Category:Unicon 
href="http://rosettacode.org/wiki/Category:Unicon">Unicon</A></SPAN></H2><PRE class="icon highlighted_source"><SPAN class=kw1>procedure</SPAN> main<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <BR>   EvalRPN<SPAN class=br0>(</SPAN><SPAN class=st0>"3 4 2 * 1 5 - 2 3 ^ ^ / +"</SPAN><SPAN class=br0>)</SPAN><BR><SPAN class=kw1>end</SPAN><BR>&nbsp;<BR><SPAN class=kw1>link</SPAN> printf<BR><SPAN class=kw1>invocable</SPAN> all<BR>&nbsp;<BR><SPAN class=kw1>procedure</SPAN> EvalRPN<SPAN class=br0>(</SPAN>expr<SPAN class=br0>)</SPAN>          <SPAN class=co1>#: evaluate (and trace stack) an RPN string</SPAN><BR>&nbsp;<BR>   stack <SPAN class=sy1>:=</SPAN> <SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN><BR>   expr <SPAN class=sy1>?</SPAN> <SPAN class=kw1>until</SPAN> <SPAN class=kw4>pos</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>0</SPAN><SPAN class=br0>)</SPAN> <SPAN class=kw1>do</SPAN> <SPAN class=br0>{</SPAN> <BR>      <SPAN class=kw4>tab</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw4>many</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>' '</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN>                         <SPAN class=co1># consume previous seperator</SPAN><BR>      token <SPAN class=sy1>:=</SPAN> <SPAN class=kw4>tab</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw4>upto</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>' '</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy1>|</SPAN><SPAN class=nu0>0</SPAN><SPAN class=br0>)</SPAN>              <SPAN class=co1># get token</SPAN><BR>      <SPAN class=kw1>if</SPAN> token <SPAN class=sy1>:=</SPAN> <SPAN class=kw4>numeric</SPAN><SPAN class=br0>(</SPAN>token<SPAN class=br0>)</SPAN> <SPAN class=kw1>then</SPAN> <SPAN class=br0>{</SPAN>      <SPAN class=co1># ... numeric</SPAN><BR>         <SPAN class=kw4>push</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=sy1>,</SPAN>token<SPAN class=br0>)</SPAN>                   <BR>         printf<SPAN class=br0>(</SPAN><SPAN class=st0>"pushed numeric  &nbsp;%i&nbsp;:&nbsp;%s<SPAN class=es0>\n</SPAN>"</SPAN><SPAN class=sy1>,</SPAN>token<SPAN class=sy1>,</SPAN>list2string<SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>         <SPAN class=br0>}</SPAN><BR>      <SPAN class=kw1>else</SPAN> <SPAN class=br0>{</SPAN>                                 <SPAN class=co1># ... operator</SPAN><BR>         <SPAN class=kw1>every</SPAN> b<SPAN class=sy1>|</SPAN>a <SPAN class=sy1>:=</SPAN> <SPAN class=kw4>pop</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN>             <SPAN class=co1># pop &amp; reverse operands</SPAN><BR>         <SPAN class=kw1>case</SPAN> token <SPAN class=kw1>of</SPAN> <SPAN class=br0>{</SPAN><BR>            <SPAN class=st0>"+"</SPAN><SPAN class=sy1>|</SPAN><SPAN class=st0>"-"</SPAN><SPAN class=sy1>|</SPAN><SPAN class=st0>"*"</SPAN><SPAN class=sy1>|</SPAN><SPAN class=st0>"^"</SPAN>   <SPAN class=sy1>:</SPAN> <SPAN class=kw4>push</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=sy1>,</SPAN>token<SPAN class=br0>(</SPAN>a<SPAN class=sy1>,</SPAN>b<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>            <SPAN class=st0>"/"</SPAN>               <SPAN class=sy1>:</SPAN> <SPAN class=kw4>push</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=sy1>,</SPAN>token<SPAN class=br0>(</SPAN><SPAN class=kw4>real</SPAN><SPAN class=br0>(</SPAN>a<SPAN class=br0>)</SPAN><SPAN class=sy1>,</SPAN>b<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>            <SPAN class=kw1>default</SPAN>           <SPAN class=sy1>:</SPAN> <SPAN class=kw4>runerr</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>205</SPAN><SPAN class=sy1>,</SPAN>token<SPAN class=br0>)</SPAN><BR>            <SPAN class=br0>}</SPAN><BR>         printf<SPAN class=br0>(</SPAN><SPAN class=st0>"applied operator&nbsp;%s&nbsp;:&nbsp;%s<SPAN class=es0>\n</SPAN>"</SPAN><SPAN class=sy1>,</SPAN>token<SPAN class=sy1>,</SPAN>list2string<SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>         <SPAN class=br0>}</SPAN><BR>   <SPAN class=br0>}</SPAN><BR><SPAN class=kw1>end</SPAN><BR>&nbsp;<BR><SPAN class=kw1>procedure</SPAN> list2string<SPAN class=br0>(</SPAN>L<SPAN class=br0>)</SPAN>         <SPAN class=co1>#: format list as a string</SPAN><BR>   <SPAN class=kw1>every</SPAN> <SPAN class=br0>(</SPAN>s <SPAN class=sy1>:=</SPAN> <SPAN class=st0>"[ "</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy1>||:=</SPAN> <SPAN class=sy1>!</SPAN>L <SPAN class=sy1>||</SPAN> <SPAN class=st0>" "</SPAN><BR>   <SPAN class=kw1>return</SPAN> s <SPAN class=sy1>||</SPAN> <SPAN class=st0>"]"</SPAN><BR><SPAN class=kw1>end</SPAN></PRE>
<DIV class="examplemeta libheader"><B>Library:</B> <A 
title="Category:Icon Programming Library" 
href="http://rosettacode.org/wiki/Category:Icon_Programming_Library">Icon 
Programming Library</A></DIV>
<P><A class="external text" 
href="http://www.cs.arizona.edu/icon/library/src/procs/printf.icn" 
rel=nofollow>printf.icn provides formatting</A> </P>Output:<PRE>pushed numeric   3&nbsp;: [ 3 ]
pushed numeric   4&nbsp;: [ 4 3 ]
pushed numeric   2&nbsp;: [ 2 4 3 ]
applied operator *&nbsp;: [ 8 3 ]
pushed numeric   1&nbsp;: [ 1 8 3 ]
pushed numeric   5&nbsp;: [ 5 1 8 3 ]
applied operator -&nbsp;: [ -4 8 3 ]
pushed numeric   2&nbsp;: [ 2 -4 8 3 ]
pushed numeric   3&nbsp;: [ 3 2 -4 8 3 ]
applied operator ^&nbsp;: [ 8 -4 8 3 ]
applied operator ^&nbsp;: [ 65536 8 3 ]
applied operator /&nbsp;: [ 0.0001220703125 3 ]
applied operator +&nbsp;: [ 3.0001220703125 ]</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: J" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=16">edit</A>]</SPAN> 
<SPAN id=J class=mw-headline><A title=Category:J 
href="http://rosettacode.org/wiki/Category:J">J</A></SPAN></H2>
<P>Offered operations are all dyadic - having two argument. So on each step we 
may either "shift" a number to the stack or "reduce" two topmost stack items to 
one. </P>
<P>The final verb is monad - it takes single argument, which contains both the 
input and accumulated stack. First, create initial state of the input: </P><PRE class="j highlighted_source">   a: , &lt;;.<SPAN class=nu0>_1</SPAN> <SPAN class=st_h>' '</SPAN> , <SPAN class=st_h>'3 4 2 * 1 5 - 2 3 ^ ^ / +'</SPAN><BR>┌┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐<BR>││<SPAN class=nu0>3</SPAN>│<SPAN class=nu0>4</SPAN>│<SPAN class=nu0>2</SPAN>│*│<SPAN class=nu0>1</SPAN>│<SPAN class=nu0>5</SPAN>│-│<SPAN class=nu0>2</SPAN>│<SPAN class=nu0>3</SPAN>│^│^│/│+│<BR>└┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘</PRE>
<P>As an example, let's add monadic operation _ which inverses the sign of the 
stack top element. </P>
<P>We're going to read tokens from input one by one. Each time we read a token, 
we're checking if it's a number - in this case we put the number to the stack - 
or an operation - in this case we apply the operation to the stack. The monad 
which returns 1 for operation and 0 otherwise is "isOp". Dyad, moving input 
token to the stack, is "doShift", and applying the operation to the stack is 
"doApply". </P>
<P>There are 6 operations - one monadic "_" and five dyadic "+", "-", "*", "/", 
"^". For operation, we need to translate input token into operation and apply it 
to the stack. The dyad which converts the input token to the operation is 
"dispatch". It uses two miscellaneous adverbs, one for monadic operations - "mo" 
- and another for dyadic - "dy". </P>
<P>The RPN driver is monad "consume", which handles one token. The output is the 
state of the program after the token was consumed - stack in the 0th box, and 
remaining input afterwards. As a side effect, "consume" is going to print the 
resulting stack, so running "consume" once for each token will produce 
intermediate states of the stack. </P><PRE class="j highlighted_source">   isOp=: <SPAN class=st_h>'_+-*/^'</SPAN> e.~ {.@&gt;@{.<BR>   mo=: <SPAN class=nu0>1</SPAN>&nbsp;:<SPAN class=st_h>'(}: , u@{:) @ ['</SPAN><BR>   dy=: <SPAN class=nu0>1</SPAN>&nbsp;:<SPAN class=st_h>'(_2&amp;}. , u/@(_2&amp;{.)) @ ['</SPAN><BR>   dispatch=: <SPAN class=sy0>(</SPAN>-mo<SPAN class=sy0>)</SPAN>`<SPAN class=sy0>(</SPAN>+dy<SPAN class=sy0>)</SPAN>`<SPAN class=sy0>(</SPAN>-dy<SPAN class=sy0>)</SPAN>`<SPAN class=sy0>(</SPAN>*dy<SPAN class=sy0>)</SPAN>`<SPAN class=sy0>(</SPAN>%dy<SPAN class=sy0>)</SPAN>`<SPAN class=sy0>(</SPAN>^dy<SPAN class=sy0>)</SPAN>@.<SPAN class=sy0>(</SPAN><SPAN class=st_h>'_+-*/^'</SPAN> i. {.@&gt;@]<SPAN class=sy0>)</SPAN><BR>   doShift=: <SPAN class=sy0>(</SPAN>&lt;@, ".@&gt;@{.<SPAN class=sy0>)</SPAN> , }.@]<BR>   doApply=: }.@] ,~ [ &lt;@dispatch {.@]<BR>   consume=: [: <SPAN class=sy0>(</SPAN>[ smoutput@&gt;@{.<SPAN class=sy0>)</SPAN> &gt;@{. doShift`doApply@.<SPAN class=sy0>(</SPAN>isOp@]<SPAN class=sy0>)</SPAN> }.<BR>   consume ^: <SPAN class=sy0>(</SPAN>&lt;:@#<SPAN class=sy0>)</SPAN> a: , &lt;;.<SPAN class=nu0>_1</SPAN> <SPAN class=st_h>' '</SPAN> , <SPAN class=st_h>'3 4 2 * 1 5 - 2 3 ^ ^ / +'</SPAN><BR><SPAN class=nu0>3</SPAN><BR><SPAN class=nu0>3</SPAN> <SPAN class=nu0>4</SPAN><BR><SPAN class=nu0>3</SPAN> <SPAN class=nu0>4</SPAN> <SPAN class=nu0>2</SPAN><BR><SPAN class=nu0>3</SPAN> <SPAN class=nu0>8</SPAN><BR><SPAN class=nu0>3</SPAN> <SPAN class=nu0>8</SPAN> <SPAN class=nu0>1</SPAN><BR><SPAN class=nu0>3</SPAN> <SPAN class=nu0>8</SPAN> <SPAN class=nu0>1</SPAN> <SPAN class=nu0>5</SPAN><BR><SPAN class=nu0>3</SPAN> <SPAN class=nu0>8</SPAN> <SPAN class=nu0>_4</SPAN><BR><SPAN class=nu0>3</SPAN> <SPAN class=nu0>8</SPAN> <SPAN class=nu0>_4</SPAN> <SPAN class=nu0>2</SPAN><BR><SPAN class=nu0>3</SPAN> <SPAN class=nu0>8</SPAN> <SPAN class=nu0>_4</SPAN> <SPAN class=nu0>2</SPAN> <SPAN class=nu0>3</SPAN><BR><SPAN class=nu0>3</SPAN> <SPAN class=nu0>8</SPAN> <SPAN class=nu0>_4</SPAN> <SPAN class=nu0>8</SPAN><BR><SPAN class=nu0>3</SPAN> <SPAN class=nu0>8</SPAN> <SPAN class=nu0>65536</SPAN><BR><SPAN class=nu0>3</SPAN> <SPAN class=nu0>0.00012207</SPAN><BR><SPAN class=nu0>3.00012</SPAN><BR>┌───────┐<BR>│<SPAN class=nu0>3.00012</SPAN>│<BR>└───────┘<BR>   consume ^: <SPAN class=sy0>(</SPAN>&lt;:@#<SPAN class=sy0>)</SPAN> a: , &lt;;.<SPAN class=nu0>_1</SPAN> <SPAN class=st_h>' '</SPAN> , <SPAN class=st_h>'3 _ 4 +'</SPAN><BR><SPAN class=nu0>3</SPAN><BR><SPAN class=nu0>_3</SPAN><BR><SPAN class=nu0>_3</SPAN> <SPAN class=nu0>4</SPAN><BR><SPAN class=nu0>1</SPAN><BR>┌─┐<BR>│<SPAN class=nu0>1</SPAN>│<BR>└─┘</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Java" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=17">edit</A>]</SPAN> 
<SPAN id=Java_2 class=mw-headline><A title=Category:Java 
href="http://rosettacode.org/wiki/Category:Java">Java</A></SPAN></H2>
<DIV class="examplemeta workswith"><B>Works with</B>: <A class=mw-redirect 
title=Java href="http://rosettacode.org/wiki/Java">Java</A> version 1.5+</DIV>
<P>Supports multi-digit numbers and negative numbers. </P><PRE class="java5 highlighted_source"><SPAN class=kw2>import</SPAN> <SPAN class=co2>java.util.LinkedList</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR><SPAN class=kw2>public</SPAN> <SPAN class=kw2>class</SPAN> RPN<SPAN class=br0>{</SPAN><BR>	<SPAN class=kw2>public</SPAN> <SPAN class=kw2>static</SPAN> <SPAN class=kw3>void</SPAN> evalRPN<SPAN class=br0>(</SPAN><A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><SPAN class=kw21>String</SPAN></A> expr<SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>		<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><SPAN class=kw21>String</SPAN></A> cleanExpr = cleanExpr<SPAN class=br0>(</SPAN>expr<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/LinkedList.html"><SPAN class=kw46>LinkedList</SPAN></A><SPAN class=sy0>&lt;</SPAN><A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Double.html"><SPAN class=kw21>Double</SPAN></A><SPAN class=sy0>&gt;</SPAN> stack = <SPAN class=kw2>new</SPAN> <A href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/LinkedList.html"><SPAN class=kw46>LinkedList</SPAN></A><SPAN class=sy0>&lt;</SPAN><A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Double.html"><SPAN class=kw21>Double</SPAN></A><SPAN class=sy0>&gt;</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><SPAN class=kw21>System</SPAN></A>.<SPAN class=me1>out</SPAN>.<SPAN class=me1>println</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"Input<SPAN class=es0>\t</SPAN>Operation<SPAN class=es0>\t</SPAN>Stack after"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=kw1>for</SPAN><SPAN class=br0>(</SPAN><A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><SPAN class=kw21>String</SPAN></A> token:cleanExpr.<SPAN class=me1>split</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"<SPAN class=es0>\\</SPAN>s"</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>			<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><SPAN class=kw21>System</SPAN></A>.<SPAN class=me1>out</SPAN>.<SPAN class=me1>print</SPAN><SPAN class=br0>(</SPAN>token+<SPAN class=st0>"<SPAN class=es0>\t</SPAN>"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>			<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Double.html"><SPAN class=kw21>Double</SPAN></A> tokenNum = <SPAN class=kw4>null</SPAN><SPAN class=sy0>;</SPAN><BR>			<SPAN class=kw2>try</SPAN><SPAN class=br0>{</SPAN><BR>				tokenNum = <A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Double.html"><SPAN class=kw21>Double</SPAN></A>.<SPAN class=me1>parseDouble</SPAN><SPAN class=br0>(</SPAN>token<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>			<SPAN class=br0>}</SPAN><SPAN class=kw2>catch</SPAN><SPAN class=br0>(</SPAN><A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/NumberFormatException.html"><SPAN class=kw21>NumberFormatException</SPAN></A> e<SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><SPAN class=br0>}</SPAN><BR>			<SPAN class=kw1>if</SPAN><SPAN class=br0>(</SPAN>tokenNum <SPAN class=sy0>!</SPAN>= <SPAN class=kw4>null</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>				<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><SPAN class=kw21>System</SPAN></A>.<SPAN class=me1>out</SPAN>.<SPAN class=me1>print</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"Push<SPAN class=es0>\t</SPAN><SPAN class=es0>\t</SPAN>"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				stack.<SPAN class=me1>push</SPAN><SPAN class=br0>(</SPAN><A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Double.html"><SPAN class=kw21>Double</SPAN></A>.<SPAN class=me1>parseDouble</SPAN><SPAN class=br0>(</SPAN>token+<SPAN class=st0>""</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>			<SPAN class=br0>}</SPAN><SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN><SPAN class=br0>(</SPAN>token.<SPAN class=me1>equals</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"*"</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>				<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><SPAN class=kw21>System</SPAN></A>.<SPAN class=me1>out</SPAN>.<SPAN class=me1>print</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"Operate<SPAN class=es0>\t</SPAN><SPAN class=es0>\t</SPAN>"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				<SPAN class=kw3>double</SPAN> secondOperand = stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				<SPAN class=kw3>double</SPAN> firstOperand = stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				stack.<SPAN class=me1>push</SPAN><SPAN class=br0>(</SPAN>firstOperand <SPAN class=sy0>*</SPAN> secondOperand<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>			<SPAN class=br0>}</SPAN><SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN><SPAN class=br0>(</SPAN>token.<SPAN class=me1>equals</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"/"</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>				<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><SPAN class=kw21>System</SPAN></A>.<SPAN class=me1>out</SPAN>.<SPAN class=me1>print</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"Operate<SPAN class=es0>\t</SPAN><SPAN class=es0>\t</SPAN>"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				<SPAN class=kw3>double</SPAN> secondOperand = stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				<SPAN class=kw3>double</SPAN> firstOperand = stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				stack.<SPAN class=me1>push</SPAN><SPAN class=br0>(</SPAN>firstOperand / secondOperand<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>			<SPAN class=br0>}</SPAN><SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN><SPAN class=br0>(</SPAN>token.<SPAN class=me1>equals</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"-"</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>				<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><SPAN class=kw21>System</SPAN></A>.<SPAN class=me1>out</SPAN>.<SPAN class=me1>print</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"Operate<SPAN class=es0>\t</SPAN><SPAN class=es0>\t</SPAN>"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				<SPAN class=kw3>double</SPAN> secondOperand = stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				<SPAN class=kw3>double</SPAN> firstOperand = stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				stack.<SPAN class=me1>push</SPAN><SPAN class=br0>(</SPAN>firstOperand - secondOperand<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>			<SPAN class=br0>}</SPAN><SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN><SPAN class=br0>(</SPAN>token.<SPAN class=me1>equals</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"+"</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>				<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><SPAN class=kw21>System</SPAN></A>.<SPAN class=me1>out</SPAN>.<SPAN class=me1>print</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"Operate<SPAN class=es0>\t</SPAN><SPAN class=es0>\t</SPAN>"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				<SPAN class=kw3>double</SPAN> secondOperand = stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				<SPAN class=kw3>double</SPAN> firstOperand = stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				stack.<SPAN class=me1>push</SPAN><SPAN class=br0>(</SPAN>firstOperand + secondOperand<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>			<SPAN class=br0>}</SPAN><SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN><SPAN class=br0>(</SPAN>token.<SPAN class=me1>equals</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"^"</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>				<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><SPAN class=kw21>System</SPAN></A>.<SPAN class=me1>out</SPAN>.<SPAN class=me1>print</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"Operate<SPAN class=es0>\t</SPAN><SPAN class=es0>\t</SPAN>"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				<SPAN class=kw3>double</SPAN> secondOperand = stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				<SPAN class=kw3>double</SPAN> firstOperand = stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				stack.<SPAN class=me1>push</SPAN><SPAN class=br0>(</SPAN><A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Math.html"><SPAN class=kw21>Math</SPAN></A>.<SPAN class=me1>pow</SPAN><SPAN class=br0>(</SPAN>firstOperand, secondOperand<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>			<SPAN class=br0>}</SPAN><SPAN class=kw1>else</SPAN><SPAN class=br0>{</SPAN><SPAN class=co1>//just in case</SPAN><BR>				<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><SPAN class=kw21>System</SPAN></A>.<SPAN class=me1>out</SPAN>.<SPAN class=me1>println</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"Error"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>				<SPAN class=kw2>return</SPAN><SPAN class=sy0>;</SPAN><BR>			<SPAN class=br0>}</SPAN><BR>			<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><SPAN class=kw21>System</SPAN></A>.<SPAN class=me1>out</SPAN>.<SPAN class=me1>println</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>		<SPAN class=br0>}</SPAN><BR>		<A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><SPAN class=kw21>System</SPAN></A>.<SPAN class=me1>out</SPAN>.<SPAN class=me1>println</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"Final answer: "</SPAN> + stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	<SPAN class=br0>}</SPAN><BR>&nbsp;<BR>	<SPAN class=kw2>private</SPAN> <SPAN class=kw2>static</SPAN> <A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><SPAN class=kw21>String</SPAN></A> cleanExpr<SPAN class=br0>(</SPAN><A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><SPAN class=kw21>String</SPAN></A> expr<SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>		<SPAN class=co1>//remove all non-operators, non-whitespace, and non digit chars</SPAN><BR>		<SPAN class=kw2>return</SPAN> expr.<SPAN class=me1>replaceAll</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"[^<SPAN class=es0>\\</SPAN>^<SPAN class=es0>\\</SPAN>*<SPAN class=es0>\\</SPAN>+<SPAN class=es0>\\</SPAN>-<SPAN class=es0>\\</SPAN>d/<SPAN class=es0>\\</SPAN>s]"</SPAN>, <SPAN class=st0>""</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	<SPAN class=br0>}</SPAN><BR>&nbsp;<BR>	<SPAN class=kw2>public</SPAN> <SPAN class=kw2>static</SPAN> <SPAN class=kw3>void</SPAN> main<SPAN class=br0>(</SPAN><A href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><SPAN class=kw21>String</SPAN></A><SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN> args<SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>		evalRPN<SPAN class=br0>(</SPAN><SPAN class=st0>"3 4 2 * 1 5 - 2 3 ^ ^ / +"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	<SPAN class=br0>}</SPAN><BR><SPAN class=br0>}</SPAN></PRE>
<P>Output: </P><PRE>Input	Operation	Stack after
3	Push		[3.0]
4	Push		[4.0, 3.0]
2	Push		[2.0, 4.0, 3.0]
*	Operate		[8.0, 3.0]
1	Push		[1.0, 8.0, 3.0]
5	Push		[5.0, 1.0, 8.0, 3.0]
-	Operate		[-4.0, 8.0, 3.0]
2	Push		[2.0, -4.0, 8.0, 3.0]
3	Push		[3.0, 2.0, -4.0, 8.0, 3.0]
^	Operate		[8.0, -4.0, 8.0, 3.0]
^	Operate		[65536.0, 8.0, 3.0]
/	Operate		[1.220703125E-4, 3.0]
+	Operate		[3.0001220703125]
Final answer: 3.0001220703125</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Liberty BASIC" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=18">edit</A>]</SPAN> 
<SPAN id=Liberty_BASIC class=mw-headline><A title="Category:Liberty BASIC" 
href="http://rosettacode.org/wiki/Category:Liberty_BASIC">Liberty 
BASIC</A></SPAN></H2><PRE class="lb highlighted_source">&nbsp;<BR><SPAN class=kw1>global</SPAN> stack$<BR>&nbsp;<BR>expr$ <SPAN class=sy0>=</SPAN> <SPAN class=st0>"3 4 2 * 1 5 - 2 3 ^ ^ / +"</SPAN><BR><SPAN class=kw1>print</SPAN> <SPAN class=st0>"Expression:"</SPAN><BR><SPAN class=kw1>print</SPAN> expr$<BR><SPAN class=kw1>print</SPAN><BR>&nbsp;<BR><SPAN class=kw1>print</SPAN> <SPAN class=st0>"Input"</SPAN><SPAN class=sy0>,</SPAN><SPAN class=st0>"Operation"</SPAN><SPAN class=sy0>,</SPAN><SPAN class=st0>"Stack after"</SPAN><BR>&nbsp;<BR>stack$<SPAN class=sy0>=</SPAN><SPAN class=st0>""</SPAN><BR>token$ <SPAN class=sy0>=</SPAN> <SPAN class=st0>"#"</SPAN><BR>i <SPAN class=sy0>=</SPAN> <SPAN class=nu0>1</SPAN><BR>token$ <SPAN class=sy0>=</SPAN> <SPAN class=kw1>word</SPAN>$<SPAN class=br0>(</SPAN>expr$<SPAN class=sy0>,</SPAN> i<SPAN class=br0>)</SPAN><BR>token2$ <SPAN class=sy0>=</SPAN> <SPAN class=st0>" "</SPAN><SPAN class=sy0>+</SPAN>token$<SPAN class=sy0>+</SPAN><SPAN class=st0>" "</SPAN><BR>&nbsp;<BR><SPAN class=kw1>do</SPAN><BR>    <SPAN class=kw1>print</SPAN> <SPAN class=st0>"Token "</SPAN>;i;<SPAN class=st0>": "</SPAN>;token$<SPAN class=sy0>,</SPAN><BR>    <SPAN class=kw1>select</SPAN> <SPAN class=kw1>case</SPAN><BR>    <SPAN class=co1>'operation</SPAN><BR>    <SPAN class=kw1>case</SPAN> <SPAN class=kw2>instr</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"+-*/^"</SPAN><SPAN class=sy0>,</SPAN>token$<SPAN class=br0>)</SPAN><SPAN class=sy0>&lt;&gt;</SPAN><SPAN class=nu0>0</SPAN><BR>        <SPAN class=kw1>print</SPAN> <SPAN class=st0>"operate"</SPAN><SPAN class=sy0>,</SPAN><BR>        op2$<SPAN class=sy0>=</SPAN>pop$<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>        op1$<SPAN class=sy0>=</SPAN>pop$<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>        <SPAN class=kw1>if</SPAN> op1$<SPAN class=sy0>=</SPAN><SPAN class=st0>""</SPAN>  <SPAN class=kw1>then</SPAN><BR>            <SPAN class=kw1>print</SPAN> <SPAN class=st0>"Error: stack empty for "</SPAN>;i;<SPAN class=st0>"-th token: "</SPAN>;token$<BR>            <SPAN class=kw1>end</SPAN><BR>        <SPAN class=kw1>end</SPAN> <SPAN class=kw1>if</SPAN><BR>&nbsp;<BR>        op1<SPAN class=sy0>=</SPAN><SPAN class=kw2>val</SPAN><SPAN class=br0>(</SPAN>op1$<SPAN class=br0>)</SPAN><BR>        op2<SPAN class=sy0>=</SPAN><SPAN class=kw2>val</SPAN><SPAN class=br0>(</SPAN>op2$<SPAN class=br0>)</SPAN><BR>&nbsp;<BR>        <SPAN class=kw1>select</SPAN> <SPAN class=kw1>case</SPAN> token$<BR>        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"+"</SPAN><BR>            res <SPAN class=sy0>=</SPAN> op1<SPAN class=sy0>+</SPAN>op2<BR>        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"-"</SPAN><BR>            res <SPAN class=sy0>=</SPAN> op1<SPAN class=sy0>-</SPAN>op2<BR>        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"*"</SPAN><BR>            res <SPAN class=sy0>=</SPAN> op1<SPAN class=sy0>*</SPAN>op2<BR>        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"/"</SPAN><BR>            res <SPAN class=sy0>=</SPAN> op1<SPAN class=sy0>/</SPAN>op2<BR>        <SPAN class=kw1>case</SPAN> <SPAN class=st0>"^"</SPAN><BR>            res <SPAN class=sy0>=</SPAN> op1^op2<BR>        <SPAN class=kw1>end</SPAN> <SPAN class=kw1>select</SPAN><BR>&nbsp;<BR>        <SPAN class=kw1>call</SPAN> push <SPAN class=kw2>str$</SPAN><SPAN class=br0>(</SPAN>res<SPAN class=br0>)</SPAN><BR>    <SPAN class=co1>'default:number</SPAN><BR>    <SPAN class=kw1>case</SPAN> <SPAN class=kw1>else</SPAN><BR>        <SPAN class=kw1>print</SPAN> <SPAN class=st0>"push"</SPAN><SPAN class=sy0>,</SPAN><BR>        <SPAN class=kw1>call</SPAN> push token$<BR>    <SPAN class=kw1>end</SPAN> <SPAN class=kw1>select</SPAN><BR>    <SPAN class=kw1>print</SPAN> <SPAN class=st0>"Stack: "</SPAN>;reverse$<SPAN class=br0>(</SPAN>stack$<SPAN class=br0>)</SPAN><BR>    i <SPAN class=sy0>=</SPAN> i<SPAN class=sy0>+</SPAN><SPAN class=nu0>1</SPAN><BR>    token$ <SPAN class=sy0>=</SPAN> <SPAN class=kw1>word</SPAN>$<SPAN class=br0>(</SPAN>expr$<SPAN class=sy0>,</SPAN> i<SPAN class=br0>)</SPAN><BR>    token2$ <SPAN class=sy0>=</SPAN> <SPAN class=st0>" "</SPAN><SPAN class=sy0>+</SPAN>token$<SPAN class=sy0>+</SPAN><SPAN class=st0>" "</SPAN><BR><SPAN class=kw1>loop</SPAN> <SPAN class=kw1>until</SPAN> token$ <SPAN class=sy0>=</SPAN><SPAN class=st0>""</SPAN><BR>&nbsp;<BR>res$<SPAN class=sy0>=</SPAN>pop$<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR><SPAN class=kw1>print</SPAN><BR><SPAN class=kw1>print</SPAN> <SPAN class=st0>"Result:"</SPAN>&nbsp;;res$<BR>extra$<SPAN class=sy0>=</SPAN>pop$<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR><SPAN class=kw1>if</SPAN> extra$<SPAN class=sy0>&lt;&gt;</SPAN><SPAN class=st0>""</SPAN> <SPAN class=kw1>then</SPAN><BR>    <SPAN class=kw1>print</SPAN> <SPAN class=st0>"Error: extra things on a stack: "</SPAN>;extra$<BR><SPAN class=kw1>end</SPAN> <SPAN class=kw1>if</SPAN><BR><SPAN class=kw1>end</SPAN><BR>&nbsp;<BR><SPAN class=co1>'---------------------------------------</SPAN><BR><SPAN class=kw1>function</SPAN> reverse$<SPAN class=br0>(</SPAN>s$<SPAN class=br0>)</SPAN><BR>    reverse$ <SPAN class=sy0>=</SPAN> <SPAN class=st0>""</SPAN><BR>    token$<SPAN class=sy0>=</SPAN><SPAN class=st0>"#"</SPAN><BR>    <SPAN class=kw1>while</SPAN> token$<SPAN class=sy0>&lt;&gt;</SPAN><SPAN class=st0>""</SPAN><BR>        i<SPAN class=sy0>=</SPAN>i<SPAN class=sy0>+</SPAN><SPAN class=nu0>1</SPAN><BR>        token$<SPAN class=sy0>=</SPAN><SPAN class=kw1>word</SPAN>$<SPAN class=br0>(</SPAN>s$<SPAN class=sy0>,</SPAN>i<SPAN class=sy0>,</SPAN><SPAN class=st0>"|"</SPAN><SPAN class=br0>)</SPAN><BR>        reverse$ <SPAN class=sy0>=</SPAN> token$;<SPAN class=st0>" "</SPAN>;reverse$<BR>    <SPAN class=kw1>wend</SPAN><BR><SPAN class=kw1>end</SPAN> <SPAN class=kw1>function</SPAN><BR><SPAN class=co1>'---------------------------------------</SPAN><BR><SPAN class=kw1>sub</SPAN> push s$<BR>    stack$<SPAN class=sy0>=</SPAN>s$<SPAN class=sy0>+</SPAN><SPAN class=st0>"|"</SPAN><SPAN class=sy0>+</SPAN>stack$    <SPAN class=co1>'stack</SPAN><BR><SPAN class=kw1>end</SPAN> <SPAN class=kw1>sub</SPAN><BR>&nbsp;<BR><SPAN class=kw1>function</SPAN> pop$<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>    <SPAN class=co1>'it does return empty on empty stack</SPAN><BR>    pop$<SPAN class=sy0>=</SPAN><SPAN class=kw1>word</SPAN>$<SPAN class=br0>(</SPAN>stack$<SPAN class=sy0>,</SPAN><SPAN class=nu0>1</SPAN><SPAN class=sy0>,</SPAN><SPAN class=st0>"|"</SPAN><SPAN class=br0>)</SPAN><BR>    stack$<SPAN class=sy0>=</SPAN><SPAN class=kw2>mid$</SPAN><SPAN class=br0>(</SPAN>stack$<SPAN class=sy0>,</SPAN><SPAN class=kw2>instr</SPAN><SPAN class=br0>(</SPAN>stack$<SPAN class=sy0>,</SPAN><SPAN class=st0>"|"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>+</SPAN><SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN><BR><SPAN class=kw1>end</SPAN> <SPAN class=kw1>function</SPAN><BR>&nbsp;</PRE>
<DIV>
<DL>
  <DT>Output:</DT></DL></DIV></DT>
<DL></DL><PRE>Expression:
3 4 2 * 1 5 - 2 3 ^ ^ / +

Input         Operation     Stack after
Token 1: 3    push          Stack:  3
Token 2: 4    push          Stack:  3 4
Token 3: 2    push          Stack:  3 4 2
Token 4: *    operate       Stack:  3 8
Token 5: 1    push          Stack:  3 8 1
Token 6: 5    push          Stack:  3 8 1 5
Token 7: -    operate       Stack:  3 8 -4
Token 8: 2    push          Stack:  3 8 -4 2
Token 9: 3    push          Stack:  3 8 -4 2 3
Token 10: ^   operate       Stack:  3 8 -4 8
Token 11: ^   operate       Stack:  3 8 65536
Token 12: /   operate       Stack:  3 0.12207031e-3
Token 13: +   operate       Stack:  3.00012207

Result:3.00012207
</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: NetRexx" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=19">edit</A>]</SPAN> 
<SPAN id=NetRexx class=mw-headline><A title=Category:NetRexx 
href="http://rosettacode.org/wiki/Category:NetRexx">NetRexx</A></SPAN></H2>
<DIV class="examplemeta translation"><B>Translation of</B>: <A 
title="Parsing/RPN calculator algorithm" 
href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#Java">Java</A></DIV><PRE class="netrexx highlighted_source"><SPAN class=coMULTI>/* NetRexx */</SPAN><BR>options replace format comments java crossref symbols nobinary<BR>&nbsp;<BR><SPAN class=kw1>numeric</SPAN> digits <SPAN class=nu0>20</SPAN><BR>&nbsp;<BR>rpnDefaultExpression = <SPAN class=st0>'3 4 2 * 1 5 - 2 3 ^ ^ / +'</SPAN><BR>EODAD = <SPAN class=st0>'.*'</SPAN><BR>&nbsp;<BR><SPAN class=kw1>parse</SPAN> arg rpnString<BR>&nbsp;<BR><SPAN class=kw1>if</SPAN> rpnString = <SPAN class=st0>'.'</SPAN> <SPAN class=kw3>then</SPAN> rpnString = rpnDefaultExpression<BR><SPAN class=kw1>if</SPAN> rpnString = <SPAN class=st0>''</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN><BR>  <SPAN class=kw1>say</SPAN> <SPAN class=st0>'Enter numbers or operators [to stop enter'</SPAN> EODAD<SPAN class=st0>']:'</SPAN><BR>  <SPAN class=kw1>loop</SPAN> <SPAN class=kw2>label</SPAN> rpnloop forever<BR>    rpnval = <SPAN class=kw2>ask</SPAN><BR>    <SPAN class=kw1>if</SPAN> rpnval == EODAD <SPAN class=kw3>then</SPAN> <SPAN class=kw1>leave</SPAN> rpnloop<BR>    rpnString = rpnString rpnval<BR>    <SPAN class=kw3>end</SPAN> rpnloop<BR>  <SPAN class=kw3>end</SPAN><BR>&nbsp;<BR>rpnString = rpnString.<SPAN class=kw6>space</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN><BR><SPAN class=kw1>say</SPAN> rpnString<SPAN class=st0>':'</SPAN> evaluateRPN<SPAN class=br0>(</SPAN>rpnString<SPAN class=br0>)</SPAN><BR>&nbsp;<BR><SPAN class=kw1>return</SPAN><BR>&nbsp;<BR><SPAN class=co1>-- -----------------------------------------------------------------------------</SPAN><BR>method evaluateRPN<SPAN class=br0>(</SPAN>rpnString<SPAN class=br0>)</SPAN> <SPAN class=kw2>public</SPAN> <SPAN class=kw2>static</SPAN> <SPAN class=kw2>returns</SPAN> Rexx<BR>&nbsp;<BR>  stack = LinkedList<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>  op = <SPAN class=nu0>0</SPAN><BR>  L = <SPAN class=st0>'L'</SPAN><BR>  R = <SPAN class=st0>'R'</SPAN><BR>  rpnString = rpnString.<SPAN class=kw6>strip</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>'b'</SPAN><SPAN class=br0>)</SPAN><BR>  <SPAN class=kw1>say</SPAN> <SPAN class=st0>'Input\tOperation\tStack after'</SPAN><BR>  <SPAN class=kw1>loop</SPAN> <SPAN class=kw2>label</SPAN> rpn while rpnString.<SPAN class=me0>length</SPAN> <SPAN class=sy0>&gt;</SPAN> <SPAN class=nu0>0</SPAN><BR>    <SPAN class=kw1>parse</SPAN> rpnString token rest<BR>    rpnString = rest.<SPAN class=kw6>strip</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>'b'</SPAN><SPAN class=br0>)</SPAN><BR>    <SPAN class=kw1>say</SPAN> token <SPAN class=sy0>||</SPAN> <SPAN class=st0>'\t\-'</SPAN><BR>    <SPAN class=kw1>select</SPAN> <SPAN class=kw2>label</SPAN> tox <SPAN class=kw2>case</SPAN> token<BR>      <SPAN class=kw3>when</SPAN> <SPAN class=st0>'*'</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN><BR>        <SPAN class=kw1>say</SPAN> <SPAN class=st0>'Operate\t\t\-'</SPAN><BR>        op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN> = Rexx stack.<SPAN class=me0>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>        op<SPAN class=br0>[</SPAN>L<SPAN class=br0>]</SPAN> = Rexx stack.<SPAN class=me0>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>        stack.<SPAN class=me0>push</SPAN><SPAN class=br0>(</SPAN>op<SPAN class=br0>[</SPAN>L<SPAN class=br0>]</SPAN> <SPAN class=sy0>*</SPAN> op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><BR>        <SPAN class=kw3>end</SPAN><BR>      <SPAN class=kw3>when</SPAN> <SPAN class=st0>'/'</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN><BR>        <SPAN class=kw1>say</SPAN> <SPAN class=st0>'Operate\t\t\-'</SPAN><BR>        op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN> = Rexx stack.<SPAN class=me0>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>        op<SPAN class=br0>[</SPAN>L<SPAN class=br0>]</SPAN> = Rexx stack.<SPAN class=me0>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>        stack.<SPAN class=me0>push</SPAN><SPAN class=br0>(</SPAN>op<SPAN class=br0>[</SPAN>L<SPAN class=br0>]</SPAN> <SPAN class=sy0>/</SPAN> op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><BR>        <SPAN class=kw3>end</SPAN><BR>      <SPAN class=kw3>when</SPAN> <SPAN class=st0>'+'</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN><BR>        <SPAN class=kw1>say</SPAN> <SPAN class=st0>'Operate\t\t\-'</SPAN><BR>        op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN> = Rexx stack.<SPAN class=me0>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>        op<SPAN class=br0>[</SPAN>L<SPAN class=br0>]</SPAN> = Rexx stack.<SPAN class=me0>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>        stack.<SPAN class=me0>push</SPAN><SPAN class=br0>(</SPAN>op<SPAN class=br0>[</SPAN>L<SPAN class=br0>]</SPAN> + op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><BR>        <SPAN class=kw3>end</SPAN><BR>      <SPAN class=kw3>when</SPAN> <SPAN class=st0>'-'</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN><BR>        <SPAN class=kw1>say</SPAN> <SPAN class=st0>'Operate\t\t\-'</SPAN><BR>        op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN> = Rexx stack.<SPAN class=me0>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>        op<SPAN class=br0>[</SPAN>L<SPAN class=br0>]</SPAN> = Rexx stack.<SPAN class=me0>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>        stack.<SPAN class=me0>push</SPAN><SPAN class=br0>(</SPAN>op<SPAN class=br0>[</SPAN>L<SPAN class=br0>]</SPAN> - op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><BR>        <SPAN class=kw3>end</SPAN><BR>      <SPAN class=kw3>when</SPAN> <SPAN class=st0>'^'</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN><BR>        <SPAN class=kw1>say</SPAN> <SPAN class=st0>'Operate\t\t\-'</SPAN><BR>        op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN> = Rexx stack.<SPAN class=me0>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>        op<SPAN class=br0>[</SPAN>L<SPAN class=br0>]</SPAN> = Rexx stack.<SPAN class=me0>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>        <SPAN class=co1>-- If exponent is a whole number use Rexx built-in exponentiation operation, otherwise use Math.pow()</SPAN><BR>        op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN> = op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN> + <SPAN class=nu0>0</SPAN><BR>        <SPAN class=kw1>if</SPAN> op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN>.<SPAN class=kw6>datatype</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>'w'</SPAN><SPAN class=br0>)</SPAN> <SPAN class=kw3>then</SPAN> stack.<SPAN class=me0>push</SPAN><SPAN class=br0>(</SPAN>op<SPAN class=br0>[</SPAN>L<SPAN class=br0>]</SPAN> <SPAN class=sy0>**</SPAN> op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><BR>        <SPAN class=kw3>else</SPAN> stack.<SPAN class=me0>push</SPAN><SPAN class=br0>(</SPAN>Rexx Math.<SPAN class=me0>pow</SPAN><SPAN class=br0>(</SPAN>op<SPAN class=br0>[</SPAN>L<SPAN class=br0>]</SPAN>, op<SPAN class=br0>[</SPAN>R<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>        <SPAN class=kw3>end</SPAN><BR>      <SPAN class=kw3>otherwise</SPAN> <SPAN class=kw1>do</SPAN><BR>        <SPAN class=kw1>if</SPAN> token.<SPAN class=kw6>datatype</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>'n'</SPAN><SPAN class=br0>)</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN><BR>          <SPAN class=kw1>say</SPAN> <SPAN class=st0>'Push\t\t\-'</SPAN><BR>          stack.<SPAN class=me0>push</SPAN><SPAN class=br0>(</SPAN>token<SPAN class=br0>)</SPAN><BR>          <SPAN class=kw3>end</SPAN><BR>        <SPAN class=kw3>else</SPAN> <SPAN class=kw1>do</SPAN><BR>          <SPAN class=kw1>say</SPAN> <SPAN class=st0>'Error\t\t\-'</SPAN><BR>          <SPAN class=kw3>end</SPAN><BR>        <SPAN class=kw3>end</SPAN><BR>      <SPAN class=kw3>end</SPAN> tox<BR>      calc = Rexx<BR>      <SPAN class=kw1>say</SPAN> stack.<SPAN class=kw6>toString</SPAN><BR>    <SPAN class=kw3>end</SPAN> rpn<BR>    <SPAN class=kw1>say</SPAN><BR>    calc = stack.<SPAN class=kw6>toString</SPAN><BR>  <SPAN class=kw1>return</SPAN> calc<BR>&nbsp;</PRE>
<P><B>Output:</B> </P><PRE>Input	Operation	Stack after
3	Push		[3]
4	Push		[4, 3]
2	Push		[2, 4, 3]
*	Operate		[8, 3]
1	Push		[1, 8, 3]
5	Push		[5, 1, 8, 3]
-	Operate		[-4, 8, 3]
2	Push		[2, -4, 8, 3]
3	Push		[3, 2, -4, 8, 3]
^	Operate		[8, -4, 8, 3]
^	Operate		[65536, 8, 3]
/	Operate		[0.0001220703125, 3]
+	Operate		[3.0001220703125]

3 4 2 * 1 5 - 2 3 ^ ^ / +: [3.0001220703125]
</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Objeck" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=20">edit</A>]</SPAN> 
<SPAN id=Objeck class=mw-headline><A title=Category:Objeck 
href="http://rosettacode.org/wiki/Category:Objeck">Objeck</A></SPAN></H2><PRE class="objeck highlighted_source">&nbsp;<BR><SPAN class=kw1>use</SPAN> IO<SPAN class=sy0>;</SPAN><BR><SPAN class=kw1>use</SPAN> Struct<SPAN class=sy0>;</SPAN><BR>&nbsp;<BR><SPAN class=kw1>bundle</SPAN> Default <SPAN class=br0>{</SPAN><BR>  <SPAN class=kw1>class</SPAN> RpnCalc <SPAN class=br0>{</SPAN><BR>    <SPAN class=kw1>function</SPAN> <SPAN class=sy0>:</SPAN> Main<SPAN class=br0>(</SPAN>args <SPAN class=sy0>:</SPAN> <SPAN class=kw2>String</SPAN><SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN> ~ <SPAN class=kw2>Nil</SPAN> <SPAN class=br0>{</SPAN><BR>      Caculate<SPAN class=br0>(</SPAN><SPAN class=st0>"3 4 2 * 1 5 - 2 3 ^ ^ / +"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>    <SPAN class=br0>}</SPAN><BR>&nbsp;<BR>    <SPAN class=kw1>function</SPAN> <SPAN class=sy0>:</SPAN> <SPAN class=kw1>native</SPAN> <SPAN class=sy0>:</SPAN> Caculate<SPAN class=br0>(</SPAN>rpn <SPAN class=sy0>:</SPAN> <SPAN class=kw2>String</SPAN><SPAN class=br0>)</SPAN> ~ <SPAN class=kw2>Nil</SPAN> <SPAN class=br0>{</SPAN><BR>      rpn<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>PrintLine</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>      tokens <SPAN class=sy0>:=</SPAN> rpn<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Split</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>" "</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>      stack <SPAN class=sy0>:=</SPAN> FloatVector<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>New</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>      <SPAN class=kw1>each</SPAN><SPAN class=br0>(</SPAN>i <SPAN class=sy0>:</SPAN> tokens<SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>        token <SPAN class=sy0>:=</SPAN> tokens<SPAN class=br0>[</SPAN>i<SPAN class=br0>]</SPAN><SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Trim</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>        <SPAN class=kw1>if</SPAN><SPAN class=br0>(</SPAN>token<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Size</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>&gt;</SPAN> <SPAN class=nu0>0</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>          <SPAN class=kw1>if</SPAN><SPAN class=br0>(</SPAN>token<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Get</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>0</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>IsDigit</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>            stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>AddBack</SPAN><SPAN class=br0>(</SPAN>token<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>ToFloat</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>          <SPAN class=br0>}</SPAN><BR>          <SPAN class=kw1>else</SPAN> <SPAN class=br0>{</SPAN><BR>            right <SPAN class=sy0>:=</SPAN> stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Get</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Size</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>-</SPAN> <SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>RemoveBack</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            left <SPAN class=sy0>:=</SPAN> stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Get</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Size</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>-</SPAN> <SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>RemoveBack</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=kw1>select</SPAN><SPAN class=br0>(</SPAN>token<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Get</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>0</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>              <SPAN class=kw1>label</SPAN> '<SPAN class=sy0>+</SPAN>'<SPAN class=sy0>:</SPAN> <SPAN class=br0>{</SPAN><BR>                stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>AddBack</SPAN><SPAN class=br0>(</SPAN>left <SPAN class=sy0>+</SPAN> right<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>              <SPAN class=br0>}</SPAN><BR>&nbsp;<BR>              <SPAN class=kw1>label</SPAN> '<SPAN class=sy0>-</SPAN>'<SPAN class=sy0>:</SPAN> <SPAN class=br0>{</SPAN><BR>                stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>AddBack</SPAN><SPAN class=br0>(</SPAN>left <SPAN class=sy0>-</SPAN> right<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>              <SPAN class=br0>}</SPAN><BR>&nbsp;<BR>              <SPAN class=kw1>label</SPAN> '<SPAN class=sy0>*</SPAN>'<SPAN class=sy0>:</SPAN> <SPAN class=br0>{</SPAN><BR>                stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>AddBack</SPAN><SPAN class=br0>(</SPAN>left <SPAN class=sy0>*</SPAN> right<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>              <SPAN class=br0>}</SPAN><BR>&nbsp;<BR>              <SPAN class=kw1>label</SPAN> '<SPAN class=sy0>/</SPAN>'<SPAN class=sy0>:</SPAN> <SPAN class=br0>{</SPAN><BR>                stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>AddBack</SPAN><SPAN class=br0>(</SPAN>left <SPAN class=sy0>/</SPAN> right<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>              <SPAN class=br0>}</SPAN><BR>&nbsp;<BR>              <SPAN class=kw1>label</SPAN> '^'<SPAN class=sy0>:</SPAN> <SPAN class=br0>{</SPAN><BR>                stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>AddBack</SPAN><SPAN class=br0>(</SPAN>right<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Power</SPAN><SPAN class=br0>(</SPAN>left<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>              <SPAN class=br0>}</SPAN><BR>            <SPAN class=br0>}</SPAN><SPAN class=sy0>;</SPAN><BR>          <SPAN class=br0>}</SPAN><SPAN class=sy0>;</SPAN>  <BR>          PrintStack<SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>        <SPAN class=br0>}</SPAN><SPAN class=sy0>;</SPAN><BR>      <SPAN class=br0>}</SPAN><SPAN class=sy0>;</SPAN><BR>      Console<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Print</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>"result: "</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>PrintLine</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Get</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>0</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>    <SPAN class=br0>}</SPAN><BR>&nbsp;<BR>    <SPAN class=kw1>function</SPAN> <SPAN class=sy0>:</SPAN> PrintStack<SPAN class=br0>(</SPAN>stack <SPAN class=sy0>:</SPAN> FloatVector<SPAN class=br0>)</SPAN> ~ <SPAN class=kw2>Nil</SPAN> <SPAN class=br0>{</SPAN><BR>      <SPAN class=st0>"  ["</SPAN><SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Print</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>      <SPAN class=kw1>each</SPAN><SPAN class=br0>(</SPAN>i <SPAN class=sy0>:</SPAN> stack<SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>        stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Get</SPAN><SPAN class=br0>(</SPAN>i<SPAN class=br0>)</SPAN><SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Print</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>        <SPAN class=kw1>if</SPAN><SPAN class=br0>(</SPAN>i <SPAN class=sy0>+</SPAN> <SPAN class=nu0>1</SPAN><SPAN class=sy0>&lt;</SPAN> stack<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Size</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>          <SPAN class=st0>", "</SPAN><SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>Print</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>        <SPAN class=br0>}</SPAN><SPAN class=sy0>;</SPAN><BR>      <SPAN class=br0>}</SPAN><SPAN class=sy0>;</SPAN><BR>      '<SPAN class=br0>]</SPAN>'<SPAN class=sy0>-&gt;</SPAN><SPAN class=me1>PrintLine</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>    <SPAN class=br0>}</SPAN><BR>  <SPAN class=br0>}</SPAN><BR><SPAN class=br0>}</SPAN><BR>&nbsp;</PRE>
<P>Output </P><PRE>3 4 2 * 1 5 - 2 3 ^ ^ / +
  [3]
  [3, 4]
  [3, 4, 2]
  [3, 8]
  [3, 8, 1]
  [3, 8, 1, 5]
  [3, 8, -4]
  [3, 8, -4, 2]
  [3, 8, -4, 2, 3]
  [3, 8, -4, 8]
  [3, 8, 65536]
  [3, 0.00012207]
  [3.00012]
result: 3.00012
</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: OCaml" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=21">edit</A>]</SPAN> 
<SPAN id=OCaml class=mw-headline><A title=Category:OCaml 
href="http://rosettacode.org/wiki/Category:OCaml">OCaml</A></SPAN></H2><PRE class="ocaml highlighted_source"><SPAN class=co1>(* binop&nbsp;: ('a -&gt; 'a -&gt; 'a) -&gt; 'a list -&gt; 'a list *)</SPAN><BR><SPAN class=kw1>let</SPAN> binop op <SPAN class=sy0>=</SPAN> <SPAN class=kw1>function</SPAN><BR>  <SPAN class=sy0>|</SPAN> b<SPAN class=sy0>::</SPAN>a<SPAN class=sy0>::</SPAN>r <SPAN class=sy0>-&gt;</SPAN> <SPAN class=br0>(</SPAN>op a b<SPAN class=br0>)</SPAN><SPAN class=sy0>::</SPAN>r<BR>  <SPAN class=sy0>|</SPAN> _ <SPAN class=sy0>-&gt;</SPAN> <SPAN class=kw1>failwith</SPAN> <SPAN class=st0>"invalid expression"</SPAN><BR>&nbsp;<BR><SPAN class=co1>(* interp&nbsp;: float list -&gt; string -&gt; string * float list *)</SPAN><BR><SPAN class=kw1>let</SPAN> interp s <SPAN class=sy0>=</SPAN> <SPAN class=kw1>function</SPAN><BR>  <SPAN class=sy0>|</SPAN> <SPAN class=st0>"+"</SPAN> <SPAN class=sy0>-&gt;</SPAN> <SPAN class=st0>"add"</SPAN>,    binop <SPAN class=br0>(</SPAN> <SPAN class=sy0>+.</SPAN> <SPAN class=br0>)</SPAN> s<BR>  <SPAN class=sy0>|</SPAN> <SPAN class=st0>"-"</SPAN> <SPAN class=sy0>-&gt;</SPAN> <SPAN class=st0>"subtr"</SPAN>,  binop <SPAN class=br0>(</SPAN> <SPAN class=sy0>-.</SPAN> <SPAN class=br0>)</SPAN> s<BR>  <SPAN class=sy0>|</SPAN> <SPAN class=st0>"*"</SPAN> <SPAN class=sy0>-&gt;</SPAN> <SPAN class=st0>"mult"</SPAN>,   binop <SPAN class=br0>(</SPAN> <SPAN class=sy0>*.</SPAN> <SPAN class=br0>)</SPAN> s<BR>  <SPAN class=sy0>|</SPAN> <SPAN class=st0>"/"</SPAN> <SPAN class=sy0>-&gt;</SPAN> <SPAN class=st0>"divide"</SPAN>, binop <SPAN class=br0>(</SPAN> <SPAN class=sy0>/.</SPAN> <SPAN class=br0>)</SPAN> s<BR>  <SPAN class=sy0>|</SPAN> <SPAN class=st0>"^"</SPAN> <SPAN class=sy0>-&gt;</SPAN> <SPAN class=st0>"exp"</SPAN>,    binop <SPAN class=br0>(</SPAN> <SPAN class=sy0>**</SPAN> <SPAN class=br0>)</SPAN> s<BR>  <SPAN class=sy0>|</SPAN> str <SPAN class=sy0>-&gt;</SPAN> <SPAN class=st0>"push"</SPAN>, <SPAN class=br0>(</SPAN><A href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_string"><SPAN class=kw3>float_of_string</SPAN></A> str<SPAN class=br0>)</SPAN> <SPAN class=sy0>::</SPAN> s<BR>&nbsp;<BR><SPAN class=co1>(* interp_and_show&nbsp;: float list -&gt; string -&gt; float list *)</SPAN><BR><SPAN class=kw1>let</SPAN> interp_and_show s inp <SPAN class=sy0>=</SPAN><BR>  <SPAN class=kw1>let</SPAN> op,s<SPAN class=sy0>'</SPAN> <SPAN class=sy0>=</SPAN> interp s inp <SPAN class=kw1>in</SPAN><BR>  <A href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html"><SPAN class=kw2>Printf</SPAN></A><SPAN class=sy0>.</SPAN>printf <SPAN class=st0>"%s\t%s\t"</SPAN> inp op<SPAN class=sy0>;</SPAN><BR>  <A href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><SPAN class=kw2>List</SPAN></A><SPAN class=sy0>.</SPAN><SPAN class=br0>(</SPAN>iter <SPAN class=br0>(</SPAN><A href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html"><SPAN class=kw2>Printf</SPAN></A><SPAN class=sy0>.</SPAN>printf <SPAN class=st0>"%F "</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>(</SPAN>rev s<SPAN class=sy0>'</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>  <A href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline"><SPAN class=kw3>print_newline</SPAN></A> <SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>  s<SPAN class=sy0>'</SPAN><BR>&nbsp;<BR><SPAN class=co1>(* rpn_eval&nbsp;: string -&gt; float list *)</SPAN><BR><SPAN class=kw1>let</SPAN> rpn_eval str <SPAN class=sy0>=</SPAN><BR>  <A href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html"><SPAN class=kw2>Printf</SPAN></A><SPAN class=sy0>.</SPAN>printf <SPAN class=st0>"Token\tAction\tStack\n"</SPAN><SPAN class=sy0>;</SPAN><BR>  <SPAN class=kw1>let</SPAN> ss <SPAN class=sy0>=</SPAN> <A href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html"><SPAN class=kw2>Str</SPAN></A><SPAN class=sy0>.</SPAN><SPAN class=br0>(</SPAN>split <SPAN class=br0>(</SPAN>regexp_string <SPAN class=st0>" "</SPAN><SPAN class=br0>)</SPAN> str<SPAN class=br0>)</SPAN> <SPAN class=kw1>in</SPAN><BR>  <A href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><SPAN class=kw2>List</SPAN></A><SPAN class=sy0>.</SPAN>fold_left interp_and_show <SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN> ss</PRE>
<P>Evaluation of the test expression: </P><PRE># rpn_eval "3 4 2 * 1 5 - 2 3 ^ ^ / +";;
Token	Action	Stack
3	push	3. 
4	push	3. 4. 
2	push	3. 4. 2. 
*	mult	3. 8. 
1	push	3. 8. 1. 
5	push	3. 8. 1. 5. 
-	subtr	3. 8. -4. 
2	push	3. 8. -4. 2. 
3	push	3. 8. -4. 2. 3. 
^	exp	3. 8. -4. 8. 
^	exp	3. 8. 65536. 
/	divide	3. 0.0001220703125 
+	add	3.00012207031 
-&nbsp;: float list = [3.0001220703125]
</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: ooRexx" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=22">edit</A>]</SPAN> 
<SPAN id=ooRexx class=mw-headline><A title=Category:OoRexx 
href="http://rosettacode.org/wiki/Category:OoRexx">ooRexx</A></SPAN></H2><PRE class="oorexx highlighted_source"><SPAN class=coMULTI>/* ooRexx *************************************************************<BR>* 10.11.2012 Walter Pachl  translated from PL/I via REXX<BR>**********************************************************************/</SPAN><BR>fid=<SPAN class=st0>'rpl.txt'</SPAN><BR>ex=<SPAN class=kw2>linein</SPAN><SPAN class=br0>(</SPAN>fid<SPAN class=br0>)</SPAN><BR><SPAN class=kw1>Say</SPAN> <SPAN class=st0>'Input:'</SPAN> ex<BR><SPAN class=coMULTI>/* ex=' 3 4 2 * 1 5 - 2 3 ^ ^ / +' */</SPAN><BR><SPAN class=kw1>Numeric</SPAN> <SPAN class=kw2>Digits</SPAN> <SPAN class=nu0>15</SPAN><BR>expr=<SPAN class=st0>''</SPAN><BR>st=<SPAN class=sy0>.</SPAN>circularqueue~new<SPAN class=br0>(</SPAN><SPAN class=nu0>100</SPAN><SPAN class=br0>)</SPAN><BR><SPAN class=kw1>Say</SPAN> <SPAN class=st0>'Stack contents:'</SPAN><BR><SPAN class=kw1>do</SPAN> <SPAN class=kw2>While</SPAN> ex<SPAN class=sy0>&lt;&gt;</SPAN><SPAN class=st0>''</SPAN><BR>  <SPAN class=kw1>Parse</SPAN> <SPAN class=kw2>Var</SPAN> ex ch +<SPAN class=nu0>1</SPAN> ex<BR>  expr=expr<SPAN class=sy0>||</SPAN>ch;<BR>  <SPAN class=kw1>if</SPAN> ch<SPAN class=sy0>&lt;&gt;</SPAN><SPAN class=st0>' '</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN><BR>    <SPAN class=kw1>If</SPAN> <SPAN class=kw6>pos</SPAN><SPAN class=br0>(</SPAN>ch,<SPAN class=st0>'0123456789'</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>&gt;</SPAN><SPAN class=nu0>0</SPAN> <SPAN class=kw3>Then</SPAN>     <SPAN class=coMULTI>/* a digit goes onto stack    */</SPAN><BR>      st~<SPAN class=kw1>push</SPAN><SPAN class=br0>(</SPAN>ch<SPAN class=br0>)</SPAN><BR>    <SPAN class=kw3>Else</SPAN> <SPAN class=kw1>Do</SPAN>                            <SPAN class=coMULTI>/* an operator                */</SPAN><BR>      op=st~<SPAN class=kw1>pull</SPAN>                       <SPAN class=coMULTI>/* get top element            */</SPAN><BR>      <SPAN class=kw1>select</SPAN>                           <SPAN class=coMULTI>/* and modify the (now) top el*/</SPAN><BR>        <SPAN class=kw3>when</SPAN> ch=<SPAN class=st0>'+'</SPAN> <SPAN class=kw3>Then</SPAN> st~<SPAN class=kw1>push</SPAN><SPAN class=br0>(</SPAN>st~<SPAN class=kw1>pull</SPAN> +  op<SPAN class=br0>)</SPAN><BR>        <SPAN class=kw3>when</SPAN> ch=<SPAN class=st0>'-'</SPAN> <SPAN class=kw3>Then</SPAN> st~<SPAN class=kw1>push</SPAN><SPAN class=br0>(</SPAN>st~<SPAN class=kw1>pull</SPAN> -  op<SPAN class=br0>)</SPAN><BR>        <SPAN class=kw3>when</SPAN> ch=<SPAN class=st0>'*'</SPAN> <SPAN class=kw3>Then</SPAN> st~<SPAN class=kw1>push</SPAN><SPAN class=br0>(</SPAN>st~<SPAN class=kw1>pull</SPAN> <SPAN class=sy0>*</SPAN>  op<SPAN class=br0>)</SPAN><BR>        <SPAN class=kw3>when</SPAN> ch=<SPAN class=st0>'/'</SPAN> <SPAN class=kw3>Then</SPAN> st~<SPAN class=kw1>push</SPAN><SPAN class=br0>(</SPAN>st~<SPAN class=kw1>pull</SPAN> <SPAN class=sy0>/</SPAN>  op<SPAN class=br0>)</SPAN><BR>        <SPAN class=kw3>when</SPAN> ch=<SPAN class=st0>'^'</SPAN> <SPAN class=kw3>Then</SPAN> st~<SPAN class=kw1>push</SPAN><SPAN class=br0>(</SPAN>st~<SPAN class=kw1>pull</SPAN> <SPAN class=sy0>**</SPAN> op<SPAN class=br0>)</SPAN><BR>        <SPAN class=kw3>end</SPAN>;<BR>      <SPAN class=kw1>Say</SPAN> st~string<SPAN class=br0>(</SPAN><SPAN class=st0>' '</SPAN>,<SPAN class=st0>'L'</SPAN><SPAN class=br0>)</SPAN>           <SPAN class=coMULTI>/* show stack in LIFO order   */</SPAN><BR>      <SPAN class=kw3>end</SPAN><BR>    <SPAN class=kw3>end</SPAN><BR>  <SPAN class=kw3>end</SPAN><BR><SPAN class=kw1>Say</SPAN> <SPAN class=st0>'The reverse polish expression = '</SPAN>expr<BR><SPAN class=kw1>Say</SPAN> <SPAN class=st0>'The evaluated expression = '</SPAN>st~<SPAN class=kw1>pull</SPAN></PRE>
<P>Output: </P><PRE>Input: 3 4 2 * 1 5 - 2 3 ^ ^ / +
Stack contents:
3 8
3 8 -4
3 8 -4 8
3 8 65536
3 0.0001220703125
3.0001220703125
The reverse polish expression = 3 4 2 * 1 5 - 2 3 ^ ^ / +
The evaluated expression = 3.0001220703125    
</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Perl" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=23">edit</A>]</SPAN> 
<SPAN id=Perl class=mw-headline><A title=Category:Perl 
href="http://rosettacode.org/wiki/Category:Perl">Perl</A></SPAN></H2><PRE class="perl highlighted_source">&nbsp;<BR><SPAN class=co1># RPN calculator</SPAN><BR><SPAN class=co1>#</SPAN><BR><SPAN class=co1># Nigel Galloway April 2nd., 2012</SPAN><BR><SPAN class=co1>#</SPAN><BR><SPAN class=re0>$WSb</SPAN> <SPAN class=sy0>=</SPAN> <SPAN class=st_h>'(?:^|\s+)'</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=re0>$WSa</SPAN> <SPAN class=sy0>=</SPAN> <SPAN class=st_h>'(?:\s+|$)'</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=re0>$num</SPAN> <SPAN class=sy0>=</SPAN> <SPAN class=st_h>'([+-/]?(?:\.\d+|\d+(?:\.\d*)?))'</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=re0>$op</SPAN> <SPAN class=sy0>=</SPAN> <SPAN class=st_h>'([-+*/^])'</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=kw2>sub</SPAN> myE <SPAN class=br0>{</SPAN><BR>  <SPAN class=kw1>my</SPAN> <SPAN class=re0>$a</SPAN> <SPAN class=sy0>=</SPAN> <SPAN class=st_h>'('</SPAN><SPAN class=sy0>.</SPAN><SPAN class=co3>$1</SPAN><SPAN class=sy0>.</SPAN><SPAN class=st_h>')'</SPAN><SPAN class=sy0>.</SPAN><SPAN class=co3>$3</SPAN><SPAN class=sy0>.</SPAN><SPAN class=st_h>'('</SPAN><SPAN class=sy0>.</SPAN><SPAN class=co3>$2</SPAN><SPAN class=sy0>.</SPAN><SPAN class=st_h>')'</SPAN><SPAN class=sy0>;</SPAN><BR>  <SPAN class=re0>$a</SPAN> <SPAN class=sy0>=~</SPAN> <SPAN class=co2>s/\^/**/</SPAN><SPAN class=sy0>;</SPAN><BR>  <A href="http://perldoc.perl.org/functions/return.html"><SPAN class=kw3>return</SPAN></A> <A href="http://perldoc.perl.org/functions/eval.html"><SPAN class=kw3>eval</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$a</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=br0>}</SPAN><BR><SPAN class=kw1>while</SPAN> <SPAN class=br0>(</SPAN><SPAN class=sy0>&lt;&gt;</SPAN><SPAN class=br0>)</SPAN>  <SPAN class=br0>{</SPAN><BR>  <SPAN class=kw1>while</SPAN> <SPAN class=br0>(</SPAN><A href="http://perldoc.perl.org/functions/s.html"><SPAN class=kw3>s</SPAN></A><SPAN class=sy0>/</SPAN><SPAN class=re0>$WSb</SPAN><SPAN class=re0>$num</SPAN>\<A href="http://perldoc.perl.org/functions/s.html"><SPAN class=kw3>s</SPAN></A><SPAN class=sy0>+</SPAN><SPAN class=re0>$num</SPAN>\<A href="http://perldoc.perl.org/functions/s.html"><SPAN class=kw3>s</SPAN></A><SPAN class=sy0>+</SPAN><SPAN class=re0>$op</SPAN><SPAN class=re0>$WSa</SPAN><SPAN class=sy0>/</SPAN><SPAN class=st_h>' '</SPAN><SPAN class=sy0>.</SPAN>myE<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>.</SPAN><SPAN class=st_h>' '</SPAN><SPAN class=sy0>/</SPAN>e<SPAN class=br0>)</SPAN>  <SPAN class=br0>{</SPAN><SPAN class=br0>}</SPAN><BR>  <A href="http://perldoc.perl.org/functions/print.html"><SPAN class=kw3>print</SPAN></A> <SPAN class=br0>(</SPAN><SPAN class=co5>$_</SPAN><SPAN class=sy0>,</SPAN> <SPAN class=st0>"<SPAN class=es0>\n</SPAN>"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=br0>}</SPAN><BR>&nbsp;</PRE>
<P>Produces: </P><PRE>&gt;rpnC.pl
3 4 2 * 1 5 - 2 3 ^ ^ / +
 3.0001220703125
</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Perl 6" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=24">edit</A>]</SPAN> 
<SPAN id=Perl_6 class=mw-headline><A title="Category:Perl 6" 
href="http://rosettacode.org/wiki/Category:Perl_6">Perl 6</A></SPAN></H2>
<DIV class="examplemeta workswith"><B>Works with</B>: <A title=Niecza 
href="http://rosettacode.org/wiki/Niecza">niecza</A> version 2012-07-28</DIV><PRE class="perl6 highlighted_source"><SPAN class=kw1>my</SPAN> <SPAN class=re0>$proggie</SPAN> <SPAN class=sy0>=</SPAN> <SPAN class=st_h>'3 4 2 * 1 5 - 2 3 ^ ^ / +'</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR><SPAN class=kw2>class</SPAN> RPN <SPAN class=kw1>is</SPAN> Array <SPAN class=br0>{</SPAN><BR>&nbsp;<BR>    <SPAN class=kw2>method</SPAN> binop<SPAN class=br0>(</SPAN><SPAN class=re0>&amp;infix</SPAN><SPAN class=sy0>:&lt;</SPAN>op<SPAN class=sy0>&gt;</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN> self<SPAN class=sy0>.</SPAN><SPAN class=kw3>push</SPAN><SPAN class=sy0>:</SPAN> self<SPAN class=sy0>.</SPAN><SPAN class=kw3>pop</SPAN> Rop self<SPAN class=sy0>.</SPAN><SPAN class=kw3>pop</SPAN> <SPAN class=br0>}</SPAN><BR>&nbsp;<BR>    <SPAN class=kw2>method</SPAN> run<SPAN class=br0>(</SPAN><SPAN class=re0>$p</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>        <SPAN class=kw1>for</SPAN> <SPAN class=re0>$p</SPAN><SPAN class=sy0>.</SPAN><SPAN class=kw3>words</SPAN> <SPAN class=br0>{</SPAN><BR>            <SPAN class=kw3>say</SPAN> <SPAN class=st0>"$_ ({self})"</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=kw1>when</SPAN> <SPAN class=co2>/\d/</SPAN> <SPAN class=br0>{</SPAN> self<SPAN class=sy0>.</SPAN><SPAN class=kw3>push</SPAN><SPAN class=sy0>:</SPAN> <SPAN class=re0>$_</SPAN> <SPAN class=br0>}</SPAN><BR>            <SPAN class=kw1>when</SPAN> <SPAN class=st_h>'+'</SPAN>  <SPAN class=br0>{</SPAN> self<SPAN class=sy0>.</SPAN><SPAN class=me1>binop</SPAN><SPAN class=sy0>:</SPAN> <SPAN class=sy0>&amp;</SPAN><SPAN class=br0>[</SPAN><SPAN class=sy0>+</SPAN><SPAN class=br0>]</SPAN> <SPAN class=br0>}</SPAN><BR>            <SPAN class=kw1>when</SPAN> <SPAN class=st_h>'-'</SPAN>  <SPAN class=br0>{</SPAN> self<SPAN class=sy0>.</SPAN><SPAN class=me1>binop</SPAN><SPAN class=sy0>:</SPAN> <SPAN class=sy0>&amp;</SPAN><SPAN class=br0>[</SPAN><SPAN class=sy0>-</SPAN><SPAN class=br0>]</SPAN> <SPAN class=br0>}</SPAN><BR>            <SPAN class=kw1>when</SPAN> <SPAN class=st_h>'*'</SPAN>  <SPAN class=br0>{</SPAN> self<SPAN class=sy0>.</SPAN><SPAN class=me1>binop</SPAN><SPAN class=sy0>:</SPAN> <SPAN class=sy0>&amp;</SPAN><SPAN class=br0>[</SPAN><SPAN class=sy0>*</SPAN><SPAN class=br0>]</SPAN> <SPAN class=br0>}</SPAN><BR>            <SPAN class=kw1>when</SPAN> <SPAN class=st_h>'/'</SPAN>  <SPAN class=br0>{</SPAN> self<SPAN class=sy0>.</SPAN><SPAN class=me1>binop</SPAN><SPAN class=sy0>:</SPAN> <SPAN class=sy0>&amp;</SPAN><SPAN class=br0>[</SPAN><SPAN class=sy0>/</SPAN><SPAN class=br0>]</SPAN> <SPAN class=br0>}</SPAN><BR>            <SPAN class=kw1>when</SPAN> <SPAN class=st_h>'^'</SPAN>  <SPAN class=br0>{</SPAN> self<SPAN class=sy0>.</SPAN><SPAN class=me1>binop</SPAN><SPAN class=sy0>:</SPAN> <SPAN class=sy0>&amp;</SPAN><SPAN class=br0>[</SPAN><SPAN class=sy0>**</SPAN><SPAN class=br0>]</SPAN> <SPAN class=br0>}</SPAN><BR>            <SPAN class=kw1>default</SPAN>   <SPAN class=br0>{</SPAN> <SPAN class=kw1>die</SPAN> <SPAN class=st0>"$_ is bogus"</SPAN> <SPAN class=br0>}</SPAN><BR>        <SPAN class=br0>}</SPAN><BR>        <SPAN class=kw3>say</SPAN> self<SPAN class=sy0>;</SPAN><BR>    <SPAN class=br0>}</SPAN><BR><SPAN class=br0>}</SPAN><BR>&nbsp;<BR>RPN<SPAN class=sy0>.</SPAN><SPAN class=kw2>new</SPAN><SPAN class=sy0>.</SPAN><SPAN class=me1>run</SPAN><SPAN class=br0>(</SPAN><SPAN class=re0>$proggie</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN></PRE>
<DIV>
<DL>
  <DT>Output:</DT></DL></DIV></DT>
<DL></DL><PRE>3 ()
4 (3)
2 (3 4)
* (3 4 2)
1 (3 8)
5 (3 8 1)
- (3 8 1 5)
2 (3 8 -4)
3 (3 8 -4 2)
^ (3 8 -4 2 3)
^ (3 8 -4 8)
/ (3 8 65536)
+ (3 0.0001220703125)
3.0001220703125</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: PHP" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=25">edit</A>]</SPAN> 
<SPAN id=PHP class=mw-headline><A title=Category:PHP 
href="http://rosettacode.org/wiki/Category:PHP">PHP</A></SPAN></H2><PRE class="php highlighted_source">&nbsp;<BR><SPAN class=kw2>&lt;?php</SPAN><BR><SPAN class=kw2>function</SPAN> rpn<SPAN class=br0>(</SPAN><SPAN class=re0>$postFix</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>{</SPAN><BR>    <SPAN class=re0>$stack</SPAN> <SPAN class=sy0>=</SPAN> <A href="http://www.php.net/array"><SPAN class=kw3>Array</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>    <SPAN class=kw1>echo</SPAN> <SPAN class=st0>"Input<SPAN class=es1>\t</SPAN>Operation<SPAN class=es1>\t</SPAN>Stack<SPAN class=es1>\t</SPAN>after<SPAN class=es1>\n</SPAN>"</SPAN> <SPAN class=sy0>;</SPAN><BR>	<SPAN class=re0>$token</SPAN> <SPAN class=sy0>=</SPAN> <A href="http://www.php.net/explode"><SPAN class=kw3>explode</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=st0>" "</SPAN><SPAN class=sy0>,</SPAN> <A href="http://www.php.net/trim"><SPAN class=kw3>trim</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$postFix</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>	<SPAN class=re0>$count</SPAN> <SPAN class=sy0>=</SPAN> <A href="http://www.php.net/count"><SPAN class=kw3>count</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$token</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>    <SPAN class=kw1>for</SPAN><SPAN class=br0>(</SPAN><SPAN class=re0>$i</SPAN> <SPAN class=sy0>=</SPAN> <SPAN class=nu0>0</SPAN> <SPAN class=sy0>;</SPAN> <SPAN class=re0>$i</SPAN><SPAN class=sy0>&lt;</SPAN><SPAN class=re0>$count</SPAN><SPAN class=sy0>;</SPAN><SPAN class=re0>$i</SPAN><SPAN class=sy0>++</SPAN><SPAN class=br0>)</SPAN><BR>	<SPAN class=br0>{</SPAN><BR>        <SPAN class=kw1>echo</SPAN> <SPAN class=re0>$token</SPAN><SPAN class=br0>[</SPAN><SPAN class=re0>$i</SPAN><SPAN class=br0>]</SPAN> <SPAN class=sy0>.</SPAN><SPAN class=st0>" <SPAN class=es1>\t</SPAN>"</SPAN><SPAN class=sy0>;</SPAN><BR>        <SPAN class=re0>$tokenNum</SPAN> <SPAN class=sy0>=</SPAN> <SPAN class=st0>""</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>        <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN><A href="http://www.php.net/is_numeric"><SPAN class=kw3>is_numeric</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$token</SPAN><SPAN class=br0>[</SPAN><SPAN class=re0>$i</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>{</SPAN><BR>            <SPAN class=kw1>echo</SPAN>  <SPAN class=st0>"Push"</SPAN><SPAN class=sy0>;</SPAN><BR>			<A href="http://www.php.net/array_push"><SPAN class=kw3>array_push</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$stack</SPAN><SPAN class=sy0>,</SPAN><SPAN class=re0>$token</SPAN><SPAN class=br0>[</SPAN><SPAN class=re0>$i</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>        <SPAN class=br0>}</SPAN><BR>        <SPAN class=kw1>else</SPAN><BR>        <SPAN class=br0>{</SPAN><BR>            <SPAN class=kw1>echo</SPAN> <SPAN class=st0>"Operate"</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=re0>$secondOperand</SPAN> <SPAN class=sy0>=</SPAN> <A href="http://www.php.net/end"><SPAN class=kw3>end</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$stack</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>			<A href="http://www.php.net/array_pop"><SPAN class=kw3>array_pop</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$stack</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=re0>$firstOperand</SPAN> <SPAN class=sy0>=</SPAN> <A href="http://www.php.net/end"><SPAN class=kw3>end</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$stack</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            <A href="http://www.php.net/array_pop"><SPAN class=kw3>array_pop</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$stack</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>&nbsp;<BR>            <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN><SPAN class=re0>$token</SPAN><SPAN class=br0>[</SPAN><SPAN class=re0>$i</SPAN><SPAN class=br0>]</SPAN> <SPAN class=sy0>==</SPAN> <SPAN class=st0>"*"</SPAN><SPAN class=br0>)</SPAN><BR>				<A href="http://www.php.net/array_push"><SPAN class=kw3>array_push</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$stack</SPAN><SPAN class=sy0>,</SPAN><SPAN class=re0>$firstOperand</SPAN> <SPAN class=sy0>*</SPAN> <SPAN class=re0>$secondOperand</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN><SPAN class=re0>$token</SPAN><SPAN class=br0>[</SPAN><SPAN class=re0>$i</SPAN><SPAN class=br0>]</SPAN> <SPAN class=sy0>==</SPAN> <SPAN class=st0>"/"</SPAN><SPAN class=br0>)</SPAN><BR>                <A href="http://www.php.net/array_push"><SPAN class=kw3>array_push</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$stack</SPAN><SPAN class=sy0>,</SPAN><SPAN class=re0>$firstOperand</SPAN> <SPAN class=sy0>/</SPAN> <SPAN class=re0>$secondOperand</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN><SPAN class=re0>$token</SPAN><SPAN class=br0>[</SPAN><SPAN class=re0>$i</SPAN><SPAN class=br0>]</SPAN> <SPAN class=sy0>==</SPAN> <SPAN class=st0>"-"</SPAN><SPAN class=br0>)</SPAN><BR>                <A href="http://www.php.net/array_push"><SPAN class=kw3>array_push</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$stack</SPAN><SPAN class=sy0>,</SPAN><SPAN class=re0>$firstOperand</SPAN> <SPAN class=sy0>-</SPAN> <SPAN class=re0>$secondOperand</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN><SPAN class=re0>$token</SPAN><SPAN class=br0>[</SPAN><SPAN class=re0>$i</SPAN><SPAN class=br0>]</SPAN> <SPAN class=sy0>==</SPAN> <SPAN class=st0>"+"</SPAN><SPAN class=br0>)</SPAN><BR>                <A href="http://www.php.net/array_push"><SPAN class=kw3>array_push</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$stack</SPAN><SPAN class=sy0>,</SPAN><SPAN class=re0>$firstOperand</SPAN> <SPAN class=sy0>+</SPAN> <SPAN class=re0>$secondOperand</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=kw1>else</SPAN> <SPAN class=kw1>if</SPAN> <SPAN class=br0>(</SPAN><SPAN class=re0>$token</SPAN><SPAN class=br0>[</SPAN><SPAN class=re0>$i</SPAN><SPAN class=br0>]</SPAN> <SPAN class=sy0>==</SPAN> <SPAN class=st0>"^"</SPAN><SPAN class=br0>)</SPAN><BR>                <A href="http://www.php.net/array_push"><SPAN class=kw3>array_push</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$stack</SPAN><SPAN class=sy0>,</SPAN><A href="http://www.php.net/pow"><SPAN class=kw3>pow</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$firstOperand</SPAN><SPAN class=sy0>,</SPAN><SPAN class=re0>$secondOperand</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=kw1>else</SPAN> <SPAN class=br0>{</SPAN><BR>                <A href="http://www.php.net/die"><SPAN class=kw3>die</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=st0>"Error"</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR>            <SPAN class=br0>}</SPAN><BR>        <SPAN class=br0>}</SPAN><BR>		<SPAN class=kw1>echo</SPAN> <SPAN class=st0>"<SPAN class=es1>\t</SPAN><SPAN class=es1>\t</SPAN>"</SPAN> <SPAN class=sy0>.</SPAN> <A href="http://www.php.net/implode"><SPAN class=kw3>implode</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=st0>" "</SPAN><SPAN class=sy0>,</SPAN> <SPAN class=re0>$stack</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy0>.</SPAN>  <SPAN class=st0>"<SPAN class=es1>\n</SPAN>"</SPAN><SPAN class=sy0>;</SPAN><BR>    <SPAN class=br0>}</SPAN><BR>    <SPAN class=kw1>return</SPAN> <A href="http://www.php.net/end"><SPAN class=kw3>end</SPAN></A><SPAN class=br0>(</SPAN><SPAN class=re0>$stack</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=br0>}</SPAN> <BR>&nbsp;<BR><SPAN class=kw1>echo</SPAN> <SPAN class=st0>"Compute Value: "</SPAN> <SPAN class=sy0>.</SPAN> rpn<SPAN class=br0>(</SPAN><SPAN class=st0>"3 4 2 * 1 5 - 2 3 ^ ^ / + "</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN><BR><SPAN class=sy1>?&gt;</SPAN><BR>&nbsp;</PRE>
<P>Output: </P><PRE>Input	Operation	Stack	after
3 	Push		3
4 	Push		3 4
2 	Push		3 4 2
* 	Operate		3 8
1 	Push		3 8 1
5 	Push		3 8 1 5
- 	Operate		3 8 -4
2 	Push		3 8 -4 2
3 	Push		3 8 -4 2 3
^ 	Operate		3 8 -4 8
^ 	Operate		3 8 65536
/ 	Operate		3 0.0001220703125
+ 	Operate		3.0001220703125
Compute Value: 3.0001220703125
</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: PicoLisp" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=26">edit</A>]</SPAN> 
<SPAN id=PicoLisp class=mw-headline><A title=Category:PicoLisp 
href="http://rosettacode.org/wiki/Category:PicoLisp">PicoLisp</A></SPAN></H2>
<P>This is an integer-only calculator: </P><PRE class="text highlighted_source">(de rpnCalculator (Str)<BR>   (let (^ **  Stack)  # Define '^' from the built-in '**'<BR>      (prinl "Token  Stack")<BR>      (for Token (str Str "*+-/\^")<BR>         (if (num? Token)<BR>            (push 'Stack @)<BR>            (set (cdr Stack)<BR>               ((intern Token) (cadr Stack) (pop 'Stack)) ) )<BR>         (prin Token)<BR>         (space 6)<BR>         (println Stack) )<BR>      (println (car Stack)) ) )</PRE>
<P>Test (note that the top-of-stack is in the left-most position): </P><PRE class="text highlighted_source">: (rpnCalculator "3 4 2 * 1 5 - 2 3 \^ \^ / +")<BR>Token  Stack<BR>3      (3)<BR>4      (4 3)<BR>2      (2 4 3)<BR>*      (8 3)<BR>1      (1 8 3)<BR>5      (5 1 8 3)<BR>-      (-4 8 3)<BR>2      (2 -4 8 3)<BR>3      (3 2 -4 8 3)<BR>^      (8 -4 8 3)<BR>^      (65536 8 3)<BR>/      (0 3)<BR>+      (3)<BR>3<BR>-&gt; 3</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: PL/I" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=27">edit</A>]</SPAN> 
<SPAN id=PL.2FI class=mw-headline><A title=Category:PL/I 
href="http://rosettacode.org/wiki/Category:PL/I">PL/I</A></SPAN></H2><PRE class="text highlighted_source">Calculator: procedure options (main);            /* 14 Sept. 2012 */<BR>   declare expression character (100) varying initial ('');<BR>   declare ch character (1);<BR>   declare (stack controlled, operand) float (18);<BR>   declare in file input;<BR>&nbsp;<BR>   open file (in) title ('/CALCULAT.DAT,type(text),recsize(100)');<BR>   on endfile (in) go to done;<BR>&nbsp;<BR>   put ('Stack contents:');<BR>main_loop:<BR>   do forever;<BR>      get file (in) edit (ch) (a(1));<BR>      expression = expression || ch;<BR>      if ch = ' ' then iterate;<BR>      select (ch);<BR>         when ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')<BR>            do; allocate stack; stack = ch; iterate main_loop; end;<BR>         when ('+') do; operand = stack; free stack; stack = stack +  operand; end;<BR>         when ('-') do; operand = stack; free stack; stack = stack -  operand; end;<BR>         when ('*') do; operand = stack; free stack; stack = stack *  operand; end;<BR>         when ('/') do; operand = stack; free stack; stack = stack /  operand; end;<BR>         when ('^') do; operand = stack; free stack; stack = stack ** operand; end;<BR>      end;<BR>      call show_stack;<BR>   end;<BR>&nbsp;<BR>done:<BR>   put skip list ('The reverse polish expression = ' || expression);<BR>   put skip list ('The evaluated expression = ' || stack);<BR>&nbsp;<BR>end Calculator;</PRE><PRE>Stack contents: 
      3.0000000000      8.0000000000
      3.0000000000      8.0000000000     -4.0000000000
      3.0000000000      8.0000000000     -4.0000000000      8.0000000000
      3.0000000000      8.0000000000  65536.0000000000
      3.0000000000      0.0001220703
      3.0001220703
The reverse polish expression = 3 4 2 * 1 5 - 2 3 ^ ^ / + 
The evaluated expression =  3.00012207031250000E+0000 
</PRE>
<P>The procedure to display the stack: </P><PRE>/* As the stack is push-down pop-up, need to pop it to see what's inside. */
show_stack: procedure;
   declare ts float (18) controlled;

   do while (allocation(stack) &gt; 0);
      allocate ts; ts = stack; free stack;
   end;
   put skip;
   do while (allocation(ts) &gt; 0);
      allocate stack; stack = ts; free ts; put edit (stack) (f(18,10));
   end;
end show_stack;</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Prolog" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=28">edit</A>]</SPAN> 
<SPAN id=Prolog class=mw-headline><A title=Category:Prolog 
href="http://rosettacode.org/wiki/Category:Prolog">Prolog</A></SPAN></H2>
<P>Works with SWI-Prolog. </P><PRE class="prolog highlighted_source">rpn<SPAN class=br0>(</SPAN>L<SPAN class=br0>)</SPAN> <SPAN class=sy1>:-</SPAN><BR>	writeln<SPAN class=br0>(</SPAN><SPAN class=st_h>'Token  Action                             Stack'</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>,</SPAN><BR>	parse<SPAN class=br0>(</SPAN>L<SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN><SPAN class=sy4>,</SPAN><SPAN class=br0>[</SPAN>X<SPAN class=br0>]</SPAN> <SPAN class=sy4>,</SPAN><SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>,</SPAN><BR>	format<SPAN class=br0>(</SPAN><SPAN class=st_h>'~nThe final output value is ~w~n'</SPAN><SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN>X<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>.</SPAN><BR>&nbsp;<BR><SPAN class=co1>% skip spaces</SPAN><BR>parse<SPAN class=br0>(</SPAN><SPAN class=br0>[</SPAN>X<SPAN class=sy5>|</SPAN>L<SPAN class=br0>]</SPAN><SPAN class=sy4>,</SPAN> St<SPAN class=br0>)</SPAN> <SPAN class=sy3>--</SPAN><SPAN class=sy6>&gt;</SPAN><BR>	<SPAN class=br0>{</SPAN>char_type<SPAN class=br0>(</SPAN>X<SPAN class=sy4>,</SPAN> white<SPAN class=br0>)</SPAN><SPAN class=br0>}</SPAN><SPAN class=sy4>,</SPAN><BR>	parse<SPAN class=br0>(</SPAN>L<SPAN class=sy4>,</SPAN> St<SPAN class=br0>)</SPAN><SPAN class=sy4>.</SPAN><BR>&nbsp;<BR><SPAN class=co1>% detect operators</SPAN><BR>parse<SPAN class=br0>(</SPAN><SPAN class=br0>[</SPAN><A href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><SPAN class=kw1>Op</SPAN></A><SPAN class=sy5>|</SPAN>L<SPAN class=br0>]</SPAN><SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN>Y<SPAN class=sy4>,</SPAN> X <SPAN class=sy5>|</SPAN> St<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN> <SPAN class=sy3>--</SPAN><SPAN class=sy6>&gt;</SPAN><BR>	<SPAN class=br0>{</SPAN> is_op<SPAN class=br0>(</SPAN><A href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><SPAN class=kw1>Op</SPAN></A><SPAN class=sy4>,</SPAN> X<SPAN class=sy4>,</SPAN> Y<SPAN class=sy4>,</SPAN> V<SPAN class=br0>)</SPAN><SPAN class=sy4>,</SPAN><BR>	  writef<SPAN class=br0>(</SPAN><SPAN class=st_h>'   &nbsp;%s'</SPAN><SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN><SPAN class=br0>[</SPAN><A href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><SPAN class=kw1>Op</SPAN></A><SPAN class=br0>]</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>,</SPAN><BR>	  with_output_to<SPAN class=br0>(</SPAN><A href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><SPAN class=kw1>atom</SPAN></A><SPAN class=br0>(</SPAN>Str2<SPAN class=br0>)</SPAN><SPAN class=sy4>,</SPAN> writef<SPAN class=br0>(</SPAN><SPAN class=st_h>'Apply&nbsp;%s on top of stack'</SPAN><SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN><SPAN class=br0>[</SPAN><A href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><SPAN class=kw1>Op</SPAN></A><SPAN class=br0>]</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>,</SPAN><BR>	  writef<SPAN class=br0>(</SPAN><SPAN class=st_h>' &nbsp;%35l'</SPAN><SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN>Str2<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>,</SPAN><BR>	  writef<SPAN class=br0>(</SPAN><SPAN class=st_h>'%w\n'</SPAN><SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN><SPAN class=br0>[</SPAN>V <SPAN class=sy5>|</SPAN> St<SPAN class=br0>]</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>}</SPAN><SPAN class=sy4>,</SPAN><BR>	parse<SPAN class=br0>(</SPAN>L<SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN>V <SPAN class=sy5>|</SPAN> St<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>.</SPAN><BR>&nbsp;<BR><SPAN class=co1>% detect number</SPAN><BR>parse<SPAN class=br0>(</SPAN><SPAN class=br0>[</SPAN>N<SPAN class=sy5>|</SPAN>L<SPAN class=br0>]</SPAN><SPAN class=sy4>,</SPAN> St<SPAN class=br0>)</SPAN> <SPAN class=sy3>--</SPAN><SPAN class=sy6>&gt;</SPAN><BR>	<SPAN class=br0>{</SPAN>char_type<SPAN class=br0>(</SPAN>N<SPAN class=sy4>,</SPAN> digit<SPAN class=br0>)</SPAN><SPAN class=br0>}</SPAN><SPAN class=sy4>,</SPAN><BR>	parse_number<SPAN class=br0>(</SPAN>L<SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN>N<SPAN class=br0>]</SPAN><SPAN class=sy4>,</SPAN> St<SPAN class=br0>)</SPAN><SPAN class=sy4>.</SPAN><BR>&nbsp;<BR><SPAN class=co1>% string is finished</SPAN><BR>parse<SPAN class=br0>(</SPAN><SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN><SPAN class=sy4>,</SPAN> St<SPAN class=br0>)</SPAN> <SPAN class=sy3>--</SPAN><SPAN class=sy6>&gt;</SPAN> St<SPAN class=sy4>.</SPAN><BR>&nbsp;<BR><SPAN class=co1>% compute numbers</SPAN><BR>parse_number<SPAN class=br0>(</SPAN><SPAN class=br0>[</SPAN>N<SPAN class=sy5>|</SPAN>L<SPAN class=br0>]</SPAN><SPAN class=sy4>,</SPAN> NC<SPAN class=sy4>,</SPAN> St<SPAN class=br0>)</SPAN> <SPAN class=sy3>--</SPAN><SPAN class=sy6>&gt;</SPAN><BR>	<SPAN class=br0>{</SPAN>char_type<SPAN class=br0>(</SPAN>N<SPAN class=sy4>,</SPAN> digit<SPAN class=br0>)</SPAN><SPAN class=br0>}</SPAN><SPAN class=sy4>,</SPAN><BR>	parse_number<SPAN class=br0>(</SPAN>L<SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN>N<SPAN class=sy5>|</SPAN>NC<SPAN class=br0>]</SPAN><SPAN class=sy4>,</SPAN> St<SPAN class=br0>)</SPAN><SPAN class=sy4>.</SPAN><BR>&nbsp;<BR>parse_number<SPAN class=br0>(</SPAN>S<SPAN class=sy4>,</SPAN> NC<SPAN class=sy4>,</SPAN> St<SPAN class=br0>)</SPAN> <SPAN class=sy3>--</SPAN><SPAN class=sy6>&gt;</SPAN><BR>	<SPAN class=br0>{</SPAN> reverse<SPAN class=br0>(</SPAN>NC<SPAN class=sy4>,</SPAN> RNC<SPAN class=br0>)</SPAN><SPAN class=sy4>,</SPAN><BR>	  <A href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><SPAN class=kw1>number_chars</SPAN></A><SPAN class=br0>(</SPAN>V<SPAN class=sy4>,</SPAN> RNC<SPAN class=br0>)</SPAN><SPAN class=sy4>,</SPAN><BR>	  writef<SPAN class=br0>(</SPAN><SPAN class=st_h>'%5r'</SPAN><SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN>V<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>,</SPAN><BR>	  with_output_to<SPAN class=br0>(</SPAN><A href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><SPAN class=kw1>atom</SPAN></A><SPAN class=br0>(</SPAN>Str2<SPAN class=br0>)</SPAN><SPAN class=sy4>,</SPAN> writef<SPAN class=br0>(</SPAN><SPAN class=st_h>'Push num&nbsp;%w on top of stack'</SPAN><SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN>V<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>,</SPAN><BR>	  writef<SPAN class=br0>(</SPAN><SPAN class=st_h>' &nbsp;%35l'</SPAN><SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN>Str2<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>,</SPAN><BR>	  writef<SPAN class=br0>(</SPAN><SPAN class=st_h>'%w\n'</SPAN><SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN><SPAN class=br0>[</SPAN>V <SPAN class=sy5>|</SPAN> St<SPAN class=br0>]</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>}</SPAN><SPAN class=sy4>,</SPAN><BR>	parse<SPAN class=br0>(</SPAN>S<SPAN class=sy4>,</SPAN> <SPAN class=br0>[</SPAN>V<SPAN class=sy5>|</SPAN>St<SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy4>.</SPAN><BR>&nbsp;<BR><SPAN class=co1>% defining operations</SPAN><BR>is_op<SPAN class=br0>(</SPAN><SPAN class=nu0>42</SPAN><SPAN class=sy4>,</SPAN> X<SPAN class=sy4>,</SPAN> Y<SPAN class=sy4>,</SPAN> V<SPAN class=br0>)</SPAN> <SPAN class=sy1>:-</SPAN>	V <A href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><SPAN class=kw1>is</SPAN></A> X<SPAN class=sy3>*</SPAN>Y<SPAN class=sy4>.</SPAN><BR>is_op<SPAN class=br0>(</SPAN><SPAN class=nu0>43</SPAN><SPAN class=sy4>,</SPAN> X<SPAN class=sy4>,</SPAN> Y<SPAN class=sy4>,</SPAN> V<SPAN class=br0>)</SPAN> <SPAN class=sy1>:-</SPAN>	V <A href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><SPAN class=kw1>is</SPAN></A> X<SPAN class=sy3>+</SPAN>Y<SPAN class=sy4>.</SPAN><BR>is_op<SPAN class=br0>(</SPAN><SPAN class=nu0>45</SPAN><SPAN class=sy4>,</SPAN> X<SPAN class=sy4>,</SPAN> Y<SPAN class=sy4>,</SPAN> V<SPAN class=br0>)</SPAN> <SPAN class=sy1>:-</SPAN>	V <A href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><SPAN class=kw1>is</SPAN></A> X<SPAN class=sy3>-</SPAN>Y<SPAN class=sy4>.</SPAN><BR>is_op<SPAN class=br0>(</SPAN><SPAN class=nu0>47</SPAN><SPAN class=sy4>,</SPAN> X<SPAN class=sy4>,</SPAN> Y<SPAN class=sy4>,</SPAN> V<SPAN class=br0>)</SPAN> <SPAN class=sy1>:-</SPAN>	V <A href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><SPAN class=kw1>is</SPAN></A> X<SPAN class=sy3>/</SPAN>Y<SPAN class=sy4>.</SPAN><BR>is_op<SPAN class=br0>(</SPAN><SPAN class=nu0>94</SPAN><SPAN class=sy4>,</SPAN> X<SPAN class=sy4>,</SPAN> Y<SPAN class=sy4>,</SPAN> V<SPAN class=br0>)</SPAN> <SPAN class=sy1>:-</SPAN>	V <A href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><SPAN class=kw1>is</SPAN></A> X<SPAN class=sy3>**</SPAN>Y<SPAN class=sy4>.</SPAN></PRE>
<P>Output&nbsp;: </P><PRE>5&nbsp;?- rpn("3 4 2 * 1 5 - 2 3 ^ ^ / +").
Token  Action                             Stack
    3  'Push num 3 on top of stack'       [3]
    4  'Push num 4 on top of stack'       [4,3]
    2  'Push num 2 on top of stack'       [2,4,3]
    *  'Apply * on top of stack'          [8,3]
    1  'Push num 1 on top of stack'       [1,8,3]
    5  'Push num 5 on top of stack'       [5,1,8,3]
    -  'Apply - on top of stack'          [-4,8,3]
    2  'Push num 2 on top of stack'       [2,-4,8,3]
    3  'Push num 3 on top of stack'       [3,2,-4,8,3]
    ^  'Apply ^ on top of stack'          [8,-4,8,3]
    ^  'Apply ^ on top of stack'          [65536,8,3]
    /  'Apply / on top of stack'          [0.0001220703125,3]
    +  'Apply + on top of stack'          [3.0001220703125]

The final output value is 3.0001220703125
true .</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Python" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=29">edit</A>]</SPAN> 
<SPAN id=Python class=mw-headline><A title=Category:Python 
href="http://rosettacode.org/wiki/Category:Python">Python</A></SPAN></H2><PRE class="python highlighted_source"><SPAN class=kw1>def</SPAN> op_pow<SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN>:<BR>    b <SPAN class=sy0>=</SPAN> stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> a <SPAN class=sy0>=</SPAN> stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>    stack.<SPAN class=me1>append</SPAN><SPAN class=br0>(</SPAN> a ** b <SPAN class=br0>)</SPAN><BR><SPAN class=kw1>def</SPAN> op_mul<SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN>:<BR>    b <SPAN class=sy0>=</SPAN> stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> a <SPAN class=sy0>=</SPAN> stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>    stack.<SPAN class=me1>append</SPAN><SPAN class=br0>(</SPAN> a * b <SPAN class=br0>)</SPAN><BR><SPAN class=kw1>def</SPAN> op_div<SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN>:<BR>    b <SPAN class=sy0>=</SPAN> stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> a <SPAN class=sy0>=</SPAN> stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>    stack.<SPAN class=me1>append</SPAN><SPAN class=br0>(</SPAN> a / b <SPAN class=br0>)</SPAN><BR><SPAN class=kw1>def</SPAN> op_add<SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN>:<BR>    b <SPAN class=sy0>=</SPAN> stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> a <SPAN class=sy0>=</SPAN> stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>    stack.<SPAN class=me1>append</SPAN><SPAN class=br0>(</SPAN> a + b <SPAN class=br0>)</SPAN><BR><SPAN class=kw1>def</SPAN> op_sub<SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN>:<BR>    b <SPAN class=sy0>=</SPAN> stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>;</SPAN> a <SPAN class=sy0>=</SPAN> stack.<SPAN class=me1>pop</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>    stack.<SPAN class=me1>append</SPAN><SPAN class=br0>(</SPAN> a - b <SPAN class=br0>)</SPAN><BR><SPAN class=kw1>def</SPAN> op_num<SPAN class=br0>(</SPAN>stack<SPAN class=sy0>,</SPAN> num<SPAN class=br0>)</SPAN>:<BR>    stack.<SPAN class=me1>append</SPAN><SPAN class=br0>(</SPAN> num <SPAN class=br0>)</SPAN><BR>&nbsp;<BR>ops <SPAN class=sy0>=</SPAN> <SPAN class=br0>{</SPAN><BR> <SPAN class=st0>'^'</SPAN>: op_pow<SPAN class=sy0>,</SPAN><BR> <SPAN class=st0>'*'</SPAN>: op_mul<SPAN class=sy0>,</SPAN><BR> <SPAN class=st0>'/'</SPAN>: op_div<SPAN class=sy0>,</SPAN><BR> <SPAN class=st0>'+'</SPAN>: op_add<SPAN class=sy0>,</SPAN><BR> <SPAN class=st0>'-'</SPAN>: op_sub<SPAN class=sy0>,</SPAN><BR> <SPAN class=br0>}</SPAN><BR>&nbsp;<BR><SPAN class=kw1>def</SPAN> get_input<SPAN class=br0>(</SPAN>inp <SPAN class=sy0>=</SPAN> <SPAN class=kw2>None</SPAN><SPAN class=br0>)</SPAN>:<BR>    <SPAN class=st0>'Inputs an expression and returns list of tokens'</SPAN><BR>&nbsp;<BR>    <SPAN class=kw1>if</SPAN> inp <SPAN class=kw1>is</SPAN> <SPAN class=kw2>None</SPAN>:<BR>        inp <SPAN class=sy0>=</SPAN> <SPAN class=kw2>input</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>'expression: '</SPAN><SPAN class=br0>)</SPAN><BR>    tokens <SPAN class=sy0>=</SPAN> inp.<SPAN class=me1>strip</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN>.<SPAN class=me1>split</SPAN><SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN><BR>    <SPAN class=kw1>return</SPAN> tokens<BR>&nbsp;<BR><SPAN class=kw1>def</SPAN> rpn_calc<SPAN class=br0>(</SPAN>tokens<SPAN class=br0>)</SPAN>:<BR>    stack <SPAN class=sy0>=</SPAN> <SPAN class=br0>[</SPAN><SPAN class=br0>]</SPAN><BR>    table <SPAN class=sy0>=</SPAN> <SPAN class=br0>[</SPAN><SPAN class=st0>'TOKEN,ACTION,STACK'</SPAN>.<SPAN class=me1>split</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>','</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>]</SPAN><BR>    <SPAN class=kw1>for</SPAN> <SPAN class=kw3>token</SPAN> <SPAN class=kw1>in</SPAN> tokens:<BR>        <SPAN class=kw1>if</SPAN> <SPAN class=kw3>token</SPAN> <SPAN class=kw1>in</SPAN> ops:<BR>            action <SPAN class=sy0>=</SPAN> <SPAN class=st0>'Apply op to top of stack'</SPAN><BR>            ops<SPAN class=br0>[</SPAN><SPAN class=kw3>token</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN><BR>            table.<SPAN class=me1>append</SPAN><SPAN class=br0>(</SPAN> <SPAN class=br0>(</SPAN><SPAN class=kw3>token</SPAN><SPAN class=sy0>,</SPAN> action<SPAN class=sy0>,</SPAN> <SPAN class=st0>' '</SPAN>.<SPAN class=me1>join</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw2>str</SPAN><SPAN class=br0>(</SPAN>s<SPAN class=br0>)</SPAN> <SPAN class=kw1>for</SPAN> s <SPAN class=kw1>in</SPAN> stack<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>)</SPAN><BR>        <SPAN class=kw1>else</SPAN>:<BR>            action <SPAN class=sy0>=</SPAN> <SPAN class=st0>'Push num onto top of stack'</SPAN><BR>            op_num<SPAN class=br0>(</SPAN>stack<SPAN class=sy0>,</SPAN> <SPAN class=kw2>eval</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw3>token</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>            table.<SPAN class=me1>append</SPAN><SPAN class=br0>(</SPAN> <SPAN class=br0>(</SPAN><SPAN class=kw3>token</SPAN><SPAN class=sy0>,</SPAN> action<SPAN class=sy0>,</SPAN> <SPAN class=st0>' '</SPAN>.<SPAN class=me1>join</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw2>str</SPAN><SPAN class=br0>(</SPAN>s<SPAN class=br0>)</SPAN> <SPAN class=kw1>for</SPAN> s <SPAN class=kw1>in</SPAN> stack<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN> <SPAN class=br0>)</SPAN><BR>    <SPAN class=kw1>return</SPAN> table<BR>&nbsp;<BR><SPAN class=kw1>if</SPAN> __name__ <SPAN class=sy0>==</SPAN> <SPAN class=st0>'__main__'</SPAN>:<BR>    rpn <SPAN class=sy0>=</SPAN> <SPAN class=st0>'3 4 2 * 1 5 - 2 3 ^ ^ / +'</SPAN><BR>    <SPAN class=kw1>print</SPAN><SPAN class=br0>(</SPAN> <SPAN class=st0>'For RPN expression:&nbsp;%r<SPAN class=es0>\n</SPAN>'</SPAN>&nbsp;% rpn <SPAN class=br0>)</SPAN><BR>    rp <SPAN class=sy0>=</SPAN> rpn_calc<SPAN class=br0>(</SPAN>get_input<SPAN class=br0>(</SPAN>rpn<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>    maxcolwidths <SPAN class=sy0>=</SPAN> <SPAN class=br0>[</SPAN><SPAN class=kw2>max</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw2>len</SPAN><SPAN class=br0>(</SPAN>y<SPAN class=br0>)</SPAN> <SPAN class=kw1>for</SPAN> y <SPAN class=kw1>in</SPAN> x<SPAN class=br0>)</SPAN> <SPAN class=kw1>for</SPAN> x <SPAN class=kw1>in</SPAN> <SPAN class=kw2>zip</SPAN><SPAN class=br0>(</SPAN>*rp<SPAN class=br0>)</SPAN><SPAN class=br0>]</SPAN><BR>    row <SPAN class=sy0>=</SPAN> rp<SPAN class=br0>[</SPAN><SPAN class=nu0>0</SPAN><SPAN class=br0>]</SPAN><BR>    <SPAN class=kw1>print</SPAN><SPAN class=br0>(</SPAN> <SPAN class=st0>' '</SPAN>.<SPAN class=me1>join</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>'{cell:^{width}}'</SPAN>.<SPAN class=me1>format</SPAN><SPAN class=br0>(</SPAN>width<SPAN class=sy0>=</SPAN>width<SPAN class=sy0>,</SPAN> cell<SPAN class=sy0>=</SPAN>cell<SPAN class=br0>)</SPAN> <SPAN class=kw1>for</SPAN> <SPAN class=br0>(</SPAN>width<SPAN class=sy0>,</SPAN> cell<SPAN class=br0>)</SPAN> <SPAN class=kw1>in</SPAN> <SPAN class=kw2>zip</SPAN><SPAN class=br0>(</SPAN>maxcolwidths<SPAN class=sy0>,</SPAN> row<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>    <SPAN class=kw1>for</SPAN> row <SPAN class=kw1>in</SPAN> rp<SPAN class=br0>[</SPAN><SPAN class=nu0>1</SPAN>:<SPAN class=br0>]</SPAN>:<BR>        <SPAN class=kw1>print</SPAN><SPAN class=br0>(</SPAN> <SPAN class=st0>' '</SPAN>.<SPAN class=me1>join</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>'{cell:&lt;{width}}'</SPAN>.<SPAN class=me1>format</SPAN><SPAN class=br0>(</SPAN>width<SPAN class=sy0>=</SPAN>width<SPAN class=sy0>,</SPAN> cell<SPAN class=sy0>=</SPAN>cell<SPAN class=br0>)</SPAN> <SPAN class=kw1>for</SPAN> <SPAN class=br0>(</SPAN>width<SPAN class=sy0>,</SPAN> cell<SPAN class=br0>)</SPAN> <SPAN class=kw1>in</SPAN> <SPAN class=kw2>zip</SPAN><SPAN class=br0>(</SPAN>maxcolwidths<SPAN class=sy0>,</SPAN> row<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN><BR>&nbsp;<BR>    <SPAN class=kw1>print</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>'<SPAN class=es0>\n</SPAN> The final output value is:&nbsp;%r'</SPAN>&nbsp;% rp<SPAN class=br0>[</SPAN>-<SPAN class=nu0>1</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>[</SPAN><SPAN class=nu0>2</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>)</SPAN></PRE>
<DL>
  <DT>Output</DT>
  <DD></DD></DL><PRE>For RPN expression: '3 4 2 * 1 5 - 2 3 ^ ^ / +'

TOKEN           ACTION                 STACK      
3     Push num onto top of stack 3                
4     Push num onto top of stack 3 4              
2     Push num onto top of stack 3 4 2            
*     Apply op to top of stack   3 8              
1     Push num onto top of stack 3 8 1            
5     Push num onto top of stack 3 8 1 5          
-     Apply op to top of stack   3 8 -4           
2     Push num onto top of stack 3 8 -4 2         
3     Push num onto top of stack 3 8 -4 2 3       
^     Apply op to top of stack   3 8 -4 8         
^     Apply op to top of stack   3 8 65536        
/     Apply op to top of stack   3 0.0001220703125
+     Apply op to top of stack   3.0001220703125  

 The final output value is: '3.0001220703125'</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Racket" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=30">edit</A>]</SPAN> 
<SPAN id=Racket class=mw-headline><A title=Category:Racket 
href="http://rosettacode.org/wiki/Category:Racket">Racket</A></SPAN></H2><PRE class="text highlighted_source">&nbsp;<BR>#lang racket<BR>&nbsp;<BR>(define (calculate-RPN expr)<BR>  (for/fold ([stack '()]) ([token expr])<BR>    (printf "~a\t -&gt; ~a~N" token stack)<BR>    (match* (token stack)<BR>     [((? number? n) s) (cons n s)]<BR>     [('+ (list x y s ___)) (cons (+ x y) s)]<BR>     [('- (list x y s ___)) (cons (- y x) s)]<BR>     [('* (list x y s ___)) (cons (* x y) s)]<BR>     [('/ (list x y s ___)) (cons (/ y x) s)]<BR>     [('^ (list x y s ___)) (cons (expt y x) s)]<BR>     [(x s) (error "calculate-RPN: Cannot calculate the expression:" <BR>                   (reverse (cons x s)))])))<BR>&nbsp;<BR>&nbsp;</PRE>
<P>Test case </P><PRE>-&gt; (calculate-RPN '(3.0 4 2 * 1 5 - 2 3 ^ ^ / +))
3.0	 -&gt; ()
4	 -&gt; (3.0)
2	 -&gt; (4 3.0)
*	 -&gt; (2 4 3.0)
1	 -&gt; (8 3.0)
5	 -&gt; (1 8 3.0)
-	 -&gt; (5 1 8 3.0)
2	 -&gt; (-4 8 3.0)
3	 -&gt; (2 -4 8 3.0)
^	 -&gt; (3 2 -4 8 3.0)
^	 -&gt; (8 -4 8 3.0)
/	 -&gt; (65536 8 3.0)
+	 -&gt; (1/8192 3.0)
3.0001220703125
</PRE>
<P>Reading from a string: </P><PRE class="text highlighted_source">&nbsp;<BR>(calculate-RPN (in-port read (open-input-string "3.0 4 2 * 1 5 - 2 3 ^ ^ / +")))<BR>&nbsp;</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: REXX" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=31">edit</A>]</SPAN> 
<SPAN id=REXX class=mw-headline><A title=Category:REXX 
href="http://rosettacode.org/wiki/Category:REXX">REXX</A></SPAN></H2>
<H3><SPAN class=editsection>[<A title="Edit section: version 1" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=32">edit</A>]</SPAN> 
<SPAN id=version_1 class=mw-headline>version 1</SPAN></H3><PRE class="rexx highlighted_source"><SPAN class=coMULTI>/* REXX ***************************************************************<BR>* 09.11.2012 Walter Pachl  translates from PL/I<BR>**********************************************************************/</SPAN><BR>fid=<SPAN class=st0>'rpl.txt'</SPAN><BR>ex=<SPAN class=kw2>linein</SPAN><SPAN class=br0>(</SPAN>fid<SPAN class=br0>)</SPAN><BR><SPAN class=kw1>Say</SPAN> <SPAN class=st0>'Input:'</SPAN> ex<BR><SPAN class=coMULTI>/* ex=' 3 4 2 * 1 5 - 2 3 ^ ^ / +' */</SPAN><BR><SPAN class=kw1>Numeric</SPAN> <SPAN class=kw2>Digits</SPAN> <SPAN class=nu0>15</SPAN><BR>expr=<SPAN class=st0>''</SPAN><BR>st<SPAN class=sy0>.</SPAN>=<SPAN class=nu0>0</SPAN><BR><SPAN class=kw1>Say</SPAN> <SPAN class=st0>'Stack contents:'</SPAN><BR><SPAN class=kw1>do</SPAN> <SPAN class=kw2>While</SPAN> ex<SPAN class=sy0>&lt;&gt;</SPAN><SPAN class=st0>''</SPAN><BR>  <SPAN class=kw1>Parse</SPAN> <SPAN class=kw2>Var</SPAN> ex ch +<SPAN class=nu0>1</SPAN> ex<BR>  expr=expr<SPAN class=sy0>||</SPAN>ch;<BR>  <SPAN class=kw1>if</SPAN> ch<SPAN class=sy0>&lt;&gt;</SPAN><SPAN class=st0>' '</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN><BR>    <SPAN class=kw1>select</SPAN><BR>      <SPAN class=kw3>When</SPAN> <SPAN class=kw6>pos</SPAN><SPAN class=br0>(</SPAN>ch,<SPAN class=st0>'0123456789'</SPAN><SPAN class=br0>)</SPAN><SPAN class=sy0>&gt;</SPAN><SPAN class=nu0>0</SPAN> <SPAN class=kw3>Then</SPAN> <SPAN class=kw1>Do</SPAN><BR>        <SPAN class=kw1>Call</SPAN> stack ch<BR>        <SPAN class=kw1>Iterate</SPAN><BR>        <SPAN class=kw3>End</SPAN><BR>      <SPAN class=kw3>when</SPAN> ch=<SPAN class=st0>'+'</SPAN> <SPAN class=kw3>Then</SPAN> <SPAN class=kw1>do</SPAN>; operand=getstack<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN>; st<SPAN class=sy0>.</SPAN>sti = st<SPAN class=sy0>.</SPAN>sti +  operand; <SPAN class=kw3>end</SPAN>;<BR>      <SPAN class=kw3>when</SPAN> ch=<SPAN class=st0>'-'</SPAN> <SPAN class=kw3>Then</SPAN> <SPAN class=kw1>do</SPAN>; operand=getstack<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN>; st<SPAN class=sy0>.</SPAN>sti = st<SPAN class=sy0>.</SPAN>sti -  operand; <SPAN class=kw3>end</SPAN>;<BR>      <SPAN class=kw3>when</SPAN> ch=<SPAN class=st0>'*'</SPAN> <SPAN class=kw3>Then</SPAN> <SPAN class=kw1>do</SPAN>; operand=getstack<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN>; st<SPAN class=sy0>.</SPAN>sti = st<SPAN class=sy0>.</SPAN>sti <SPAN class=sy0>*</SPAN>  operand; <SPAN class=kw3>end</SPAN>;<BR>      <SPAN class=kw3>when</SPAN> ch=<SPAN class=st0>'/'</SPAN> <SPAN class=kw3>Then</SPAN> <SPAN class=kw1>do</SPAN>; operand=getstack<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN>; st<SPAN class=sy0>.</SPAN>sti = st<SPAN class=sy0>.</SPAN>sti <SPAN class=sy0>/</SPAN>  operand; <SPAN class=kw3>end</SPAN>;<BR>      <SPAN class=kw3>when</SPAN> ch=<SPAN class=st0>'^'</SPAN> <SPAN class=kw3>Then</SPAN> <SPAN class=kw1>do</SPAN>; operand=getstack<SPAN class=br0>(</SPAN><SPAN class=br0>)</SPAN>; st<SPAN class=sy0>.</SPAN>sti = st<SPAN class=sy0>.</SPAN>sti <SPAN class=sy0>**</SPAN> operand; <SPAN class=kw3>end</SPAN>;<BR>      <SPAN class=kw3>end</SPAN>;<BR>    <SPAN class=kw1>call</SPAN> show_stack<BR>    <SPAN class=kw3>end</SPAN><BR>  <SPAN class=kw3>end</SPAN><BR><SPAN class=kw1>Say</SPAN> <SPAN class=st0>'The reverse polish expression = '</SPAN>expr<BR><SPAN class=kw1>Say</SPAN> <SPAN class=st0>'The evaluated expression = '</SPAN>st<SPAN class=sy0>.</SPAN>1<BR><SPAN class=kw1>Exit</SPAN><BR>stack: <SPAN class=kw1>Procedure</SPAN> <SPAN class=kw1>Expose</SPAN> st<SPAN class=sy0>.</SPAN><BR><SPAN class=coMULTI>/* put the argument on top of the stack */</SPAN><BR>  z=st<SPAN class=sy0>.</SPAN>0+<SPAN class=nu0>1</SPAN><BR>  st<SPAN class=sy0>.</SPAN>z=<SPAN class=kw1>arg</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN><BR>  st<SPAN class=sy0>.</SPAN>0=z<BR>  <SPAN class=kw1>Return</SPAN><BR>getstack: <SPAN class=kw1>Procedure</SPAN> <SPAN class=kw1>Expose</SPAN> st<SPAN class=sy0>.</SPAN> sti<BR><SPAN class=coMULTI>/* remove and return the stack's top element */</SPAN><BR>  z=st<SPAN class=sy0>.</SPAN>0<BR>  stk=st<SPAN class=sy0>.</SPAN>z<BR>  st<SPAN class=sy0>.</SPAN>0=st<SPAN class=sy0>.</SPAN>0-<SPAN class=nu0>1</SPAN><BR>  sti=st<SPAN class=sy0>.</SPAN>0<BR>  <SPAN class=kw1>Return</SPAN> stk<BR>show_stack: <SPAN class=kw1>procedure</SPAN> <SPAN class=kw1>Expose</SPAN> st<SPAN class=sy0>.</SPAN><BR><SPAN class=coMULTI>/* show the stack's contents */</SPAN><BR>  ol=<SPAN class=st0>''</SPAN><BR>  <SPAN class=kw1>do</SPAN> i=<SPAN class=nu0>1</SPAN> <SPAN class=kw2>To</SPAN> st<SPAN class=sy0>.</SPAN>0<BR>    ol=ol <SPAN class=kw6>format</SPAN><SPAN class=br0>(</SPAN>st<SPAN class=sy0>.</SPAN>i,<SPAN class=nu0>5</SPAN>,<SPAN class=nu0>10</SPAN><SPAN class=br0>)</SPAN><BR>    <SPAN class=kw3>End</SPAN><BR>  <SPAN class=kw1>Say</SPAN> ol<BR>  <SPAN class=kw1>Return</SPAN></PRE>
<P>Output: </P><PRE>Input: 3 4 2 * 1 5 - 2 3 ^ ^ / +
Stack contents:
     3.0000000000     8.0000000000
     3.0000000000     8.0000000000    -4.0000000000
     3.0000000000     8.0000000000    -4.0000000000     8.0000000000
     3.0000000000     8.0000000000 65536.0000000000
     3.0000000000     0.0001220703
     3.0001220703
The reverse polish expression = 3 4 2 * 1 5 - 2 3 ^ ^ / +
The evaluated expression = 3.0001220703125
</PRE>
<H3><SPAN class=editsection>[<A title="Edit section: version 2" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=33">edit</A>]</SPAN> 
<SPAN id=version_2 class=mw-headline>version 2</SPAN></H3>
<P>This REXX version handles tokens (not characters). </P><PRE class="rexx highlighted_source"><SPAN class=coMULTI>/*REXX program  evaluates  a  Reverse Polish notation (RPN)  expression.*/</SPAN><BR><SPAN class=kw1>parse</SPAN> <SPAN class=kw1>arg</SPAN> x;    <SPAN class=kw1>if</SPAN> x=<SPAN class=st0>''</SPAN>  <SPAN class=kw3>then</SPAN> x = <SPAN class=st0>'3 4 2 * 1 5 - 2 3 ^ ^ / +'</SPAN>;        ox=x<BR>showSteps=<SPAN class=nu0>1</SPAN>               <SPAN class=coMULTI>/*set to 0 (zero) if working steps not wanted.*/</SPAN><BR>x=<SPAN class=kw6>space</SPAN><SPAN class=br0>(</SPAN>x<SPAN class=br0>)</SPAN>;    tokens=<SPAN class=kw6>words</SPAN><SPAN class=br0>(</SPAN>x<SPAN class=br0>)</SPAN><BR>  <SPAN class=kw1>do</SPAN> i=<SPAN class=nu0>1</SPAN>  <SPAN class=kw2>for</SPAN> tokens;  @<SPAN class=sy0>.</SPAN>i=<SPAN class=kw6>word</SPAN><SPAN class=br0>(</SPAN>x,i<SPAN class=br0>)</SPAN>;  <SPAN class=kw3>end</SPAN> <SPAN class=coMULTI>/*i*/</SPAN>   <SPAN class=coMULTI>/*assign input tokens*/</SPAN><BR>L=<SPAN class=kw6>max</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>20</SPAN>,<SPAN class=kw6>length</SPAN><SPAN class=br0>(</SPAN>x<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN>                    <SPAN class=coMULTI>/*use 20 for the min show width. */</SPAN><BR><SPAN class=kw1>numeric</SPAN> <SPAN class=kw2>digits</SPAN> L                       <SPAN class=coMULTI>/*ensure enough digits for answer*/</SPAN><BR><SPAN class=kw1>say</SPAN> <SPAN class=kw6>center</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>'operand'</SPAN>,L,<SPAN class=st0>'─'</SPAN><SPAN class=br0>)</SPAN> <SPAN class=kw6>center</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>'stack'</SPAN>,L<SPAN class=sy0>*</SPAN><SPAN class=nu0>2</SPAN>,<SPAN class=st0>'─'</SPAN><SPAN class=br0>)</SPAN>;     e=<SPAN class=st0>'***error!***'</SPAN><BR>op=<SPAN class=st0>'- + / * ^'</SPAN>;             add2s=<SPAN class=st0>'add to───►stack'</SPAN>;     z=;       stack=<BR>&nbsp;<BR>  <SPAN class=kw1>do</SPAN> #=<SPAN class=nu0>1</SPAN>  <SPAN class=kw2>for</SPAN> tokens;  &nbsp;?=@<SPAN class=sy0>.</SPAN>#;  &nbsp;??=?  <SPAN class=coMULTI>/*process each token from @. list*/</SPAN><BR>  w=<SPAN class=kw6>words</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN>                              <SPAN class=coMULTI>/*stack count (# entries).*/</SPAN><BR>  <SPAN class=kw1>if</SPAN> <SPAN class=kw6>datatype</SPAN><SPAN class=br0>(</SPAN>?,<SPAN class=st0>'N'</SPAN><SPAN class=br0>)</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN>; stack=stack&nbsp;?; <SPAN class=kw1>call</SPAN> show add2s; <SPAN class=kw1>iterate</SPAN>; <SPAN class=kw3>end</SPAN><BR>  <SPAN class=kw1>if</SPAN>&nbsp;?==<SPAN class=st0>'^'</SPAN>          <SPAN class=kw3>then</SPAN>&nbsp;??=<SPAN class=st0>"**"</SPAN>      <SPAN class=coMULTI>/*REXXify  ^ ──► **  (make legal)*/</SPAN><BR>  <SPAN class=kw1>interpret</SPAN> <SPAN class=st0>'y='</SPAN> <SPAN class=kw6>word</SPAN><SPAN class=br0>(</SPAN>stack,w-<SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN>&nbsp;?? <SPAN class=kw6>word</SPAN><SPAN class=br0>(</SPAN>stack,w<SPAN class=br0>)</SPAN>             <SPAN class=coMULTI>/*compute.*/</SPAN><BR>  <SPAN class=kw1>if</SPAN> <SPAN class=kw6>datatype</SPAN><SPAN class=br0>(</SPAN>y,<SPAN class=st0>'W'</SPAN><SPAN class=br0>)</SPAN> <SPAN class=kw3>then</SPAN> y=y<SPAN class=sy0>/</SPAN><SPAN class=nu0>1</SPAN>        <SPAN class=coMULTI>/*normalize the number with  ÷   */</SPAN><BR>  _=<SPAN class=kw6>subword</SPAN><SPAN class=br0>(</SPAN>stack,<SPAN class=nu0>1</SPAN>,w-<SPAN class=nu0>2</SPAN><SPAN class=br0>)</SPAN>;   stack=_ y  <SPAN class=coMULTI>/*rebuild the stack with answer. */</SPAN><BR>  <SPAN class=kw1>call</SPAN> show&nbsp;?<BR>  <SPAN class=kw3>end</SPAN>   <SPAN class=coMULTI>/*#*/</SPAN><BR>&nbsp;<BR>z=<SPAN class=kw6>space</SPAN><SPAN class=br0>(</SPAN>z stack<SPAN class=br0>)</SPAN>                       <SPAN class=coMULTI>/*append any residual entries.   */</SPAN><BR><SPAN class=kw1>say</SPAN>;  <SPAN class=kw1>say</SPAN> <SPAN class=st0>' RPN input:'</SPAN>  ox;    <SPAN class=kw1>say</SPAN> <SPAN class=st0>'  answer──►'</SPAN> z  <SPAN class=coMULTI>/*show input &amp; ans.*/</SPAN><BR><SPAN class=kw1>parse</SPAN> <SPAN class=kw2>source</SPAN> <SPAN class=kw2>upper</SPAN> <SPAN class=sy0>.</SPAN> y <SPAN class=sy0>.</SPAN>               <SPAN class=coMULTI>/*invoked via  C.L.  or REXX pgm?*/</SPAN><BR><SPAN class=kw1>if</SPAN> y==<SPAN class=st0>'COMMAND'</SPAN> <SPAN class=sy0>|</SPAN> <SPAN class=sy0>\</SPAN><SPAN class=kw6>datatype</SPAN><SPAN class=br0>(</SPAN>z,<SPAN class=st0>'W'</SPAN><SPAN class=br0>)</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>exit</SPAN> <SPAN class=coMULTI>/*stick a fork in it, done.*/</SPAN><BR>                                   <SPAN class=kw3>else</SPAN> <SPAN class=kw1>return</SPAN> z   <SPAN class=coMULTI>/*RESULT ──► invoker.*/</SPAN><BR><SPAN class=coMULTI>/*──────────────────────────────────SHOW subroutine─────────────────────*/</SPAN><BR>show: <SPAN class=kw1>if</SPAN> showSteps <SPAN class=kw3>then</SPAN> <SPAN class=kw1>say</SPAN> <SPAN class=kw6>center</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw1>arg</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN>,L<SPAN class=br0>)</SPAN> <SPAN class=kw6>left</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw6>space</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN>,L<SPAN class=br0>)</SPAN>;  <SPAN class=kw1>return</SPAN></PRE>
<P><B>output</B> when using the default input </P><PRE style="OVERFLOW: scroll">─────────operand───────── ──────────────────────stack───────────────────────
     add to───►stack      3
     add to───►stack      3 4
     add to───►stack      3 4 2
            *             3 8
     add to───►stack      3 8 1
     add to───►stack      3 8 1 5
            -             3 8 -4
     add to───►stack      3 8 -4 2
     add to───►stack      3 8 -4 2 3
            ^             3 8 -4 8
            ^             3 8 65536
            /             3 0.0001220703125
            +             3.0001220703125

 RPN input: 3 4 2 * 1 5 - 2 3 ^ ^ / +
  answer──► 3.0001220703125
</PRE>
<H3><SPAN class=editsection>[<A title="Edit section: version 3 (error checking)" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=34">edit</A>]</SPAN> 
<SPAN id=version_3_.28error_checking.29 class=mw-headline>version 3 (error 
checking)</SPAN></H3>
<P>This REXX version is the same as above, but also checks for various errors 
and allows more operators: </P>
<UL>
  <LI>checks for illegal operator </LI>
  <LI>checks for illegal number </LI>
  <LI>checks for illegal bit (logical) values </LI>
  <LI>checks for malformed RPN expression </LI>
  <LI>checks for division by zero </LI>
  <LI>allows alternative exponentiation symbol &nbsp; ** </LI>
  <LI>allows logical operations &nbsp; &amp; &nbsp; &amp;&amp; &nbsp; | </LI>
  <LI>allows alternative division symbol &nbsp; ÷ </LI>
  <LI>allows integer division &nbsp;&nbsp;% </LI>
  <LI>allows remainder division &nbsp; // </LI>
  <LI>allows concatenation &nbsp; || </LI></UL><PRE class="rexx highlighted_source"><SPAN class=coMULTI>/*REXX program  evaluates  a  Reverse Polish notation (RPN)  expression.*/</SPAN><BR><SPAN class=kw1>parse</SPAN> <SPAN class=kw1>arg</SPAN> x;    <SPAN class=kw1>if</SPAN> x=<SPAN class=st0>''</SPAN>  <SPAN class=kw3>then</SPAN> x = <SPAN class=st0>'3 4 2 * 1 5 - 2 3 ^ ^ / +'</SPAN>;        ox=x<BR>showSteps=<SPAN class=nu0>1</SPAN>               <SPAN class=coMULTI>/*set to 0 (zero) if working steps not wanted.*/</SPAN><BR>x=<SPAN class=kw6>space</SPAN><SPAN class=br0>(</SPAN>x<SPAN class=br0>)</SPAN>;   tokens=<SPAN class=kw6>words</SPAN><SPAN class=br0>(</SPAN>x<SPAN class=br0>)</SPAN>          <SPAN class=coMULTI>/*elide extra blanks;count tokens*/</SPAN><BR>  <SPAN class=kw1>do</SPAN> i=<SPAN class=nu0>1</SPAN>  <SPAN class=kw2>for</SPAN> tokens;  @<SPAN class=sy0>.</SPAN>i=<SPAN class=kw6>word</SPAN><SPAN class=br0>(</SPAN>x,i<SPAN class=br0>)</SPAN>;  <SPAN class=kw3>end</SPAN> <SPAN class=coMULTI>/*i*/</SPAN>   <SPAN class=coMULTI>/*assign input tokens*/</SPAN><BR>L=<SPAN class=kw6>max</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>20</SPAN>,<SPAN class=kw6>length</SPAN><SPAN class=br0>(</SPAN>x<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN>                    <SPAN class=coMULTI>/*use 20 for the min show width. */</SPAN><BR><SPAN class=kw1>numeric</SPAN> <SPAN class=kw2>digits</SPAN> L                       <SPAN class=coMULTI>/*ensure enough digits for answer*/</SPAN><BR><SPAN class=kw1>say</SPAN> <SPAN class=kw6>center</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>'operand'</SPAN>,L,<SPAN class=st0>'─'</SPAN><SPAN class=br0>)</SPAN> <SPAN class=kw6>center</SPAN><SPAN class=br0>(</SPAN><SPAN class=st0>'stack'</SPAN>,L<SPAN class=sy0>*</SPAN><SPAN class=nu0>2</SPAN>,<SPAN class=st0>'─'</SPAN><SPAN class=br0>)</SPAN>;      e=<SPAN class=st0>'***error!***'</SPAN><BR>add2s=<SPAN class=st0>'add to───►stack'</SPAN>;  z=;          stack=<BR>dop=<SPAN class=st0>'/ //&nbsp;% ÷'</SPAN>;           bop=<SPAN class=st0>'&amp; | &amp;&amp;'</SPAN> <SPAN class=coMULTI>/*division   ops; binary operands*/</SPAN><BR>aop=<SPAN class=st0>'- + * ^ **'</SPAN> dop bop; lop=aop <SPAN class=st0>'||'</SPAN> <SPAN class=coMULTI>/*arithmetic ops; legal  operands*/</SPAN><BR>&nbsp;<BR>  <SPAN class=kw1>do</SPAN> #=<SPAN class=nu0>1</SPAN>  <SPAN class=kw2>for</SPAN> tokens;  &nbsp;?=@<SPAN class=sy0>.</SPAN>#; &nbsp;??=?   <SPAN class=coMULTI>/*process each token from @. list*/</SPAN><BR>  w=<SPAN class=kw6>words</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN>;  b=<SPAN class=kw6>word</SPAN><SPAN class=br0>(</SPAN>stack,<SPAN class=kw6>max</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>1</SPAN>,w<SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN>     <SPAN class=coMULTI>/*stack count; last entry.*/</SPAN><BR>                   a=<SPAN class=kw6>word</SPAN><SPAN class=br0>(</SPAN>stack,<SPAN class=kw6>max</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>1</SPAN>,w-<SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>)</SPAN>   <SPAN class=coMULTI>/*stack's "first" operand.*/</SPAN><BR>  division  =<SPAN class=kw6>wordpos</SPAN><SPAN class=br0>(</SPAN>?,dop<SPAN class=br0>)</SPAN><SPAN class=sy0>\</SPAN>==<SPAN class=nu0>0</SPAN>               <SPAN class=coMULTI>/*flag:  doing a division.*/</SPAN><BR>  arith     =<SPAN class=kw6>wordpos</SPAN><SPAN class=br0>(</SPAN>?,aop<SPAN class=br0>)</SPAN><SPAN class=sy0>\</SPAN>==<SPAN class=nu0>0</SPAN>               <SPAN class=coMULTI>/*flag:  doing arithmetic.*/</SPAN><BR>  bitOp     =<SPAN class=kw6>wordpos</SPAN><SPAN class=br0>(</SPAN>?,bop<SPAN class=br0>)</SPAN><SPAN class=sy0>\</SPAN>==<SPAN class=nu0>0</SPAN>               <SPAN class=coMULTI>/*flag:  doing binary math*/</SPAN><BR>  <SPAN class=kw1>if</SPAN> <SPAN class=kw6>datatype</SPAN><SPAN class=br0>(</SPAN>?,<SPAN class=st0>'N'</SPAN><SPAN class=br0>)</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN>; stack=stack&nbsp;?; <SPAN class=kw1>call</SPAN> show add2s; <SPAN class=kw1>iterate</SPAN>; <SPAN class=kw3>end</SPAN><BR>  <SPAN class=kw1>if</SPAN> <SPAN class=kw6>wordpos</SPAN><SPAN class=br0>(</SPAN>?,lop<SPAN class=br0>)</SPAN>==<SPAN class=nu0>0</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN>; z=e <SPAN class=st0>'illegal operator:'</SPAN>&nbsp;?;      <SPAN class=kw1>leave</SPAN>; <SPAN class=kw3>end</SPAN><BR>  <SPAN class=kw1>if</SPAN> w<SPAN class=sy0>&lt;</SPAN><SPAN class=nu0>2</SPAN>               <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN>; z=e <SPAN class=st0>'illegal RPN expression.'</SPAN>;  <SPAN class=kw1>leave</SPAN>; <SPAN class=kw3>end</SPAN><BR>  <SPAN class=kw1>if</SPAN>&nbsp;?==<SPAN class=st0>'^'</SPAN>            <SPAN class=kw3>then</SPAN>&nbsp;??=<SPAN class=st0>"**"</SPAN>    <SPAN class=coMULTI>/*REXXify  ^ ──► **  (make legal)*/</SPAN><BR>  <SPAN class=kw1>if</SPAN>&nbsp;?==<SPAN class=st0>'÷'</SPAN>            <SPAN class=kw3>then</SPAN>&nbsp;??=<SPAN class=st0>"/"</SPAN>     <SPAN class=coMULTI>/*REXXify  ÷ ──► /   (make legal)*/</SPAN><BR>  <SPAN class=kw1>if</SPAN> division  <SPAN class=sy0>&amp;</SPAN>  b=<SPAN class=nu0>0</SPAN>  <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN>; z=e <SPAN class=st0>'division by zero: '</SPAN>    b;  <SPAN class=kw1>leave</SPAN>; <SPAN class=kw3>end</SPAN><BR>  <SPAN class=kw1>if</SPAN> bitOp <SPAN class=sy0>&amp;</SPAN> <SPAN class=sy0>\</SPAN>isBit<SPAN class=br0>(</SPAN>a<SPAN class=br0>)</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN>; z=e <SPAN class=st0>"token isn't logical: "</SPAN> a;  <SPAN class=kw1>leave</SPAN>; <SPAN class=kw3>end</SPAN><BR>  <SPAN class=kw1>if</SPAN> bitOp <SPAN class=sy0>&amp;</SPAN> <SPAN class=sy0>\</SPAN>isBit<SPAN class=br0>(</SPAN>b<SPAN class=br0>)</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>do</SPAN>; z=e <SPAN class=st0>"token isn't logical: "</SPAN> b;  <SPAN class=kw1>leave</SPAN>; <SPAN class=kw3>end</SPAN><BR>  <SPAN class=kw1>interpret</SPAN> <SPAN class=st0>'y='</SPAN> a&nbsp;?? b                <SPAN class=coMULTI>/*compute with two stack operands*/</SPAN><BR>  <SPAN class=kw1>if</SPAN> <SPAN class=kw6>datatype</SPAN><SPAN class=br0>(</SPAN>y,<SPAN class=st0>'W'</SPAN><SPAN class=br0>)</SPAN>   <SPAN class=kw3>then</SPAN> y=y<SPAN class=sy0>/</SPAN><SPAN class=nu0>1</SPAN>      <SPAN class=coMULTI>/*normalize number with  ÷  by 1.*/</SPAN><BR>  _=<SPAN class=kw6>subword</SPAN><SPAN class=br0>(</SPAN>stack,<SPAN class=nu0>1</SPAN>,w-<SPAN class=nu0>2</SPAN><SPAN class=br0>)</SPAN>;   stack=_ y  <SPAN class=coMULTI>/*rebuild the stack with answer. */</SPAN><BR>  <SPAN class=kw1>call</SPAN> show&nbsp;?<BR>  <SPAN class=kw3>end</SPAN>   <SPAN class=coMULTI>/*#*/</SPAN><BR>&nbsp;<BR><SPAN class=kw1>if</SPAN> <SPAN class=kw6>word</SPAN><SPAN class=br0>(</SPAN>z,<SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN>==e <SPAN class=kw3>then</SPAN> stack=            <SPAN class=coMULTI>/*handle special case of errors. */</SPAN><BR>z=<SPAN class=kw6>space</SPAN><SPAN class=br0>(</SPAN>z stack<SPAN class=br0>)</SPAN>                       <SPAN class=coMULTI>/*append any residual entries.   */</SPAN><BR><SPAN class=kw1>say</SPAN>;  <SPAN class=kw1>say</SPAN> <SPAN class=st0>' RPN input:'</SPAN>  ox;    <SPAN class=kw1>say</SPAN> <SPAN class=st0>'  answer──►'</SPAN> z  <SPAN class=coMULTI>/*show input &amp; ans.*/</SPAN><BR><SPAN class=kw1>parse</SPAN> <SPAN class=kw2>source</SPAN> <SPAN class=kw2>upper</SPAN> <SPAN class=sy0>.</SPAN> how <SPAN class=sy0>.</SPAN>             <SPAN class=coMULTI>/*invoked via  C.L.  or REXX pgm?*/</SPAN><BR><SPAN class=kw1>if</SPAN> how==<SPAN class=st0>'COMMAND'</SPAN> <SPAN class=sy0>|</SPAN> ,<BR>   <SPAN class=sy0>\</SPAN><SPAN class=kw6>datatype</SPAN><SPAN class=br0>(</SPAN>z,<SPAN class=st0>'W'</SPAN><SPAN class=br0>)</SPAN> <SPAN class=kw3>then</SPAN> <SPAN class=kw1>exit</SPAN>          <SPAN class=coMULTI>/*stick a fork in it, we're done.*/</SPAN><BR><SPAN class=kw1>return</SPAN> z                               <SPAN class=coMULTI>/*return  Z ──► invoker (RESULT).*/</SPAN><BR><SPAN class=coMULTI>/*──────────────────────────────────subroutines─────────────────────────*/</SPAN><BR>isBit: <SPAN class=kw1>return</SPAN> <SPAN class=kw1>arg</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN>==<SPAN class=nu0>0</SPAN> <SPAN class=sy0>|</SPAN> <SPAN class=kw1>arg</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN>==<SPAN class=nu0>1</SPAN>    <SPAN class=coMULTI>/*returns  1  if arg1 is bin bit.*/</SPAN><BR>show:  <SPAN class=kw1>if</SPAN> showSteps <SPAN class=kw3>then</SPAN> <SPAN class=kw1>say</SPAN> <SPAN class=kw6>center</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw1>arg</SPAN><SPAN class=br0>(</SPAN><SPAN class=nu0>1</SPAN><SPAN class=br0>)</SPAN>,L<SPAN class=br0>)</SPAN> <SPAN class=kw6>left</SPAN><SPAN class=br0>(</SPAN><SPAN class=kw6>space</SPAN><SPAN class=br0>(</SPAN>stack<SPAN class=br0>)</SPAN>,L<SPAN class=br0>)</SPAN>; <SPAN class=kw1>return</SPAN></PRE>
<P><B>output</B> is identical to version 2. <BR><BR></P>
<H2><SPAN class=editsection>[<A title="Edit section: Ruby" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=35">edit</A>]</SPAN> 
<SPAN id=Ruby class=mw-headline><A title=Category:Ruby 
href="http://rosettacode.org/wiki/Category:Ruby">Ruby</A></SPAN></H2>
<P>See <A title=Parsing/RPN/Ruby 
href="http://rosettacode.org/wiki/Parsing/RPN/Ruby">Parsing/RPN/Ruby</A> </P><PRE class="ruby highlighted_source">rpn = RPNExpression<SPAN class=br0>(</SPAN><SPAN class=st0>"3 4 2 * 1 5 - 2 3 ^ ^ / +"</SPAN><SPAN class=br0>)</SPAN><BR>value = rpn.<SPAN class=kw3>eval</SPAN></PRE>
<P>outputs </P><PRE>for RPN expression: 3 4 2 * 1 5 - 2 3 ^ ^ / +
Term	Action	Stack
3	PUSH	[3]
4	PUSH	[3, 4]
2	PUSH	[3, 4, 2]
*	MUL	[3, 8]
1	PUSH	[3, 8, 1]
5	PUSH	[3, 8, 1, 5]
-	SUB	[3, 8, -4]
2	PUSH	[3, 8, -4, 2]
3	PUSH	[3, 8, -4, 2, 3]
^	EXP	[3, 8, -4, 8]
^	EXP	[3, 8, 65536]
/	DIV	[3, 0.0001220703125]
+	ADD	[3.0001220703125]
Value = 3.0001220703125</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Run BASIC" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=36">edit</A>]</SPAN> 
<SPAN id=Run_BASIC class=mw-headline><A title="Category:Run BASIC" 
href="http://rosettacode.org/wiki/Category:Run_BASIC">Run BASIC</A></SPAN></H2><PRE class="text highlighted_source">prn$ = "3 4 2 * 1 5 - 2 3 ^ ^ / + "<BR>&nbsp;<BR>j = 0<BR>while word$(prn$,i + 1," ") &lt;&gt; ""<BR>i = i + 1<BR>  n$ = word$(prn$,i," ")<BR>  if n$ &lt; "0" or n$ &gt; "9" then <BR>    num1   = val(word$(stack$,s," "))<BR>    num2   = val(word$(stack$,s-1," "))<BR>    n      = op(n$,num2,num1)<BR>    s      = s - 1<BR>    stack$ = stk$(stack$,s -1,str$(n))<BR>   print "Push Opr ";n$;" to stack:  ";stack$<BR> else<BR>  s = s + 1<BR>  stack$ = stack$ + n$ + " "<BR>  print "Push Num ";n$;" to stack:  ";stack$<BR>end if<BR>wend<BR>&nbsp;<BR>function stk$(stack$,s,a$)<BR>for i = 1 to s<BR>  stk$ = stk$ + word$(stack$,i," ") + " "<BR>next i<BR>stk$ = stk$ + a$ + " "<BR>end function<BR>&nbsp;<BR>FUNCTION op(op$,a,b)<BR>if op$ = "*" then op = a * b<BR>if op$ = "/" then op = a / b<BR>if op$ = "^" then op = a ^ b<BR>if op$ = "+" then op = a + b<BR>if op$ = "-" then op = a - b<BR>end function</PRE><PRE>Push Num 3 to stack:  3 
Push Num 4 to stack:  3 4 
Push Num 2 to stack:  3 4 2 
Push Opr * to stack:  3 8 
Push Num 1 to stack:  3 8 1 
Push Num 5 to stack:  3 8 1 5 
Push Opr - to stack:  3 8 -4 
Push Num 2 to stack:  3 8 -4 2 
Push Num 3 to stack:  3 8 -4 2 3 
Push Opr ^ to stack:  3 8 -4 8 
Push Opr ^ to stack:  3 8 65536 
Push Opr / to stack:  3 1.22070312e-4 
Push Opr + to stack:  3.00012207</PRE>
<H2><SPAN class=editsection>[<A title="Edit section: Tcl" 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit&amp;section=37">edit</A>]</SPAN> 
<SPAN id=Tcl class=mw-headline><A title=Category:Tcl 
href="http://rosettacode.org/wiki/Category:Tcl">Tcl</A></SPAN></H2><PRE class="tcl highlighted_source"><SPAN class=co1># Helper</SPAN><BR><SPAN class=kw1>proc</SPAN> pop stk <SPAN class=br0>{</SPAN><BR>    <SPAN class=kw1>upvar</SPAN> <SPAN class=nu0>1</SPAN> <SPAN class=re0>$stk</SPAN> s<BR>    <SPAN class=kw1>set</SPAN> val <SPAN class=br0>[</SPAN><SPAN class=kw2>lindex</SPAN> <SPAN class=re0>$s</SPAN> end<SPAN class=br0>]</SPAN><BR>    <SPAN class=kw1>set</SPAN> s <SPAN class=br0>[</SPAN><SPAN class=kw2>lreplace</SPAN> <SPAN class=re0>$s</SPAN> end end<SPAN class=br0>]</SPAN><BR>    <SPAN class=kw1>return</SPAN> <SPAN class=re0>$val</SPAN><BR><SPAN class=br0>}</SPAN><BR>&nbsp;<BR><SPAN class=kw1>proc</SPAN> evaluate rpn <SPAN class=br0>{</SPAN><BR>    <SPAN class=kw1>set</SPAN> stack <SPAN class=br0>{</SPAN><SPAN class=br0>}</SPAN><BR>    <SPAN class=kw1>foreach</SPAN> token <SPAN class=re0>$rpn</SPAN> <SPAN class=br0>{</SPAN><BR>	<SPAN class=kw1>set</SPAN> act <SPAN class=st0>"apply"</SPAN><BR>	<SPAN class=kw1>switch</SPAN> <SPAN class=re0>$token</SPAN> <SPAN class=br0>{</SPAN><BR>	    <SPAN class=st0>"^"</SPAN> <SPAN class=br0>{</SPAN><BR>		<SPAN class=co1># Non-commutative operation</SPAN><BR>		<SPAN class=kw1>set</SPAN> a <SPAN class=br0>[</SPAN>pop stack<SPAN class=br0>]</SPAN><BR>		<SPAN class=kw2>lappend</SPAN> stack <SPAN class=br0>[</SPAN><SPAN class=kw1>expr</SPAN> <SPAN class=br0>{</SPAN><SPAN class=br0>[</SPAN>pop stack<SPAN class=br0>]</SPAN> <SPAN class=sy0>**</SPAN> <SPAN class=re0>$a</SPAN><SPAN class=br0>}</SPAN><SPAN class=br0>]</SPAN><BR>	    <SPAN class=br0>}</SPAN><BR>	    <SPAN class=st0>"/"</SPAN> <SPAN class=br0>{</SPAN><BR>		<SPAN class=co1># Non-commutative, special float handling</SPAN><BR>		<SPAN class=kw1>set</SPAN> a <SPAN class=br0>[</SPAN>pop stack<SPAN class=br0>]</SPAN><BR>		<SPAN class=kw1>set</SPAN> b <SPAN class=br0>[</SPAN><SPAN class=kw1>expr</SPAN> <SPAN class=br0>{</SPAN><SPAN class=br0>[</SPAN>pop stack<SPAN class=br0>]</SPAN> / double<SPAN class=br0>(</SPAN><SPAN class=re0>$a</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>}</SPAN><SPAN class=br0>]</SPAN><BR>		<SPAN class=kw1>if</SPAN> <SPAN class=br0>{</SPAN><SPAN class=re0>$b</SPAN> == round<SPAN class=br0>(</SPAN><SPAN class=re0>$b</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>}</SPAN> <SPAN class=br0>{</SPAN><SPAN class=kw1>set</SPAN> b <SPAN class=br0>[</SPAN><SPAN class=kw1>expr</SPAN> <SPAN class=br0>{</SPAN>round<SPAN class=br0>(</SPAN><SPAN class=re0>$b</SPAN><SPAN class=br0>)</SPAN><SPAN class=br0>}</SPAN><SPAN class=br0>]</SPAN><SPAN class=br0>}</SPAN><BR>		<SPAN class=kw2>lappend</SPAN> stack <SPAN class=re0>$b</SPAN><BR>	    <SPAN class=br0>}</SPAN><BR>	    <SPAN class=st0>"*"</SPAN> <SPAN class=br0>{</SPAN><BR>		<SPAN class=co1># Commutative operation</SPAN><BR>		<SPAN class=kw2>lappend</SPAN> stack <SPAN class=br0>[</SPAN><SPAN class=kw1>expr</SPAN> <SPAN class=br0>{</SPAN><SPAN class=br0>[</SPAN>pop stack<SPAN class=br0>]</SPAN> <SPAN class=sy0>*</SPAN> <SPAN class=br0>[</SPAN>pop stack<SPAN class=br0>]</SPAN><SPAN class=br0>}</SPAN><SPAN class=br0>]</SPAN><BR>	    <SPAN class=br0>}</SPAN><BR>	    <SPAN class=st0>"-"</SPAN> <SPAN class=br0>{</SPAN><BR>		<SPAN class=co1># Non-commutative operation</SPAN><BR>		<SPAN class=kw1>set</SPAN> a <SPAN class=br0>[</SPAN>pop stack<SPAN class=br0>]</SPAN><BR>		<SPAN class=kw2>lappend</SPAN> stack <SPAN class=br0>[</SPAN><SPAN class=kw1>expr</SPAN> <SPAN class=br0>{</SPAN><SPAN class=br0>[</SPAN>pop stack<SPAN class=br0>]</SPAN> - <SPAN class=re0>$a</SPAN><SPAN class=br0>}</SPAN><SPAN class=br0>]</SPAN><BR>	    <SPAN class=br0>}</SPAN><BR>	    <SPAN class=st0>"+"</SPAN> <SPAN class=br0>{</SPAN><BR>		<SPAN class=co1># Commutative operation</SPAN><BR>		<SPAN class=kw2>lappend</SPAN> stack <SPAN class=br0>[</SPAN><SPAN class=kw1>expr</SPAN> <SPAN class=br0>{</SPAN><SPAN class=br0>[</SPAN>pop stack<SPAN class=br0>]</SPAN> + <SPAN class=br0>[</SPAN>pop stack<SPAN class=br0>]</SPAN><SPAN class=br0>}</SPAN><SPAN class=br0>]</SPAN><BR>	    <SPAN class=br0>}</SPAN><BR>	    <SPAN class=kw1>default</SPAN> <SPAN class=br0>{</SPAN><BR>		<SPAN class=kw1>set</SPAN> act <SPAN class=st0>"push"</SPAN><BR>		<SPAN class=kw2>lappend</SPAN> stack <SPAN class=re0>$token</SPAN><BR>	    <SPAN class=br0>}</SPAN><BR>	<SPAN class=br0>}</SPAN><BR>	<SPAN class=kw2>puts</SPAN> <SPAN class=st0>"$token<SPAN class=es0>\t</SPAN>$act<SPAN class=es0>\t</SPAN>$stack"</SPAN><BR>    <SPAN class=br0>}</SPAN><BR>    <SPAN class=kw1>return</SPAN> <SPAN class=br0>[</SPAN><SPAN class=kw2>lindex</SPAN> <SPAN class=re0>$stack</SPAN> end<SPAN class=br0>]</SPAN><BR><SPAN class=br0>}</SPAN><BR>&nbsp;<BR><SPAN class=kw2>puts</SPAN> <SPAN class=br0>[</SPAN>evaluate <SPAN class=br0>{</SPAN><SPAN class=nu0>3</SPAN> <SPAN class=nu0>4</SPAN> <SPAN class=nu0>2</SPAN> <SPAN class=sy0>*</SPAN> <SPAN class=nu0>1</SPAN> <SPAN class=nu0>5</SPAN> - <SPAN class=nu0>2</SPAN> <SPAN class=nu0>3</SPAN> ^ ^ / +<SPAN class=br0>}</SPAN><SPAN class=br0>]</SPAN></PRE>
<P>Output: </P><PRE>3	push	3
4	push	3 4
2	push	3 4 2
*	apply	3 8
1	push	3 8 1
5	push	3 8 1 5
-	apply	3 8 -4
2	push	3 8 -4 2
3	push	3 8 -4 2 3
^	apply	3 8 -4 8
^	apply	3 8 65536
/	apply	3 0.0001220703125
+	apply	3.0001220703125
3.0001220703125
</PRE></DIV>
<DIV class=printfooter>Retrieved from "<A 
href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;oldid=172229">http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;oldid=172229</A>" 
</DIV>
<DIV id=catlinks class=catlinks>
<DIV id=mw-normal-catlinks class=mw-normal-catlinks><A title=Special:Categories 
href="http://rosettacode.org/wiki/Special:Categories">Categories</A>: 
<UL>
  <LI><A title="Category:Programming Tasks" 
  href="http://rosettacode.org/wiki/Category:Programming_Tasks">Programming 
  Tasks</A></LI>
  <LI><A title="Category:Solutions by Programming Task" 
  href="http://rosettacode.org/wiki/Category:Solutions_by_Programming_Task">Solutions 
  by Programming Task</A></LI>
  <LI><A title=Category:Ada 
  href="http://rosettacode.org/wiki/Category:Ada">Ada</A></LI>
  <LI><A title=Category:ANTLR 
  href="http://rosettacode.org/wiki/Category:ANTLR">ANTLR</A></LI>
  <LI><A title=Category:AutoHotkey 
  href="http://rosettacode.org/wiki/Category:AutoHotkey">AutoHotkey</A></LI>
  <LI><A title="Category:BBC BASIC" 
  href="http://rosettacode.org/wiki/Category:BBC_BASIC">BBC BASIC</A></LI>
  <LI><A title=Category:C 
  href="http://rosettacode.org/wiki/Category:C">C</A></LI>
  <LI><A title=Category:C++ 
  href="http://rosettacode.org/wiki/Category:C%2B%2B">C++</A></LI>
  <LI><A title="Category:C sharp" 
  href="http://rosettacode.org/wiki/Category:C_sharp">C sharp</A></LI>
  <LI><A title=Category:Clojure 
  href="http://rosettacode.org/wiki/Category:Clojure">Clojure</A></LI>
  <LI><A title=Category:Ela 
  href="http://rosettacode.org/wiki/Category:Ela">Ela</A></LI>
  <LI><A title=Category:D 
  href="http://rosettacode.org/wiki/Category:D">D</A></LI>
  <LI><A title=Category:Go 
  href="http://rosettacode.org/wiki/Category:Go">Go</A></LI>
  <LI><A title=Category:Groovy 
  href="http://rosettacode.org/wiki/Category:Groovy">Groovy</A></LI>
  <LI><A title=Category:Haskell 
  href="http://rosettacode.org/wiki/Category:Haskell">Haskell</A></LI>
  <LI><A title=Category:Icon 
  href="http://rosettacode.org/wiki/Category:Icon">Icon</A></LI>
  <LI><A title=Category:Unicon 
  href="http://rosettacode.org/wiki/Category:Unicon">Unicon</A></LI>
  <LI><A title="Category:Icon Programming Library" 
  href="http://rosettacode.org/wiki/Category:Icon_Programming_Library">Icon 
  Programming Library</A></LI>
  <LI><A title=Category:J 
  href="http://rosettacode.org/wiki/Category:J">J</A></LI>
  <LI><A title=Category:Java 
  href="http://rosettacode.org/wiki/Category:Java">Java</A></LI>
  <LI><A title="Category:Liberty BASIC" 
  href="http://rosettacode.org/wiki/Category:Liberty_BASIC">Liberty 
  BASIC</A></LI>
  <LI><A title=Category:NetRexx 
  href="http://rosettacode.org/wiki/Category:NetRexx">NetRexx</A></LI>
  <LI><A title=Category:Objeck 
  href="http://rosettacode.org/wiki/Category:Objeck">Objeck</A></LI>
  <LI><A title=Category:OCaml 
  href="http://rosettacode.org/wiki/Category:OCaml">OCaml</A></LI>
  <LI><A title=Category:OoRexx 
  href="http://rosettacode.org/wiki/Category:OoRexx">OoRexx</A></LI>
  <LI><A title=Category:Perl 
  href="http://rosettacode.org/wiki/Category:Perl">Perl</A></LI>
  <LI><A title="Category:Perl 6" 
  href="http://rosettacode.org/wiki/Category:Perl_6">Perl 6</A></LI>
  <LI><A title=Category:PHP 
  href="http://rosettacode.org/wiki/Category:PHP">PHP</A></LI>
  <LI><A title=Category:PicoLisp 
  href="http://rosettacode.org/wiki/Category:PicoLisp">PicoLisp</A></LI>
  <LI><A title=Category:PL/I 
  href="http://rosettacode.org/wiki/Category:PL/I">PL/I</A></LI>
  <LI><A title=Category:Prolog 
  href="http://rosettacode.org/wiki/Category:Prolog">Prolog</A></LI>
  <LI><A title=Category:Python 
  href="http://rosettacode.org/wiki/Category:Python">Python</A></LI>
  <LI><A title=Category:Racket 
  href="http://rosettacode.org/wiki/Category:Racket">Racket</A></LI>
  <LI><A title=Category:REXX 
  href="http://rosettacode.org/wiki/Category:REXX">REXX</A></LI>
  <LI><A title=Category:Ruby 
  href="http://rosettacode.org/wiki/Category:Ruby">Ruby</A></LI>
  <LI><A title="Category:Run BASIC" 
  href="http://rosettacode.org/wiki/Category:Run_BASIC">Run BASIC</A></LI>
  <LI><A title=Category:Tcl 
  href="http://rosettacode.org/wiki/Category:Tcl">Tcl</A></LI></UL></DIV></DIV>
<DIV class=visualClear></DIV></DIV></DIV>
<DIV id=mw-head class=noprint>
<DIV id=p-personal>
<H5>Personal tools</H5>
<UL>
  <LI id=pt-createaccount><A 
  href="http://rosettacode.org/mw/index.php?title=Special:UserLogin&amp;returnto=Parsing%2FRPN+calculator+algorithm&amp;type=signup">Create 
  account</A></LI>
  <LI id=pt-login><A accessKey=o 
  title="You are encouraged to log in; however, it is not mandatory [o]" 
  href="http://rosettacode.org/mw/index.php?title=Special:UserLogin&amp;returnto=Parsing%2FRPN+calculator+algorithm">Log 
  in</A></LI></UL></DIV>
<DIV id=left-navigation>
<DIV id=p-namespaces class=vectorTabs>
<H5>Namespaces</H5>
<UL>
  <LI id=ca-nstab-main class=selected><SPAN><A accessKey=c 
  title="View the content page [c]" 
  href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm">Page</A></SPAN></LI>
  <LI id=ca-talk><SPAN><A accessKey=t 
  title="Discussion about the content page [t]" 
  href="http://rosettacode.org/wiki/Talk:Parsing/RPN_calculator_algorithm">Discussion</A></SPAN></LI></UL></DIV>
<DIV id=p-variants class="vectorMenu emptyPortlet">
<H4></H4>
<H5><SPAN>Variants</SPAN><A 
href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#"></A></H5>
<DIV class=menu>
<UL></UL></DIV></DIV></DIV>
<DIV id=right-navigation>
<DIV id=p-views class=vectorTabs>
<H5>Views</H5>
<UL>
  <LI id=ca-view class=selected><SPAN><A 
  href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm">Read</A></SPAN></LI>
  <LI id=ca-edit><SPAN><A accessKey=e 
  title="You can edit this page. Please use the preview button before saving [e]" 
  href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=edit">Edit</A></SPAN></LI>
  <LI id=ca-history class=collapsible><SPAN><A accessKey=h 
  title="Past revisions of this page [h]" 
  href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;action=history">View 
  history</A></SPAN></LI></UL></DIV>
<DIV id=p-cactions class="vectorMenu emptyPortlet">
<H5><SPAN>Actions</SPAN><A 
href="http://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm#"></A></H5>
<DIV class=menu>
<UL></UL></DIV></DIV>
<DIV id=p-search>
<H5><LABEL for=searchInput>Search</LABEL></H5>
<FORM id=searchform action=/mw/index.php>
<DIV><INPUT accessKey=f id=searchInput title="Search Rosetta Code [f]" 
type=search name=search> <INPUT id=searchGoButton class=searchButton title="Go to a page with this exact name if exists" value=Go type=submit name=go> 
<INPUT id=mw-searchButton class=searchButton title="Search the pages for this text" value=Search type=submit name=fulltext> 
<INPUT value=Special:Search type=hidden name=title> 
</DIV></FORM></DIV></DIV></DIV>
<DIV id=mw-panel class=noprint>
<DIV id=p-logo><A style="BACKGROUND-IMAGE: url(/mw/title.png)" 
title="Visit the main page" 
href="http://rosettacode.org/wiki/Rosetta_Code"></A></DIV>
<DIV id=p-Community class=portal>
<H5>Community</H5>
<DIV class=body>
<UL>
  <LI id=n-Twitter><A href="http://twitter.com/rosettacode" 
  rel=nofollow>Twitter</A></LI>
  <LI id=n-Chat.2FIRC><A 
  href="http://rosettacode.org/wiki/Special:WebChat">Chat/IRC</A></LI>
  <LI id=n-Planet><A href="http://rosettacode.org/planet" 
  rel=nofollow>Planet</A></LI>
  <LI id=n-The-Village-Pump><A 
  href="http://rosettacode.org/wiki/Rosetta_Code:Village_Pump">The Village 
  Pump</A></LI>
  <LI id=n-Finances><A 
  href="http://rosettacode.org/wiki/Rosetta_Code:Finances">Finances</A></LI></UL></DIV></DIV>
<DIV id=p-Explore class=portal>
<H5>Explore</H5>
<DIV class=body>
<UL>
  <LI id=n-Languages><A 
  href="http://rosettacode.org/wiki/Category:Programming_Languages">Languages</A></LI>
  <LI id=n-Tasks><A 
  href="http://rosettacode.org/wiki/Category:Programming_Tasks">Tasks</A></LI>
  <LI id=n-recentchanges><A accessKey=r 
  title="A list of recent changes in the wiki [r]" 
  href="http://rosettacode.org/wiki/Special:RecentChanges">Recent 
  changes</A></LI>
  <LI id=n-Similar-sites><A 
  href="http://rosettacode.org/wiki/Help:Similar_Sites">Similar sites</A></LI>
  <LI id=n-randompage><A accessKey=x title="Load a random page [x]" 
  href="http://rosettacode.org/wiki/Special:Random">Random 
page</A></LI></UL></DIV></DIV>
<DIV id=p-Misc class=portal>
<H5>Misc</H5>
<DIV class=body><G:PLUSONE></G:PLUSONE>
<SCRIPT type=text/rocketscript>
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</SCRIPT>
<A class=twitter-share-button href="https://twitter.com/share" 
data-hashtags="rosettacode" data-size="large" data-lang="en">Tweet</A>
<SCRIPT type=text/rocketscript>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</SCRIPT>

<SCRIPT type=text/rocketscript 
data-rocketsrc="http://www.stumbleupon.com/hostedbadge.php?s=2"></SCRIPT>
 </DIV></DIV>
<DIV id=p-tb class=portal>
<H5>Toolbox</H5>
<DIV class=body>
<UL>
  <LI id=t-whatlinkshere><A accessKey=j 
  title="A list of all wiki pages that link here [j]" 
  href="http://rosettacode.org/wiki/Special:WhatLinksHere/Parsing/RPN_calculator_algorithm">What 
  links here</A></LI>
  <LI id=t-recentchangeslinked><A accessKey=k 
  title="Recent changes in pages linked from this page [k]" 
  href="http://rosettacode.org/wiki/Special:RecentChangesLinked/Parsing/RPN_calculator_algorithm">Related 
  changes</A></LI>
  <LI id=t-specialpages><A accessKey=q title="A list of all special pages [q]" 
  href="http://rosettacode.org/wiki/Special:SpecialPages">Special pages</A></LI>
  <LI id=t-print><A accessKey=p title="Printable version of this page [p]" 
  href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;printable=yes" 
  rel=alternate>Printable version</A></LI>
  <LI id=t-permalink><A title="Permanent link to this revision of the page" 
  href="http://rosettacode.org/mw/index.php?title=Parsing/RPN_calculator_algorithm&amp;oldid=172229">Permanent 
  link</A></LI>
  <LI id=t-smwbrowselink><A 
  title="Special:Browse/Parsing-2FRPN calculator algorithm" 
  href="http://rosettacode.org/wiki/Special:Browse/Parsing-2FRPN_calculator_algorithm">Browse 
  properties</A></LI></UL></DIV></DIV></DIV>
<DIV id=footer>
<UL id=footer-info>
  <LI id=footer-info-lastmod>This page was last modified on 29 November 2013, at 
  12:38.</LI>
  <LI id=footer-info-copyright>Content is available under <A class=external 
  href="http://www.gnu.org/licenses/fdl-1.2.html">GNU Free Documentation License 
  1.2</A>.</LI></UL>
<UL id=footer-places>
  <LI id=footer-places-privacy><A title="Rosetta Code:Privacy policy" 
  href="http://rosettacode.org/wiki/Rosetta_Code:Privacy_policy">Privacy 
  policy</A></LI>
  <LI id=footer-places-about><A title="Rosetta Code:About" 
  href="http://rosettacode.org/wiki/Rosetta_Code:About">About Rosetta 
  Code</A></LI>
  <LI id=footer-places-disclaimer><A title="Rosetta Code:General disclaimer" 
  href="http://rosettacode.org/wiki/Rosetta_Code:General_disclaimer">Disclaimers</A></LI></UL>
<UL id=footer-icons class=noprint>
  <LI id=footer-copyrightico><A 
  href="http://www.gnu.org/licenses/fdl-1.2.html"><IMG 
  alt="GNU Free Documentation License 1.2" 
  src="Parsing-RPN%20algorithm%20-%20Rosetta%20Code_files/gnu-fdl.png" width=88 
  height=31></A> </LI>
  <LI id=footer-poweredbyico><A href="http://www.mediawiki.org/"><IMG 
  alt="Powered by MediaWiki" 
  src="Parsing-RPN%20algorithm%20-%20Rosetta%20Code_files/poweredby_mediawiki_88x31.png" 
  width=88 height=31></A> <A 
  href="http://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki"><IMG 
  alt="Powered by Semantic MediaWiki" 
  src="Parsing-RPN%20algorithm%20-%20Rosetta%20Code_files/smw_button.png" 
  width=88 height=31></A> </LI></UL>
<DIV style="CLEAR: both"></DIV></DIV>
<SCRIPT type=text/rocketscript>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</SCRIPT>

<SCRIPT type=text/rocketscript 
data-rocketsrc="http://rosettacode.org/mw/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></SCRIPT>

<SCRIPT type=text/rocketscript>if(window.mw){
mw.loader.load(["mediawiki.user","mediawiki.page.ready","mediawiki.searchSuggest"], null, true);
}</SCRIPT>

<SCRIPT type=text/rocketscript>/* CloudFlare analytics upgrade */
</SCRIPT>

<SCRIPT type=text/rocketscript 
data-rocketsrc="http://rosettacode.org/mw/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></SCRIPT>
</BODY></HTML>
